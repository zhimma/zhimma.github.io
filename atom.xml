<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhimma&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.zhimma.com/"/>
  <updated>2019-01-24T09:05:54.452Z</updated>
  <id>https://blog.zhimma.com/</id>
  
  <author>
    <name>zhimma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AJAX解决跨域问题（Access-Control-Allow-Origin）</title>
    <link href="https://blog.zhimma.com/2018/11/30/AJAX%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%EF%BC%88Access-Control-Allow-Origin%EF%BC%89/"/>
    <id>https://blog.zhimma.com/2018/11/30/AJAX解决跨域问题（Access-Control-Allow-Origin）/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:05:54.452Z</updated>
    
    <content type="html"><![CDATA[<p>之前遇到过跨域的问题,一直觉得很神秘,也没有多关注,就过去了,今天又看到几篇文章说跨域,闲来无事于是将其整理记录下来；</p><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p>先来阐述下几个概念:</p><p><strong>跨域</strong>:是指浏览器对于JavaScript的同源策略限制,只要协议、域名、端口有任何一个不同,都被当作是不同的域,都不能执行或获取其他网站的资源；</p><p>姑且这么定义吧,举个简单例子,就是<a href="http://www.client.com网站上的程序不能从www.server.com网站上获取数据,如果强行获取,则会报出下面错误" target="_blank" rel="noopener">www.client.com网站上的程序不能从www.server.com网站上获取数据,如果强行获取,则会报出下面错误</a></p><p><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/JavaScript/error1.png" alt="image"></p><a id="more"></a><p>有没有跨域,判断是不是属于跨域,可以参考下面:</p><table><thead><tr><th>URL</th><th>说明</th><th>是否允许通信</th></tr></thead><tbody><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> 调用 <a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>同一域名下</td><td>允许</td></tr><tr><td><a href="http://www.a.com/lab/a.js" target="_blank" rel="noopener">http://www.a.com/lab/a.js</a> 调用 <a href="http://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/script/b.js</a></td><td>同一域名下不同文件夹</td><td>允许</td></tr><tr><td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a> 调用 <a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>同一域名,不同端口</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> 调用 <a href="https://www.a.com/b.js" target="_blank" rel="noopener">https://www.a.com/b.js</a></td><td>同一域名,不同协议</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> 调用 <a href="http://70.32.92.74/b.js" target="_blank" rel="noopener">http://70.32.92.74/b.js</a></td><td>域名和域名对应ip</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> 调用 <a href="http://script.a.com/b.js" target="_blank" rel="noopener">http://script.a.com/b.js</a></td><td>主域相同,子域不同</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> 调用 <a href="http://a.com/b.js" target="_blank" rel="noopener">http://a.com/b.js</a> 同一域名,不同二级域名（同上）</td><td>不允许（cookie这种情况下也不允许访问）</td></tr><tr><td><a href="http://www.cnblogs.com/a.js" target="_blank" rel="noopener">http://www.cnblogs.com/a.js</a> 调用 <a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>不同域名</td><td>不允许</td></tr></tbody></table><p><strong>CORS</strong>:<strong>CORS（Cross-Origin Resource Sharing）跨域资源共享</strong>,定义了必须在访问跨域资源时,浏览器与服务器应该如何沟通.CORS背后的基本思想就是使用自定义的HTTP头部让浏览器与服务器进行沟通,从而决定请求或响应是应该成功还是失败.</p><p>服务器端对于<strong>CORS</strong>的支持,主要就是通过设置<strong>Access-Control-Allow-Origin</strong>来进行的.如果浏览器检测到相应的设置,就可以允许Ajax进行跨域的访问.</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="Solution-1-服务端程序解决"><a href="#Solution-1-服务端程序解决" class="headerlink" title="Solution 1:服务端程序解决"></a>Solution 1:服务端程序解决</h3><p>如果是双方预定沟通好请求允许数据,可以在服务端添加header头来解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header( &quot;Access-Control-Allow-Origin:*&quot; );</span><br><span class="line"></span><br><span class="line">header( &quot;Access-Control-Allow-Methods:POST,GET&quot; );</span><br></pre></td></tr></table></figure><p>看下面的例子:</p><p>客户端 <a href="http://www.client.com/cliend.html" target="_blank" rel="noopener">www.client.com/cliend.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt; 跨域测试 &lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;//code.jquery.com/jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button style=&quot;width:100px&quot;&gt;click client&lt;/button&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(&quot;button&quot;).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: &quot;http://www.server.com/server.php&quot;,</span><br><span class="line">            type: &quot;post&quot;,</span><br><span class="line">            data: &#123;&apos;text&apos;: &apos;hello world&apos;&#125;,</span><br><span class="line">            success: function (msg) &#123;</span><br><span class="line">                $(&quot;button&quot;).html(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>服务器端 <a href="http://www.server.com/server.php" target="_blank" rel="noopener">www.server.com/server.php</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//允许所有域名获取数据</span><br><span class="line">&lt;?php</span><br><span class="line">$text = $_POST[&apos;text&apos;];</span><br><span class="line">//允许所有的域名</span><br><span class="line">header(&apos;content-type:application:json;charset=utf8&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Origin:*&apos;);  </span><br><span class="line">header(&apos;Access-Control-Allow-Methods:POST,GET&apos;);  </span><br><span class="line">header(&apos;Access-Control-Allow-Headers:x-requested-with,content-type&apos;);</span><br><span class="line">echo json_encode($text);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">//允许制定域名获取数据</span><br><span class="line">&lt;?php</span><br><span class="line">$text = $_POST[&apos;text&apos;];</span><br><span class="line">header(&apos;content-type:application:json;charset=utf8&apos;);</span><br><span class="line">$origin = isset($_SERVER[&apos;HTTP_ORIGIN&apos;]) ? $_SERVER[&apos;HTTP_ORIGIN&apos;] : &apos;&apos;;</span><br><span class="line">//允许指定域名</span><br><span class="line">$allow_origin = [</span><br><span class="line">    &apos;http://www.client.com&apos;,</span><br><span class="line">    &apos;http://www.client2.com&apos;</span><br><span class="line">];</span><br><span class="line">if (in_array($origin, $allow_origin)) &#123;</span><br><span class="line">    header(&apos;Access-Control-Allow-Origin:&apos; . $origin);</span><br><span class="line">    header(&apos;Access-Control-Allow-Methods:POST,GET&apos;);</span><br><span class="line">    header(&apos;Access-Control-Allow-Headers:x-requested-with,content-type&apos;);</span><br><span class="line">&#125;</span><br><span class="line">echo json_encode($text);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这样,理论上就可以解决跨域问题:</p><p><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/JavaScript/success%60.png" alt="image"></p><h3 id="Solution-2-代理模式"><a href="#Solution-2-代理模式" class="headerlink" title="Solution 2:代理模式"></a>Solution 2:代理模式</h3><p>解决思路:<br>例如 <a href="http://www.client.com/client.html" target="_blank" rel="noopener">www.client.com/client.html</a> 需要调用 <a href="http://www.server.com/server.php" target="_blank" rel="noopener">www.server.com/server.php</a> ,可以写一个接口 <a href="http://www.client.com/server.php" target="_blank" rel="noopener">www.client.com/server.php</a> ,由这个接口在后端去调用 <a href="http://www.server.com/server.php" target="_blank" rel="noopener">www.server.com/server.php</a> 并拿到返回值,然后再返回给index.html,这就是一个代理的模式.相当于绕过了浏览器端,自然就不存在跨域问题.</p><h3 id="Solution-3-使用JSONP"><a href="#Solution-3-使用JSONP" class="headerlink" title="Solution 3:使用JSONP"></a>Solution 3:使用JSONP</h3><p>使用之前,建议去看下我的另一篇文章<a href="https://blog.bytesclub.com/2017/06/12/JSON%E5%92%8CJSONP/" target="_blank" rel="noopener">Json和JsonP</a>,然后再过来实践；</p><p>还是直接上代码:</p><p>客户端 <a href="http://www.client.com/client.html" target="_blank" rel="noopener">www.client.com/client.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt; 跨域测试 &lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;//code.jquery.com/jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=&quot;clickMe&quot; style=&quot;width:100px&quot;&gt;click get jsonP&lt;/button&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(&quot;#clickMe&quot;).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: &quot;http://www.server.com/jsonP.json&quot;,</span><br><span class="line">            type: &quot;post&quot;,</span><br><span class="line">            dataType: &quot;jsonP&quot;,</span><br><span class="line">            data: &#123;&apos;text&apos;: &apos;hello world&apos;&#125;,</span><br><span class="line">            jsonpCallback: &apos;returnData&apos;,  //可自定义 函数名</span><br><span class="line">            success: function (msg) &#123;</span><br><span class="line">                alert(msg.text);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: function (XMLHttpRequest, textStatus, errorThrown) &#123;</span><br><span class="line">                alert(XMLHttpRequest.status);</span><br><span class="line">                alert(XMLHttpRequest.readyState);</span><br><span class="line">                alert(textStatus);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>服务器端 <a href="http://www.server.com/jsonP.json" target="_blank" rel="noopener">www.server.com/jsonP.json</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">returnData(&#123;&quot;text&quot;:&quot;hello jsonP&quot;&#125;);</span><br></pre></td></tr></table></figure><p>同样的也可以跨域获取数据</p><h2 id="Solution-4-使用html5-API-postMessage-转自这里"><a href="#Solution-4-使用html5-API-postMessage-转自这里" class="headerlink" title="Solution 4:使用html5 API postMessage(转自这里)"></a>Solution 4:<a href="http://blog.xieliqun.com/2016/08/25/postMessage-cross-domain/" target="_blank" rel="noopener">使用html5 API postMessage(转自这里)</a></h2><p>客户端 <a href="http://www.client.com/client.html" target="_blank" rel="noopener">www.client.com/client.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;iframe style=&quot;display: none&quot; src=&quot;http://www.server.com/server.html&quot; name=&quot;postIframe&quot; onload=&quot;messageLoad()&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function messageLoad() &#123;</span><br><span class="line">        var url = &quot;http://www.server.com&quot;;</span><br><span class="line">        window.postIframe.postMessage(&quot;给我tsort的信息&quot;, url); //发送数据</span><br><span class="line">    &#125;</span><br><span class="line">    window.onmessage = function (e) &#123;</span><br><span class="line">        e = e || event;</span><br><span class="line">        console.log(e.data); //接收b返回的数据,在控制台有两次输出</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>服务器端 <a href="http://www.server.com/server.html" target="_blank" rel="noopener">www.server.com/server.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onmessage = function(e)&#123;</span><br><span class="line">        e = e || event;</span><br><span class="line">        alert(e.data); //立即弹出a发送过来的数据</span><br><span class="line">        e.source.postMessage(&quot;好的,请稍等三秒！&quot;,e.origin); //立即回复a</span><br><span class="line"></span><br><span class="line">        var postData = &#123;name:&quot;tsrot&quot;,age:24&#125;;</span><br><span class="line">        var strData = JSON.stringify(postData); //json对象转化为字符串</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            e.source.postMessage(strData,e.origin);</span><br><span class="line">        &#125;,3000); //3秒后向a发送数据</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前遇到过跨域的问题,一直觉得很神秘,也没有多关注,就过去了,今天又看到几篇文章说跨域,闲来无事于是将其整理记录下来；&lt;/p&gt;
&lt;h2 id=&quot;一些概念&quot;&gt;&lt;a href=&quot;#一些概念&quot; class=&quot;headerlink&quot; title=&quot;一些概念&quot;&gt;&lt;/a&gt;一些概念&lt;/h2&gt;&lt;p&gt;先来阐述下几个概念:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跨域&lt;/strong&gt;:是指浏览器对于JavaScript的同源策略限制,只要协议、域名、端口有任何一个不同,都被当作是不同的域,都不能执行或获取其他网站的资源；&lt;/p&gt;
&lt;p&gt;姑且这么定义吧,举个简单例子,就是&lt;a href=&quot;http://www.client.com网站上的程序不能从www.server.com网站上获取数据,如果强行获取,则会报出下面错误&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.client.com网站上的程序不能从www.server.com网站上获取数据,如果强行获取,则会报出下面错误&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/JavaScript/error1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://blog.zhimma.com/categories/JavaScript/"/>
    
    
      <category term="Cors" scheme="https://blog.zhimma.com/tags/Cors/"/>
    
  </entry>
  
  <entry>
    <title>CLI&amp;Swoole Model</title>
    <link href="https://blog.zhimma.com/2018/11/30/CLI&amp;Swoole%20Model/"/>
    <id>https://blog.zhimma.com/2018/11/30/CLI&amp;Swoole Model/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:10:29.957Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><p><code>php index.php FEE3D9650A692CB93FF43DE7267BDBD0/Customer/Api/Pay/Address/index/id/1/name/222</code></p><blockquote><p>获取参数<code>$_SERVER[&#39;PARAMS&#39;]</code></p></blockquote><h3 id="Swoole"><a href="#Swoole" class="headerlink" title="Swoole"></a>Swoole</h3><p><code>trunk/ThinkPHP/Library/Think/App.class.php    line:98</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (strtolower($_SERVER[<span class="string">'CY_REQUEST_URI'</span>]) == <span class="string">'swoole/server/swooleserver'</span>) &#123;</span><br><span class="line">    $class = <span class="string">''</span>;</span><br><span class="line">    $array = explode(<span class="string">'/'</span>, $_SERVER[<span class="string">'CY_REQUEST_URI'</span>]);</span><br><span class="line">    <span class="keyword">foreach</span> ($array <span class="keyword">as</span> $name) &#123;</span><br><span class="line">        $class .= <span class="string">'\\'</span>.parse_name($name, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行-1"><a href="#执行-1" class="headerlink" title="执行"></a>执行</h4><p>启动swoole 服务:<code>php index.php Swoole/Server/SwooleServer</code></p><p>投递异步任务</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">new</span> SwooleClient())-&gt;handle([</span><br><span class="line"><span class="string">'class'</span> =&gt;  <span class="string">'Swoole\Process\Customer\Export'</span>,</span><br><span class="line"><span class="string">'params'</span> =&gt; [<span class="string">'id'</span> =&gt; <span class="number">1</span>, <span class="string">'name'</span> =&gt; <span class="string">'zhimma'</span>],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CLI&quot;&gt;&lt;a href=&quot;#CLI&quot; class=&quot;headerlink&quot; title=&quot;CLI&quot;&gt;&lt;/a&gt;CLI&lt;/h3&gt;&lt;h4 id=&quot;执行&quot;&gt;&lt;a href=&quot;#执行&quot; class=&quot;headerlink&quot; title=&quot;执行&quot;&gt;&lt;/a&gt;执行&lt;/h4&gt;&lt;p
      
    
    </summary>
    
      <category term="PHP" scheme="https://blog.zhimma.com/categories/PHP/"/>
    
    
      <category term="Swoole" scheme="https://blog.zhimma.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7☞lnmp环境搭建</title>
    <link href="https://blog.zhimma.com/2018/11/30/CentOS7%E2%98%9Elnmp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.zhimma.com/2018/11/30/CentOS7☞lnmp环境搭建/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:09:25.418Z</updated>
    
    <content type="html"><![CDATA[<p>本文转自<a href="https://mos.meituan.com/library/18/how-to-install-lnmp-on-centos7/" target="_blank" rel="noopener">这里</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr><p>LNMP是Linux、Nginx、MySQL(MariaDB)和PHP的缩写，这个组合是最常见的WEB服务器的运行环境之一。</p><p>本文将带领大家在CentOS 7操作系统上搭建一套LNMP环境。</p><p>本教程适用于CentOS 7.x版本。<br><a id="more"></a></p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><hr><p><code>yum install nginx</code></p><blockquote><p>如果报没有可用的软件包nginx错误，解决方法这<a href="https://blog.bytesclub.com/2017/02/27/%E6%B2%A1%E6%9C%89%E5%8F%AF%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%8C%85nginx/" target="_blank" rel="noopener">这里</a></p></blockquote><p>按照提示，输入yes后开始安装。安装完毕后，Nginx的配置文件在/etc/nginx目录下。使用以下命令启动Nginx：<br><code>systemctl start nginx</code></p><p>检查系统中firewalld防火墙服务是否开启，如果已开启，我们需要修改防火墙配置，开启Nginx外网端口访问。<br><code>systemctl status firewalld</code></p><p>如果显示active (running)，则需要调整防火墙规则的配置。</p><p>修改/etc/firewalld/zones/public.xml文件，在zone一节中增加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;zone&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;service name=&quot;nginx&quot;/&gt;</span><br><span class="line">&lt;zone&gt;</span><br></pre></td></tr></table></figure></p><p>保存后重新加载firewalld服务：<code>systemctl reload firewalld</code></p><p>可以通过浏览器访问 http://&lt;外网IP地址&gt; 来确定Nginx是否已经启动。</p><p>最后将Nginx设置为开机启动：<code>systemctl enable nginx.service</code></p><blockquote><p>测试环境的话，为了方便也可以先禁用掉防火墙</p></blockquote><h2 id="安装MySQL-MariaDB"><a href="#安装MySQL-MariaDB" class="headerlink" title="安装MySQL(MariaDB)"></a>安装MySQL(MariaDB)</h2><p><a href="https://my.oschina.net/Laily/blog/713023" target="_blank" rel="noopener">https://my.oschina.net/Laily/blog/713023</a></p><hr><p>MariaDB是MySQL的一个分支，主要由开源社区进行维护和升级，而MySQL被Oracle收购以后，发展较慢。在CentOS 7的软件仓库中，将MySQL更替为了MariaDB。</p><p>我们可以使用yum直接安装MariaDB：<br><code>yum install mariadb-server</code></p><p>安装完成之后，执行以下命令重启MariaDB服务： <code>systemctl start mariadb</code></p><p>MariaDB默认root密码为空，我们需要设置一下，执行脚本：<code>/usr/bin/mysql_secure_installation</code></p><p>首先提示输入当前的root密码：<br><code>Enter current password for root (enter for none):</code></p><p>初始root密码为空，我们直接敲回车进行下一步<br><code>Set root password? [Y/n]</code></p><p>设置root密码，默认选项为Yes，我们直接回车，提示输入密码，在这里设置您的MariaDB的root账户密码<br><code>Remove anonymous users? [Y/n]</code></p><p>是否移除匿名用户，默认选项为Yes，建议按默认设置，回车继续<br><code>Disallow root login remotely? [Y/n]</code></p><p>是否禁止root用户远程登录？如果您只在本机内访问MariaDB，建议按默认设置，回车继续<br><code>Remove test database and access to it? [Y/n]</code></p><p>是否删除测试用的数据库和权限？ 建议按照默认设置，回车继续<br><code>Reload privilege tables now? [Y/n]</code></p><p>是否重新加载权限表？因为我们上面更新了root的密码，这里需要重新加载，回车。</p><p>完成后你会看到Success!的提示，MariaDB的安全设置已经完成。我们可以使用以下命令登录MariaDB：<code>mysql -uroot -p</code></p><p>按提示输入root密码，就会进入MariaDB的交互界面，说明已经安装成功。</p><p>最后我们将MariaDB设置为开机启动<code>systemctl enable mariadb</code></p><h2 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h2><hr><p><a href="https://www.yaosansi.com/post/install-php-yum-on-centos/" target="_blank" rel="noopener">https://www.yaosansi.com/post/install-php-yum-on-centos/</a><br>我们可以直接使用yum安装PHP：<code>yum install php-fpm php-mysql</code></p><p>安装完成后我们将php-fpm启动：<code>systemctl start php-fpm</code></p><p>将php-fpm设置为开机启动: <code>systemctl enable php-fpm</code></p><p>php安装完成之后，需要设置一下php session的目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /var/lib/php/session/</span><br><span class="line">sudo chown -R apache:apache /var/lib/php/session/</span><br></pre></td></tr></table></figure></p><p>这时php-fpm已经安装完毕，但是现在需要配置一下Nginx，在/etc/nginx/conf.d目录中新建一个名为php.conf的文件，其内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        root           /usr/share/php;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后执行以下命令使我们的配置生效：<code>systemctl reload nginx</code></p><p>以上我们配置了Nginx的8000端口用来测试，如果您在美团云控制台创建机器时选择了绑定防火墙，需要检查该防火墙是否允许80端口，如果不允许的话，可以在防火墙设置中新增防火墙，并关联到该主机。</p><p>我们在/usr/share/php目录下新建一个名为phpinfo.php的文件用来展示phpinfo信息，文件内容为：</p><p><code>&lt;?php echo phpinfo(); ?&gt;</code></p><p>我们从浏览器打开 http://&lt;外网IP地址&gt;:80/phpinfo.php，您就能看到phpinfo信息了，说明我们php环境已经部署成功;</p><h2 id="升级PHP版本"><a href="#升级PHP版本" class="headerlink" title="升级PHP版本"></a>升级PHP版本</h2><hr><p>yum 默认安装的版本是5.4，现在升级PHP版本至5.6</p><p>执行下面命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm</span><br><span class="line"></span><br><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br></pre></td></tr></table></figure></p><p>执行下面的命令删除php<br><code>yum remove php-common</code><br>然后像安装那样问你是否继续的，输入yes即可</p><p>安装php5.6</p><p><code>yum install -y php56w php56w-opcache php56w-xml php56w-fpm php56w-mcrypt php56w-gd php56w-devel php56w-mysql php56w-intl php56w-mbstring</code></p><p>查看php版本<code>php-fpm --version</code></p><p>重启服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br><span class="line">systemctl restart mariadb</span><br><span class="line">systemctl restart php-fpm</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转自&lt;a href=&quot;https://mos.meituan.com/library/18/how-to-install-lnmp-on-centos7/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;LNMP是Linux、Nginx、MySQL(MariaDB)和PHP的缩写，这个组合是最常见的WEB服务器的运行环境之一。&lt;/p&gt;
&lt;p&gt;本文将带领大家在CentOS 7操作系统上搭建一套LNMP环境。&lt;/p&gt;
&lt;p&gt;本教程适用于CentOS 7.x版本。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.zhimma.com/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="https://blog.zhimma.com/tags/CentOS/"/>
    
      <category term="LNMP" scheme="https://blog.zhimma.com/tags/LNMP/"/>
    
  </entry>
  
  <entry>
    <title>CentOS中PHP7的安装</title>
    <link href="https://blog.zhimma.com/2018/11/30/CentOS%E4%B8%ADPHP7%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>https://blog.zhimma.com/2018/11/30/CentOS中PHP7的安装/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:10:06.454Z</updated>
    
    <content type="html"><![CDATA[<p>本文安装参考<a href="https://webtatic.com/packages/php70/" target="_blank" rel="noopener">这里</a>，并且全程墙外网;</p><hr><h2 id="查看Linux版本"><a href="#查看Linux版本" class="headerlink" title="查看Linux版本"></a>查看Linux版本</h2><pre><code>cat /etc/centos-releaseCentOS Linux release 7.3.1611 (Core)</code></pre><a id="more"></a><h2 id="删除之前的-PHP-版本"><a href="#删除之前的-PHP-版本" class="headerlink" title="删除之前的 PHP 版本"></a>删除之前的 PHP 版本</h2><pre><code>yum remove php* php-common //如果存在其他版本删除原来的版本  </code></pre><h2 id="rpm-安装-Php7-相应的-yum源"><a href="#rpm-安装-Php7-相应的-yum源" class="headerlink" title="rpm 安装 Php7 相应的 yum源"></a>rpm 安装 Php7 相应的 yum源</h2><pre><code>rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmrpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</code></pre><h2 id="yum安装PHP7"><a href="#yum安装PHP7" class="headerlink" title="yum安装PHP7"></a>yum安装PHP7</h2><pre><code>yum install php70w-fpm php70w-opcache</code></pre><h2 id="查看PHP版本"><a href="#查看PHP版本" class="headerlink" title="查看PHP版本"></a>查看PHP版本</h2><pre><code>php -v / php-fpm -v</code></pre><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><table><thead><tr><th style="text-align:center">Package</th><th style="text-align:center">Provides</th></tr></thead><tbody><tr><td style="text-align:center">Package</td><td style="text-align:center">Provides</td></tr><tr><td style="text-align:center">php70w</td><td style="text-align:center">mod_php, php70w-zts</td></tr><tr><td style="text-align:center">php70w-bcmath</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-cli</td><td style="text-align:center">php-cgi, php-pcntl, php-readline</td></tr><tr><td style="text-align:center">php70w-common</td><td style="text-align:center">php-api, php-bz2, php-calendar, php-ctype, php-curl, php-date, php-exif, php-fileinfo,php-filter,php-ftp,php-gettext,php-gmp, php-hash, php-iconv, php-json, php-libxml, php-openssl,php-pcre,php-spl,php-tokenizer, php-zend-abi, php-zip, php-zlib</td></tr><tr><td style="text-align:center">php70w-dba</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-devel</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-embedded</td><td style="text-align:center">php-embedded-devel</td></tr><tr><td style="text-align:center">php70w-enchant</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-fpm</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-gd</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-imap</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-interbase</td><td style="text-align:center">php_database, php-firebird</td></tr><tr><td style="text-align:center">php70w-intl</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-ldap</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-mbstring</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-mcrypt</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-mysql</td><td style="text-align:center">php-mysqli, php_database</td></tr><tr><td style="text-align:center">php70w-mysqlnd</td><td style="text-align:center">php-mysqli, php_database</td></tr><tr><td style="text-align:center">php70w-odbc</td><td style="text-align:center">php-pdo_odbc, php_database</td></tr><tr><td style="text-align:center">php70w-opcache</td><td style="text-align:center">php70w-pecl-zendopcache</td></tr><tr><td style="text-align:center">php70w-pdo</td><td style="text-align:center">php70w-pdo_sqlite, php70w-sqlite3</td></tr><tr><td style="text-align:center">php70w-pdo_dblib</td><td style="text-align:center">php70w-mssql</td></tr><tr><td style="text-align:center">php70w-pear</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-pecl-apcu</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-pecl-imagick</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-pecl-redis</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-pecl-xdebug</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-pgsql</td><td style="text-align:center">php-pdo_pgsql, php_database</td></tr><tr><td style="text-align:center">php70w-phpdbg</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-process</td><td style="text-align:center">php-posix, php-sysvmsg, php-sysvsem, php-sysvshm</td></tr><tr><td style="text-align:center">php70w-pspell</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-recode</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-snmp</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-soap</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-tidy</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">php70w-xml</td><td style="text-align:center">php-dom, php-domxml, php-wddx, php-xsl</td></tr><tr><td style="text-align:center">php70w-xmlrpc</td><td style="text-align:center"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文安装参考&lt;a href=&quot;https://webtatic.com/packages/php70/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;，并且全程墙外网;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;查看Linux版本&quot;&gt;&lt;a href=&quot;#查看Linux版本&quot; class=&quot;headerlink&quot; title=&quot;查看Linux版本&quot;&gt;&lt;/a&gt;查看Linux版本&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;cat /etc/centos-release
CentOS Linux release 7.3.1611 (Core)
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.zhimma.com/categories/Linux/"/>
    
    
      <category term="PHP" scheme="https://blog.zhimma.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Centos7中，PHP7下，扩展的安装</title>
    <link href="https://blog.zhimma.com/2018/11/30/Centos7%E4%B8%AD%EF%BC%8CPHP7%E4%B8%8B%EF%BC%8C%E6%89%A9%E5%B1%95%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>https://blog.zhimma.com/2018/11/30/Centos7中，PHP7下，扩展的安装/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:09:58.379Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CentOS 下，PHP有多种方式来安装拓展， 主要有 包管理式的 yum 安装、pecl 安装， 以及源码编译安装。<br>包管理式的安装卸载尤为方便，而源码编译式的安装则方便参数调优。<br>一般搭建本机开发环境推荐包管理式的安装，节约时间。而线上部署环境则推荐编译安装， 方便调优。 </p></blockquote><h2 id="环境和准备"><a href="#环境和准备" class="headerlink" title="环境和准备"></a>环境和准备</h2><hr><ul><li>环境 ： windows10</li><li>PHP版本：7.0.13</li><li>Nginx: 1.10.3</li><li>Centos: docker 创建的CentOS容器[CentOS Linux release 7.3.1611 (Core) ]</li><li>全程墙外网<h2 id="方式1：-yum-安装扩展（mongodb）"><a href="#方式1：-yum-安装扩展（mongodb）" class="headerlink" title="方式1： yum 安装扩展（mongodb）"></a>方式1： yum 安装扩展（mongodb）</h2></li></ul><hr><a id="more"></a><p>yum方式安装能自动安装扩展的.so动态库，并配置好php.ini</p><p><code>yum search mongodb|grep php  //搜索到拓展名为 php70w-pecl-mongodb</code></p><p>等待自动安装完成后，查看phpinfo</p><p><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP7/QQ%E6%88%AA%E5%9B%BE20170408234049.png" alt="mongodb"></p><p>到此 yum 安装扩展方法介绍完毕</p><h2 id="pecl-安装（redis）"><a href="#pecl-安装（redis）" class="headerlink" title="pecl 安装（redis）"></a>pecl 安装（redis）</h2><hr><p>pecl 安装需要准备2个文件：phpize ，php-config</p><h3 id="查找phpize的位置"><a href="#查找phpize的位置" class="headerlink" title="查找phpize的位置"></a><strong>查找phpize的位置</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@9e2c60482bdc conf.d]# whereis phpize</span><br><span class="line">phpize: /usr/bin/phpize</span><br></pre></td></tr></table></figure><h3 id="查找php-config的位置"><a href="#查找php-config的位置" class="headerlink" title="查找php-config的位置"></a><strong>查找php-config的位置</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@9e2c60482bdc conf.d]# whereis php-config</span><br><span class="line">php-config:[root@9e2c60482bdc conf.d]#</span><br></pre></td></tr></table></figure><p>发现没有php-config，先测试运行下phpize  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php-config:[root@9e2c60482bdc conf.d]# phpize</span><br><span class="line">Can t find PHP headers in /usr/include/php</span><br><span class="line">The php-devel package is required for use of this command.</span><br></pre></td></tr></table></figure><p>直接报错，接下来安装php-devel解决上面报错<code>yum install php70w-devel</code> </p><p>再次运行phpize,没有报找不到的错误，出现了下面的报错：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@9e2c60482bdc bin]# phpize</span><br><span class="line">Cannot find config.m4. </span><br><span class="line">Make sure that you run /usr/bin/phpize in the top level source directory of the module</span><br></pre></td></tr></table></figure><p>先不管他，进行下一步的操作</p><h3 id="更新-pear（非必须）"><a href="#更新-pear（非必须）" class="headerlink" title="更新 pear（非必须）"></a><strong>更新 pear（非必须）</strong></h3><p>我们需要先从pear官网下载 go-pear 工具,这个工具将帮我们同时安装 pecl包管理器(管理php的C拓展) pear包管理器(管理php类库)；</p><p><code>wget http://pear.php.net/go-pear.phar</code></p><p>下载完成后安装工具，运行下面命令：<code>php go-pear.phar</code>，<img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP7/gopear.png" alt="go-pear"></p><p>然后默认回车即可，暂时没搞懂这些参数的意思，估计是配置路经相关吧，先回车再说；</p><p><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP7/gopear.png" alt="go-pear"></p><h3 id="安装扩展（1）"><a href="#安装扩展（1）" class="headerlink" title="安装扩展（1）"></a><strong>安装扩展（1）</strong></h3><p>搜索扩展包：<code>pecl search redis</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@9e2c60482bdc test]# pecl search redis</span><br><span class="line"></span><br><span class="line">Warning: Invalid argument supplied for foreach() in Command.php on line 249</span><br><span class="line"></span><br><span class="line">Warning: Invalid argument supplied for foreach() in /usr/share/pear/PEAR/Command.php on line 249</span><br><span class="line"></span><br><span class="line">Warning: Invalid argument supplied for foreach() in Command.php on line 249</span><br><span class="line"></span><br><span class="line">Warning: Invalid argument supplied for foreach() in /usr/share/pear/PEAR/Command.php on line 249</span><br><span class="line"></span><br><span class="line">Warning: Invalid argument supplied for foreach() in Command.php on line 249</span><br><span class="line"></span><br><span class="line">Warning: Invalid argument supplied for foreach() in /usr/share/pear/PEAR/Command.php on line 249</span><br><span class="line"></span><br><span class="line">Warning: Invalid argument supplied for foreach() in Command.php on line 249</span><br><span class="line"></span><br><span class="line">Warning: Invalid argument supplied for foreach() in /usr/share/pear/PEAR/Command.php on line 249</span><br><span class="line"></span><br><span class="line">Warning: Invalid argument supplied for foreach() in Command.php on line 249</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">Warning: Invalid argument supplied for foreach() in PEAR/Command.php on line 249</span><br><span class="line"></span><br><span class="line">Warning: Invalid argument supplied for foreach() in /usr/share/pear/PEAR/Command.php on line 249</span><br><span class="line">XML Extension not found</span><br></pre></td></tr></table></figure><p>刷刷的报错了，查询错误后贴出解决方法：</p><p><a href="http://serverfault.com/questions/589877/pecl-command-produces-long-list-of-errors" target="_blank" rel="noopener">解决方法</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/bin/pecl  //文件最后一行去掉 -n 参数</span><br></pre></td></tr></table></figure><p>再次搜索，  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@9e2c60482bdc test]# pecl search redis</span><br><span class="line">Retrieving data...0%</span><br><span class="line">Matched packages, channel pecl.php.net:</span><br><span class="line">=======================================</span><br><span class="line">Package Stable/(Latest) Local</span><br><span class="line">redis   3.1.2 (stable)        PHP extension for interfacing with Redis</span><br></pre></td></tr></table></figure><p>安装扩展包<code>pecl install mongodb</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@9e2c60482bdc test]# pecl install redis</span><br><span class="line">downloading redis-3.1.2.tgz ...</span><br><span class="line">Starting to download redis-3.1.2.tgz (199,041 bytes)</span><br><span class="line">.................done: 199,041 bytes</span><br><span class="line">20 source files, building</span><br><span class="line">running: phpize</span><br><span class="line">Configuring for:</span><br><span class="line">PHP Api Version:         20151012</span><br><span class="line">Zend Module Api No:      20151012</span><br><span class="line">Zend Extension Api No:   320151012</span><br><span class="line">building in /tmp/pear/install/pear-build-rootLPns3m/redis-3.1.2</span><br><span class="line">running: /tmp/pear/install/redis/configure --with-php-config=/usr/bin/php-config</span><br><span class="line">checking for grep that handles long lines and -e... /usr/bin/grep</span><br><span class="line">checking for egrep... /usr/bin/grep -E</span><br><span class="line">checking for a sed that does not truncate output... /usr/bin/sed</span><br><span class="line">checking for cc... no</span><br><span class="line">checking for gcc... no</span><br><span class="line">configure: error: in /tmp/pear/install/pear-build-rootLPns3m/redis-3.1.2:</span><br><span class="line">configure: error: no acceptable C compiler found in $PATH</span><br><span class="line">See &apos;config.log&apos; for more details</span><br><span class="line">ERROR: &apos;/tmp/pear/install/redis/configure --with-php-config=/usr/bin/php-config&apos; failed</span><br></pre></td></tr></table></figure><p>刷刷的报错了，查询错误后贴出解决方法:<code>yun install gcc gcc+</code></p><h3 id="安装扩展（2）"><a href="#安装扩展（2）" class="headerlink" title="安装扩展（2）"></a><strong>安装扩展（2）</strong></h3><p>执行：<code>pecl install monodb</code> </p><p>等待自动安装完成后，显示如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Build process completed successfully</span><br><span class="line">Installing &apos;/usr/lib64/php/modules/redis.so&apos;</span><br><span class="line">install ok: channel://pecl.php.net/redis-3.1.2</span><br><span class="line">configuration option &quot;php_ini&quot; is not set to php.ini location</span><br><span class="line">You should add &quot;extension=redis.so&quot; to php.ini</span><br></pre></td></tr></table></figure><p>然后在php配置文件中稍作修改，将extension=redis.so添加到php.ini中,重启PHP,查看phpinfo</p><p><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP7/redis.png" alt="redis"></p><p>到此 pecl 安装扩展方法介绍完毕</p><h2 id="源码编译安装（Seaslog）"><a href="#源码编译安装（Seaslog）" class="headerlink" title="源码编译安装（Seaslog）"></a>源码编译安装（Seaslog）</h2><hr><p><a href="https://github.com/Neeke/SeasLog/blob/master/README_zh.md" target="_blank" rel="noopener">Seaslog文档</a></p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a><strong>安装git</strong></h3><p>先安装<a href="https://blog.bytesclub.com/2017/02/06/%E5%B8%B8%E7%94%A8%E7%9A%84git/" target="_blank" rel="noopener">git</a>，克隆Seaslog源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@9e2c60482bdc test]# git clone https://github.com/Neeke/SeasLog.git</span><br><span class="line">Cloning into &apos;SeasLog&apos;...</span><br><span class="line">remote: Counting objects: 1094, done.</span><br><span class="line">remote: Total 1094 (delta 0), reused 0 (delta 0), pack-reused 1094</span><br><span class="line">Receiving objects: 100% (1094/1094), 1.04 MiB | 24.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (628/628), done.</span><br></pre></td></tr></table></figure><h3 id="安装Seaslog"><a href="#安装Seaslog" class="headerlink" title="安装Seaslog"></a><strong>安装Seaslog</strong></h3><p>进入Seaslog目录，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ /path/to/phpize  //更换自己对应的目录</span><br><span class="line">$ ./configure --with-php-config=/path/to/php-config</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>完成之后，修改php配置文件，将extension = seaslog.so添加到php.ini中,重启PHP,查看phpinfo<br><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP7/seaslog.png" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此Linux中,给PHP安装扩展的3种方式记录完毕,特此总结</p><ol><li><a href="https://my.oschina.net/u/2400083/blog/518195" target="_blank" rel="noopener">参考1</a></li><li><a href="https://segmentfault.com/a/1190000008993194" target="_blank" rel="noopener">参考2</a></li><li><a href="https://segmentfault.com/a/1190000008993194" target="_blank" rel="noopener">peal官网</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CentOS 下，PHP有多种方式来安装拓展， 主要有 包管理式的 yum 安装、pecl 安装， 以及源码编译安装。&lt;br&gt;包管理式的安装卸载尤为方便，而源码编译式的安装则方便参数调优。&lt;br&gt;一般搭建本机开发环境推荐包管理式的安装，节约时间。而线上部署环境则推荐编译安装， 方便调优。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;环境和准备&quot;&gt;&lt;a href=&quot;#环境和准备&quot; class=&quot;headerlink&quot; title=&quot;环境和准备&quot;&gt;&lt;/a&gt;环境和准备&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;环境 ： windows10&lt;/li&gt;
&lt;li&gt;PHP版本：7.0.13&lt;/li&gt;
&lt;li&gt;Nginx: 1.10.3&lt;/li&gt;
&lt;li&gt;Centos: docker 创建的CentOS容器[CentOS Linux release 7.3.1611 (Core) ]&lt;/li&gt;
&lt;li&gt;全程墙外网&lt;h2 id=&quot;方式1：-yum-安装扩展（mongodb）&quot;&gt;&lt;a href=&quot;#方式1：-yum-安装扩展（mongodb）&quot; class=&quot;headerlink&quot; title=&quot;方式1： yum 安装扩展（mongodb）&quot;&gt;&lt;/a&gt;方式1： yum 安装扩展（mongodb）&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.zhimma.com/categories/Linux/"/>
    
    
      <category term="PHP" scheme="https://blog.zhimma.com/tags/PHP/"/>
    
      <category term="CentOS" scheme="https://blog.zhimma.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Git生成多个ssh key</title>
    <link href="https://blog.zhimma.com/2018/11/30/Git%E7%94%9F%E6%88%90%E5%A4%9A%E4%B8%AAssh-key/"/>
    <id>https://blog.zhimma.com/2018/11/30/Git生成多个ssh-key/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:11:10.419Z</updated>
    
    <content type="html"><![CDATA[<p>当使用了多个不同的git版本控制系统，分别有不同账号时，如一个在github上面有项目，一个在coding或者开源中国上面的有项目时，如果2者的邮箱不同时，就会涉及一个问题，生成的ssh key 会相互覆盖，必然有一个无法使用；</p><p>下面记录下解决方法：<br><a id="more"></a></p><h2 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh-key"></a>生成ssh-key</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//创建github的ssh key</span><br><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot; -f /c/user/username/.ssh/github_rsa</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">example：</span><br><span class="line">//我的秘钥保存路径C:\Users\MMA\.ssh\test,邮箱使用your_email@example.com</span><br><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot; -f /c/Users/MMA/.ssh/test/github_rsa </span><br><span class="line">//运行之后弹出</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; -f /c/User/MMA/.ssh/test/test/github_rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line"></span><br><span class="line">回车默认即可，出现下面提示，则创建成功</span><br><span class="line"></span><br><span class="line">Your identification has been saved in /c/Users/MMA/.ssh/test/github_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/MMA/.ssh/test/github_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:AjEAqCT5VeTZsdHpklyMIVQQWbBVtAufE/P/GzkEw9I your_email@example.com</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|oo..o+OBBBo.     |</span><br><span class="line">|+.  .+.*.+=.o    |</span><br><span class="line">|+. .. +.+++. E   |</span><br><span class="line">|. .  .  +o.*. o  |</span><br><span class="line">|      . S.= .  . |</span><br><span class="line">|       .   . .. .|</span><br><span class="line">|              .+ |</span><br><span class="line">|               .o|</span><br><span class="line">|               .o|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>查看本地目录，GitHub ssh key生成成功<br><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/git/github.png" alt="github"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//创建coding的ssh key</span><br><span class="line">ssh-keygen -t rsa -C &quot;my_email@example.com&quot; -f /c/Users/MMA/.ssh/test/coding_rsa</span><br><span class="line"></span><br><span class="line">和创建github的相似</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;my_email@example.com&quot; -f /c/Users/MMA/.ssh/test/coding_rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /c/Users/MMA/.ssh/test/coding_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/MMA/.ssh/test/coding_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:aqcMT/i9ZgXB6aCHus1zdf5JQlrLBYfUnnIBNJ37WIQ my_email@example.com</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|       . o=+ o   |</span><br><span class="line">|      . +. oE .  |</span><br><span class="line">|     o o .o..=   |</span><br><span class="line">|    o . o .o= .  |</span><br><span class="line">|   . .  S.oo.+   |</span><br><span class="line">|  .  . ..=oo. .  |</span><br><span class="line">|   +o +.o++ .    |</span><br><span class="line">|  . +B.+o .o .   |</span><br><span class="line">|     o=oo. .o    |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/git/all.png" alt="github+coding"></p><h2 id="添加私钥到SSH-agent中"><a href="#添加私钥到SSH-agent中" class="headerlink" title="添加私钥到SSH agent中"></a>添加私钥到SSH agent中</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add /c/Users/MMA/.ssh/test/coding_rsa</span><br><span class="line">ssh-add/c/Users/MMA/.ssh/test/github_rsa</span><br></pre></td></tr></table></figure><p>如果执行ssh-add时提示<code>&quot;Could not open a connection to your authentication agent&quot;</code>，可以现执行命令：<code>ssh-agent bash</code></p><p>重新添加即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MMA@MMA-PC MINGW64 ~/Desktop</span><br><span class="line">$ ssh-add /c/Users/MMA/.ssh/test/github_rsa</span><br><span class="line">Identity added: /c/Users/MMA/.ssh/test/github_rsa (/c/Users/MMA/.ssh/test/github_rsa)</span><br><span class="line"></span><br><span class="line">MMA@MMA-PC MINGW64 ~/Desktop</span><br><span class="line">$ ssh-add /c/Users/MMA/.ssh/test/coding_rsa</span><br><span class="line">Identity added: /c/Users/MMA/.ssh/test/coding_rsa (/c/Users/MMA/.ssh/test/coding_rsa)</span><br><span class="line"></span><br><span class="line">MMA@MMA-PC MINGW64 ~/Desktop</span><br><span class="line">$ ssh-add -l</span><br><span class="line">2048 SHA256:aqcMT/i9ZgXB6aCHus1zdf5JQlrLBYfUnnIBNJ37WIQ /c/Users/MMA/.ssh/test/coding_rsa (RSA)</span><br><span class="line">2048 SHA256:AjEAqCT5VeTZsdHpklyMIVQQWbBVtAufE/P/GzkEw9I /c/Users/MMA/.ssh/test/github_rsa (RSA)</span><br></pre></td></tr></table></figure><blockquote><p> // 可以通过 ssh-add -l 来确私钥列表</p><p> ssh-add -l</p><p> // 可以通过 ssh-add -D 来清空私钥列表</p><p> ssh-add -D</p></blockquote><h2 id="修改config文件"><a href="#修改config文件" class="headerlink" title="修改config文件"></a>修改config文件</h2><hr><p>在/c/Users/MMA/.ssh/test 目录下新建一个config文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># coding</span><br><span class="line">Host git.coding.net</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile /c/Users/MMA/.ssh/test/coding_rsa</span><br><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile /c/Users/MMA/.ssh/test/github_rsa</span><br></pre></td></tr></table></figure><h2 id="添加公钥到git平台"><a href="#添加公钥到git平台" class="headerlink" title="添加公钥到git平台"></a>添加公钥到git平台</h2><hr><p>[coding教程]<a href="https://coding.net/help/doc/git/ssh-key.html" target="_blank" rel="noopener">https://coding.net/help/doc/git/ssh-key.html</a>)</p><p>[github教程]<a href="https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account" target="_blank" rel="noopener">https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account</a>)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当使用了多个不同的git版本控制系统，分别有不同账号时，如一个在github上面有项目，一个在coding或者开源中国上面的有项目时，如果2者的邮箱不同时，就会涉及一个问题，生成的ssh key 会相互覆盖，必然有一个无法使用；&lt;/p&gt;
&lt;p&gt;下面记录下解决方法：&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="https://blog.zhimma.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://blog.zhimma.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Laravel开发前期准备</title>
    <link href="https://blog.zhimma.com/2018/11/30/Laravel%E5%BC%80%E5%8F%91-%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>https://blog.zhimma.com/2018/11/30/Laravel开发-工具类/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:12:16.127Z</updated>
    
    <content type="html"><![CDATA[<p>环境 ： windows10</p><p>本地开发环境 ：<a href="https://github.com/salamander-mh/SalamanderWnmp" target="_blank" rel="noopener">SalamanderWnmp</a></p><p>Phpstrom版本：Phpstrom 2017.1 </p><p>Laravel版本：Laravel5.4</p><a id="more"></a><h1 id="编辑器插件"><a href="#编辑器插件" class="headerlink" title="编辑器插件"></a>编辑器插件</h1><h2 id="Laravel-Plugin"><a href="#Laravel-Plugin" class="headerlink" title="Laravel Plugin"></a>Laravel Plugin</h2><hr><p>ctrl+alt+s打开PHPStrom设置页面，按如下操作</p><p><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/laravel/laravel_plugin.png" alt="image"></p><p>安装完成后，启用插件，如下图所示</p><p><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/laravel/laravel_enable_plugins.png" alt="image"></p><p>然后再去写代码的时候就会提供controllers,views, routes, configuration, translations等的代码提示功能。</p><h2 id="Laravel-IDE-Helper"><a href="#Laravel-IDE-Helper" class="headerlink" title="Laravel IDE Helper"></a>Laravel IDE Helper</h2><hr><p>有时候你会发现Route::之类的没有代码提示或者自动补全，这时候我们需要安装 Laravel IDE Helper</p><p>项目地址<a href="https://github.com/barryvdh/laravel-ide-helper" target="_blank" rel="noopener">：GitHub</a></p><p>使用composer命令安装:<figure class="highlight plain"><figcaption><span>require barryvdh/laravel-ide-helper```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">安装之后你需要把Laravel IDE Helper以服务的形式注册到应用中。</span><br><span class="line"></span><br><span class="line">修改**app/config/app.php**,添加```Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class```, 到**providers**元素下。</span><br><span class="line"></span><br><span class="line">执行下面的命令</span><br></pre></td></tr></table></figure></p><pre><code>php artisan clear-compiledphp artisan ide-helper:generatephp artisan optimize</code></pre><p><code>`</code></p><p>[参考资料]：<br><a href="https://confluence.jetbrains.com/display/PhpStorm/Laravel+Development+using+PhpStorm" target="_blank" rel="noopener">https://confluence.jetbrains.com/display/PhpStorm/Laravel+Development+using+PhpStorm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境 ： windows10&lt;/p&gt;
&lt;p&gt;本地开发环境 ：&lt;a href=&quot;https://github.com/salamander-mh/SalamanderWnmp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SalamanderWnmp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Phpstrom版本：Phpstrom 2017.1 &lt;/p&gt;
&lt;p&gt;Laravel版本：Laravel5.4&lt;/p&gt;
    
    </summary>
    
      <category term="Laravel" scheme="https://blog.zhimma.com/categories/Laravel/"/>
    
    
      <category term="Laravel" scheme="https://blog.zhimma.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Mac环境ELK搭建</title>
    <link href="https://blog.zhimma.com/2018/11/30/Mac%E7%8E%AF%E5%A2%83ELK%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.zhimma.com/2018/11/30/Mac环境ELK搭建/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:13:11.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>略。。。</p><p><del>这里我使用<code>brew install java</code>命令安装</del></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  java -version</span><br><span class="line">java version &quot;11&quot; 2018-09-25</span><br><span class="line">Java(TM) SE Runtime Environment 18.9 (build 11+28)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11+28, mixed mode)</span><br></pre></td></tr></table></figure><p>不要使用上述方式安装，有坑</p><p>下载这个文件安装java:<a href="https://edelivery.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-macosx-x64.dmg" target="_blank" rel="noopener">https://edelivery.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-macosx-x64.dmg</a></p><h2 id="Elasticsearch安装配置"><a href="#Elasticsearch安装配置" class="headerlink" title="Elasticsearch安装配置"></a>Elasticsearch安装配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官网下载对应平台的安装包</p><p><img src="/Users/zhimma/Pictures/ELK/downloadE.png" alt="下载Elasticsearch"></p><p>放到合适的位置，我放置后解压的目录是<code>/Users/zhimma/Soft/elasticsearch-6.4.1</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置-Elasticsearch"><a href="#配置-Elasticsearch" class="headerlink" title="配置 Elasticsearch"></a>配置 Elasticsearch</h4><p>下面是我的配置文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">☁  config  pwd</span><br><span class="line">/Users/zhimma/Soft/elasticsearch-6.4.1/config</span><br><span class="line">☁  config  grep &apos;^[a-z]&apos; elasticsearch.yml</span><br><span class="line">cluster.name: elk-stack</span><br><span class="line">path.data: /Users/zhimma/Data/elk_stack/data</span><br><span class="line">path.logs: /Users/zhimma/Data/elk_stack/logs</span><br><span class="line">bootstrap.memory_lock: false</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br></pre></td></tr></table></figure><h4 id="配置-Elasticsearch-内存占用"><a href="#配置-Elasticsearch-内存占用" class="headerlink" title="配置 Elasticsearch 内存占用"></a>配置 Elasticsearch 内存占用</h4><p>配置 jvm 最大堆和最小堆，一般为服务器物理内存的一半，最大不超过 32g</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">☁  config  pwd</span><br><span class="line">/Users/zhimma/Soft/elasticsearch-6.4.1/config</span><br><span class="line">☁  config  vi jvm.options </span><br><span class="line"></span><br><span class="line">-Xms8g</span><br><span class="line">-Xmx8g</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>进入<code>bin</code>目录启动<code>Elasticsearch</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">☁  bin  pwd</span><br><span class="line">/Users/zhimma/Soft/elasticsearch-6.4.1/bin</span><br><span class="line">☁  bin  ./elasticsearch</span><br></pre></td></tr></table></figure><h2 id="kibana安装配置"><a href="#kibana安装配置" class="headerlink" title="kibana安装配置"></a>kibana安装配置</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>官网下载对应平台的安装包</p><p><img src="/Users/zhimma/Pictures/ELK/downloadK.png" alt="下载Kibana"></p><p>放到合适的位置，我放置后解压的目录是<code>/Users/zhimma/Soft/kibana-6.4.1-darwin-x86_64</code></p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>凭感觉配置了一些，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">☁  config  grep &apos;^[a-z]&apos; kibana.yml</span><br><span class="line">server.port: 5601</span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br><span class="line">elasticsearch.url: &quot;http://0.0.0.0:9200&quot;</span><br><span class="line">kibana.index: &quot;.kibana&quot;</span><br></pre></td></tr></table></figure><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><p>进入<code>bin</code>目录启动<code>Kibana</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">☁  bin  pwd</span><br><span class="line">/Users/zhimma/Soft/kibana-6.4.1-darwin-x86_64/bin</span><br><span class="line">☁  bin  ./kibana</span><br></pre></td></tr></table></figure><h2 id="Logstash安装配置"><a href="#Logstash安装配置" class="headerlink" title="Logstash安装配置"></a>Logstash安装配置</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>官网下载对应平台的安装包</p><p><img src="/Users/zhimma/Pictures/ELK/downloadL.png" alt="下载Logstash"></p><p>放到合适的位置，我放置后解压的目录是<code>/Users/zhimma/Soft/logstash-6.4.1</code></p><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><h4 id="配置-Logstash"><a href="#配置-Logstash" class="headerlink" title="配置 Logstash"></a>配置 Logstash</h4><p>不是很了解，暂时使用默认配置</p><h4 id="配置-Logstash-内存占用"><a href="#配置-Logstash-内存占用" class="headerlink" title="配置 Logstash 内存占用"></a>配置 Logstash 内存占用</h4><p>配置 jvm 最大堆和最小堆，一般为服务器物理内存的一半，最大不超过 32g</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">☁  config  pwd</span><br><span class="line">/Users/zhimma/Soft/logstash-6.4.1/config</span><br><span class="line">☁  config  vi jvm.options </span><br><span class="line"></span><br><span class="line">-Xms8g</span><br><span class="line">-Xmx8g</span><br></pre></td></tr></table></figure><h3 id="添加项目或自定义配置文件"><a href="#添加项目或自定义配置文件" class="headerlink" title="添加项目或自定义配置文件"></a>添加项目或自定义配置文件</h3><p><code>Logstash</code>收集日志时候，可以对日志进行一定的操作和过滤，这里需要自定义不同的配置文件来实现，针对我们目前的项目，我简单的创建了下面的配置文件</p><p>在<code>/Users/zhimma/Soft/logstash-6.4.1/config</code>目录下创建<code>conf.d</code>文件夹，这个文件夹下存放我们所有的自定义配置文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [ &quot;/data/www/XX_project/trunk/Common/Runtime/Apps/Api/*.log&quot; ]</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    ignore_older =&gt; 0</span><br><span class="line">    sincedb_path =&gt; &quot;/dev/null&quot;</span><br><span class="line">    type =&gt; &quot;Api&quot;</span><br><span class="line">    codec =&gt; multiline &#123;</span><br><span class="line">      pattern =&gt; &quot;^\[&quot;</span><br><span class="line">      negate =&gt; true</span><br><span class="line">      what =&gt; &quot;previous&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [ &quot;/data/www/XX_project/trunk/Common/Runtime/Apps/SDK/*.log&quot; ]</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    ignore_older =&gt; 0</span><br><span class="line">    sincedb_path =&gt; &quot;/dev/null&quot;</span><br><span class="line">    type =&gt; &quot;SDK&quot;</span><br><span class="line">    codec =&gt; multiline &#123;</span><br><span class="line">      pattern =&gt; &quot;^\[&quot;</span><br><span class="line">      negate =&gt; true</span><br><span class="line">      what =&gt; &quot;previous&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123; </span><br><span class="line">  if [type] == &quot;Api&quot; &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [ &quot;127.0.0.1:9200&quot; ] </span><br><span class="line">      index =&gt; &quot;api&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  if [type] == &quot;SDK&quot; &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [ &quot;127.0.0.1:9200&quot; ] </span><br><span class="line">      index =&gt; &quot;sdk&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h3><p>进入<code>bin</code>目录启动Llogstash`</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">☁  bin  pwd</span><br><span class="line">/Users/zhimma/Soft/logstash-6.4.1/bin</span><br><span class="line">☁  bin  ./logstash -f /Users/zhimma/Soft/logstash-6.4.1/config/conf.d/default.conf</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="## 访问"></a>## 访问</h2><p>浏览器访问0.0.0.0:5601即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装Java&quot;&gt;&lt;a href=&quot;#安装Java&quot; class=&quot;headerlink&quot; title=&quot;安装Java&quot;&gt;&lt;/a&gt;安装Java&lt;/h2&gt;&lt;p&gt;略。。。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;这里我使用&lt;code&gt;brew install java&lt;/code&gt;命令
      
    
    </summary>
    
      <category term="Mac" scheme="https://blog.zhimma.com/categories/Mac/"/>
    
      <category term="ELK" scheme="https://blog.zhimma.com/categories/Mac/ELK/"/>
    
    
      <category term="ELK" scheme="https://blog.zhimma.com/tags/ELK/"/>
    
      <category term="Mac" scheme="https://blog.zhimma.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac重启php-fpm失败</title>
    <link href="https://blog.zhimma.com/2018/11/30/Mac%E9%87%8D%E5%90%AFphp-fpm%E5%A4%B1%E8%B4%A5/"/>
    <id>https://blog.zhimma.com/2018/11/30/Mac重启php-fpm失败/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:13:31.258Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mac重启php-fpm失败"><a href="#Mac重启php-fpm失败" class="headerlink" title="Mac重启php-fpm失败"></a><a href="https://www.jianshu.com/p/c9306c69e8b4" target="_blank" rel="noopener">Mac重启php-fpm失败</a></h3><p>关闭</p><p><code>killall -HUP php-fpm</code></p><p>重启，这里报错，提示找不到文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  php-fpm</span><br><span class="line">[27-May-2018 11:27:47] ERROR: failed to open configuration file &apos;/private/etc/php-fpm.conf&apos;: No such file or directory (2)</span><br><span class="line">[27-May-2018 11:27:47] ERROR: failed to load configuration file &apos;/private/etc/php-fpm.conf&apos;</span><br><span class="line">[27-May-2018 11:27:47] ERROR: FPM initialization failed</span><br></pre></td></tr></table></figure><p>检查了下本机的php-fpm.conf放在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/etc/php/7.1/php-fpm.conf</span><br></pre></td></tr></table></figure><p>于是修改配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php-fpm --fpm-config /usr/local/etc/php/7.1/php-fpm.conf</span><br></pre></td></tr></table></figure><p>继续报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  php-fpm --fpm-config /usr/local/etc/php/7.1/php-fpm.conf</span><br><span class="line">[27-May-2018 11:28:47] ERROR: failed to open error_log (/usr/var/log/php-fpm.log): No such file or directory (2)</span><br><span class="line">[27-May-2018 11:28:47] ERROR: failed to post process the configuration</span><br><span class="line">[27-May-2018 11:28:47] ERROR: FPM initialization failed</span><br></pre></td></tr></table></figure><p>错误信息显示：不能正确的打开”日志“文件，原因是默认在/usr/var目录下工作，可以修改配置文件指定正确的日志文件路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php-fpm --fpm-config /usr/local/etc/php/7.1/php-fpm.conf --prefix /usr/local/var</span><br></pre></td></tr></table></figure><p>可以成功运行了，错误文件会放在 <code>/usr/local/var/log/php-fpm.log</code></p><p>[TOC]</p><h3 id="Mac-启动、停止、重启-Nginx-重启-php-fpm"><a href="#Mac-启动、停止、重启-Nginx-重启-php-fpm" class="headerlink" title="Mac 启动、停止、重启 Nginx,重启 php-fpm"></a><a href="https://www.yuanshidai.cc/archives/93" target="_blank" rel="noopener">Mac 启动、停止、重启 Nginx,重启 php-fpm</a></h3><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><hr><p>启动：<code>sudo nginx</code></p><p>停止：</p><figure class="highlight ps"><figcaption><span>-ef | grep nginxsudo kill -INT [进程号]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br><span class="line">sudo kill -INT [进程号]</span><br></pre></td></tr></table></figure><p>重启：<code>sudo nginx -s reload</code></p><blockquote><p>重启之前一定要 执行<code>nginx -t</code>检查配置文件是否有问题</p></blockquote><h4 id="php-fpm"><a href="#php-fpm" class="headerlink" title="php-fpm"></a>php-fpm</h4><hr><p>关闭</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep php-fpm</span><br><span class="line">sudo killall php-fpm</span><br></pre></td></tr></table></figure><p>重启</p><p><code>/usr/local/Cellar/php71/7.1.12_23/sbin/php71-fpm start</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Mac重启php-fpm失败&quot;&gt;&lt;a href=&quot;#Mac重启php-fpm失败&quot; class=&quot;headerlink&quot; title=&quot;Mac重启php-fpm失败&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.jianshu.com/p/c9306c69e
      
    
    </summary>
    
      <category term="Mac" scheme="https://blog.zhimma.com/categories/Mac/"/>
    
      <category term="PHP" scheme="https://blog.zhimma.com/categories/Mac/PHP/"/>
    
    
      <category term="Mac" scheme="https://blog.zhimma.com/tags/Mac/"/>
    
      <category term="PHP" scheme="https://blog.zhimma.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据类型</title>
    <link href="https://blog.zhimma.com/2018/11/30/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://blog.zhimma.com/2018/11/30/MySQL数据类型/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:14:50.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h2><h3 id="char和varchar"><a href="#char和varchar" class="headerlink" title="char和varchar"></a>char和varchar</h3><h3 id="varchar数据类型的变化"><a href="#varchar数据类型的变化" class="headerlink" title="varchar数据类型的变化"></a>varchar数据类型的变化</h3><p>MySQL4.1以下的版本中，varchar数据类型的最大长度限制为255，其数据范围可以是0~255或1~255（根据不同版本数据库来定）</p><p>MySQL5.0以上的版本中，varchar数据类型的长度支持到了65535，也就是说可以存放65532个字节的数据，起始位和结束位占去了3个字节</p><p>Mysql5根据编码不同,存储大小也不同，具体有以下规则：</p><ul><li>存储限制</li></ul><p>varchar 字段是将实际内容单独存储在聚簇索引之外，内容开头用1到2个字节表示实际长度（长度超过255时需要2个字节），因此最大长度不能超过65535。</p><ul><li>编码长度限制</li></ul><p>字符类型若为gbk，每个字符最多占2个字节，最大长度不能超过32766;</p><p>字符类型若为utf8，每个字符最多占3个字节，最大长度不能超过<strong>21845</strong>。</p><p>若定义的时候超过上述限制，则varchar字段会被强行转为text类型，并产生warning。</p><ul><li>行长度限制</li></ul><p>导致实际应用中varchar长度限制的是一个行定义的长度。 MySQL要求一个行的定义长度不能超过65535。若定义的表长度超过这个值，则提示</p><p><code>ERROR 1118 (42000): Row size too large. The maximum row size for the used table type, not counting BLOBs, is 65535. You have to change some columns to TEXT or BLOBs。</code></p><h3 id="char-M-varchar-M-不同之处"><a href="#char-M-varchar-M-不同之处" class="headerlink" title="char(M), varchar(M)不同之处"></a>char(M), varchar(M)不同之处</h3><p>char(M)定义的列的长度为固定的，M取值可以为0～255之间，当保存char值时，在它们的右边填充空格以达到指定的长度。当检索到CHAR值时，尾部的空格被删除掉。在存储或检索过程中不进行大小写转换。char存储定长数据很方便，<strong>char字段上的索引效率级高</strong>，比如定义char(10)，那么不论你存储的数据是否达到了10个字节，都要占去10个字节的空间,不足的自动用空格填充。</p><p>varchar(M)定义的列的长度为可变长字符串，M取值可以为0~65535之间，(VARCHAR的最大有效长度由最大行大小和使用的字符集确定。整体最大长度是65,532字节）。varchar值保存时只保存需要的字符数，另加一个字节来记录长度(如果列声明的长度超过255，则使用两个字节)。varchar值保存时不进行填充。当值保存和检索时尾部的空格仍保留，符合标准SQL。varchar存储变长数据，但存储效率没有char高。如果一个字段可能的值是不固定长度的，我们只知道它不可能超过10个字符，把它定义为 VARCHAR(10)是最合算的。VARCHAR类型的实际长度是它的值的实际长度+1。为什么”+1”呢？这一个字节用于保存实际使用了多大的长度。<strong>从空间上考虑，用varchar合适；从效率上考虑，用char合适</strong>，关键是根据实际情况找到权衡点。</p><p>char和varchar最大的不同就是一个是固定长度，一个是可变长度。由于是可变长度，因此实际存储的时候是实际字符串再加上一个记录字符串长度的字节(如果超过255则需要两个字节)。如果分配给char或varchar列的值超过列的最大长度，则对值进行裁剪以使其适合。如果被裁掉的字符不是空格，则会产生一条警告。如果裁剪非空格字符，则会造成错误(而不是警告)并通过使用严格SQL模式禁用值的插入。</p><h3 id="VARCHAR和TEXT、BlOB类型的区别"><a href="#VARCHAR和TEXT、BlOB类型的区别" class="headerlink" title="VARCHAR和TEXT、BlOB类型的区别"></a>VARCHAR和TEXT、BlOB类型的区别</h3><p>VARCHAR，BLOB和TEXT类型是变长类型，对于其存储需求取决于列值的实际长度(在前面的表格中用L表示)，而不是取决于类型的最大可能尺寸。例如，一个VARCHAR(10)列能保存最大长度为10个字符的一个字符串，实际的存储需要是字符串的长度 ，加上1个字节以记录字符串的长度。对于字符串’abcd’，L是4而存储要求是5个字节。</p><p>BLOB和TEXT类型需要1，2，3或4个字节来记录列值的长度，这取决于类型的最大可能长度。VARCHAR需要定义大小，有65535字节的最大限制；TEXT则不需要。如果你把一个超过列类型最大长度的值赋给一个BLOB或TEXT列，值被截断以适合它。</p><p>一个BLOB是一个能保存可变数量的数据的二进制的大对象。4个BLOB类型TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB仅仅在他们能保存值的最大长度方面有所不同。</p><p>BLOB 可以储存图片,TEXT不行，TEXT只能储存纯文本文件。4个TEXT类型TINYTEXT、TEXT、MEDIUMTEXT和LONGTEXT对应于4个BLOB类型，并且有同样的最大长度和存储需求。在BLOB和TEXT类型之间的唯一差别是对BLOB值的排序和比较以大小写敏感方式执行，而对TEXT值是大小写不敏感的。换句话说，一个TEXT是一个大小写不敏感的BLOB</p><h3 id="总结char，varchar，text区别"><a href="#总结char，varchar，text区别" class="headerlink" title="总结char，varchar，text区别"></a>总结char，varchar，text区别</h3><p>长度的区别，char范围是0～255，varchar最长是64k，但是注意这里的64k是整个row的长度，要考虑到其它的column，还有如果存在not null的时候也会占用一位，对不同的字符集，有效长度还不一样，比如utf8的，最多21845，还要除去别的column，但是varchar在一般情况下存储都够用了。如果遇到了大文本，考虑使用text，最大能到4G。</p><p>效率来说基本是char&gt;varchar&gt;text，但是如果使用的是Innodb引擎的话，推荐使用varchar代替char</p><p>char和varchar可以有默认值，text不能指定默认值</p><p>数据库选择合适的数据类型存储还是很有必要的，对性能有一定影响。这里在零碎记录两笔，对于int类型的，如果不需要存取负值，最好加上unsigned；对于经常出现在where语句中的字段，考虑加索引，整形的尤其适合加索引。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL数据类型&quot;&gt;&lt;a href=&quot;#MySQL数据类型&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据类型&quot;&gt;&lt;/a&gt;MySQL数据类型&lt;/h2&gt;&lt;h3 id=&quot;char和varchar&quot;&gt;&lt;a href=&quot;#char和varchar&quot;
      
    
    </summary>
    
      <category term="Mysql" scheme="https://blog.zhimma.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://blog.zhimma.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL添加新用户1364</title>
    <link href="https://blog.zhimma.com/2018/11/30/MySQL%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%94%A8%E6%88%B71364/"/>
    <id>https://blog.zhimma.com/2018/11/30/MySQL添加新用户1364/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:15:05.339Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL5.7添加新用户 出现<code>ERROR 1364 (HY000): Field &#39;ssl_cipher&#39; doesn&#39;t have a default value</code></p><p>## </p><h2 id="解决方法1："><a href="#解决方法1：" class="headerlink" title="解决方法1："></a>解决方法1：</h2><p><code>insert into user (host,user,authentication_string,select_priv,insert_priv,update_priv) values (&#39;%&#39; , &#39;mma&#39; ,PASSWORD(&#39;123456&#39;),&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;);</code></p><p><strong>原因</strong>：</p><p>在我的配置文件my.cnf中有这样一条语句<code>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</code></p><p>指定了严格模式，为了安全，严格模式禁止通过insert 这种形式直接修改<strong>MySQL</strong>库中的<strong>user</strong>表进行添加新用户</p><p><strong>解决方法</strong>:</p><p>将配置文件中的STRICT_TRANS_TABLES删掉，即改为：</p><p><code>sql_mode=NO_ENGINE_SUBSTITUTION</code></p><p>然后重启mysql即可</p><h2 id="解决方法2-推荐-："><a href="#解决方法2-推荐-：" class="headerlink" title="解决方法2(推荐)："></a>解决方法2(推荐)：</h2><p>添加用户：</p><p><code>grant usage on *.* to &#39;mma&#39;@&#39;%&#39; identified by &#39;123456&#39; with grant option;</code></p><p>赋予权限</p><p><code>grant all privileges on *.* to &#39;mma&#39;@&#39;%&#39; identified by &#39;123456&#39;;</code></p><p><strong>or</strong></p><p><code>grant select,insert,update,delete,create,drop ON TUTORIALS.* TO &#39;mma&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</code></p><p>刷新权限</p><p><code>flush privileges;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL5.7添加新用户 出现&lt;code&gt;ERROR 1364 (HY000): Field &amp;#39;ssl_cipher&amp;#39; doesn&amp;#39;t have a default value&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;## &lt;/p&gt;
&lt;h2 id=&quot;解决方法1
      
    
    </summary>
    
      <category term="Mysql" scheme="https://blog.zhimma.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://blog.zhimma.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="https://blog.zhimma.com/2018/11/30/Nginx/"/>
    <id>https://blog.zhimma.com/2018/11/30/Nginx/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:15:24.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h3><p>Mainline version        开发版本</p><p>Stable version        稳定版本</p><p>Legacy versions        历史版本</p><h3 id="安装源"><a href="#安装源" class="headerlink" title="安装源"></a>安装源</h3><p>To set up the yum repository for RHEL/CentOS, create the file named <code>/etc/yum.repos.d/nginx.repo</code> with the following contents:</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; [nginx]</span><br><span class="line">&gt; name=nginx repo</span><br><span class="line">&gt; baseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/</span><br><span class="line">&gt; gpgcheck=0</span><br><span class="line">&gt; enabled=1</span><br><span class="line">&gt; </span><br><span class="line">&gt; baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>Replace “<code>OS</code>” with “<code>rhel</code>” or “<code>centos</code>”, depending on the distribution used, and “<code>OSRELEASE</code>” with “<code>6</code>” or “<code>7</code>”, for 6.x or 7.x versions, respectively.</p><h3 id="查看nginx安装包"><a href="#查看nginx安装包" class="headerlink" title="查看nginx安装包"></a>查看nginx安装包</h3><p><code>yum list | grep nginx</code></p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p><code>yum install nginx -y</code></p><h3 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]# nginx -v</span><br><span class="line"><span class="attribute">nginx</span> version: nginx/<span class="number">1</span>.<span class="number">14</span>.<span class="number">2</span></span><br><span class="line">[root<span class="variable">@host</span> ~]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">14</span>.<span class="number">2</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span>-<span class="number">28</span>) (GCC)</span><br><span class="line">built with OpenSSL <span class="number">1</span>.<span class="number">0</span>.<span class="number">2k</span>-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --<span class="literal">error</span>-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=<span class="string">'-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC'</span> --with-ld-opt=<span class="string">'-Wl,-z,relro -Wl,-z,now -pie'</span></span><br></pre></td></tr></table></figure><h2 id="nginx-配置解析"><a href="#nginx-配置解析" class="headerlink" title="nginx 配置解析"></a>nginx 配置解析</h2><table><thead><tr><th>user</th><th>设置nginx服务的系统使用用户</th></tr></thead><tbody><tr><td>worker_processes</td><td>工作进程数</td></tr><tr><td>error_log</td><td>nginx的错误日志</td></tr><tr><td>pid</td><td>nginx服务</td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> www www;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /home/wwwlogs/nginx_error.log <span class="literal">error</span>;</span><br><span class="line"><span class="comment"># pid /usr/local/nginx/logs/nginx.pid;</span></span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"><span class="comment">#Specifies the value for maximum file descriptors that can be opened by this process.</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>events</th><th>worker_connections</th><th>每个工作进程运行的最大链接数</th></tr></thead><tbody><tr><td></td><td>use</td><td>工作进程模式</td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">65535</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nginx-模块"><a href="#nginx-模块" class="headerlink" title="nginx 模块"></a>nginx 模块</h2><h3 id="stub-status"><a href="#stub-status" class="headerlink" title="stub_status"></a>stub_status</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /nginx &#123;</span><br><span class="line">stub_status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Active connections: 20 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 274 274 784 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 19</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;版本说明&quot;&gt;&lt;a href=&quot;#版本说明&quot; class=&quot;headerlink&quot; title=&quot;版本说明&quot;&gt;&lt;/a&gt;版本说明&lt;/h
      
    
    </summary>
    
      <category term="Nginx" scheme="https://blog.zhimma.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://blog.zhimma.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>PHP中匿名函数</title>
    <link href="https://blog.zhimma.com/2018/11/30/PHP%E4%B8%AD%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    <id>https://blog.zhimma.com/2018/11/30/PHP中匿名函数/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:18:13.867Z</updated>
    
    <content type="html"><![CDATA[<p>匿名函数,说白了就是”没有名字的函数”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$foo = function()&#123;</span><br><span class="line">    //this is a closure;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面声明的就是匿名函数,没有什么特别的,和一般函数结构神似,唯独少了个函数名。并且这个<strong>函数可以作为一个值被赋予一个变量或者对象属性</strong>。这种特性是的拥有匿名函数的编程语言在设计一些应用时,更为灵活。</p><p>匿名函数和普通函数最大的区别是在于：</p><ol><li>匿名函数可以作为一个具体的”值”赋予给变量或者对象属性</li><li>匿名函数可以被定义在不同地方,使得它可以有效利用他所在的局域内的变量（或者说上下文环境）</li></ol><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class foo</span><br><span class="line">&#123;</span><br><span class="line">    public function exec(Closure $callback)</span><br><span class="line">    &#123;</span><br><span class="line">        echo $callback();//hi ,nick</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$name = &quot;nick&quot;;</span><br><span class="line">(new foo())-&gt;exec(function() use ($name)&#123;</span><br><span class="line">    return &quot;hi ,&quot;.$name;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到,匿名函数使用使用了上下文中的变量$name。而实际上,这个匿名函数实在另一个地方被执行（foo类里面）。这样使得我们不必将变量$name的值通过参数传递到foo类的exec方法中,而且可以减少在exec方法中不必要的处理逻辑,使得类跟家专注于自己的职责；</p><p>匿名函数定义时不会被执行,除非被调用,上文中的例子就是这样,利用这种特性,我们可以利用它来实现一个<a href="(https://blog.bytesclub.com/2017/05/07/设计模式-控制反转及其依赖注入（2）/">控制反转（IoC）容器</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 一个简单的IoC容器</span><br><span class="line"> */</span><br><span class="line">class Container</span><br><span class="line">&#123;</span><br><span class="line">    protected static $bindings;</span><br><span class="line"> </span><br><span class="line">    public static function bind($abstract, Closure $concrete)</span><br><span class="line">    &#123;</span><br><span class="line">        static::$bindings[$abstract] = $concrete;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static function make($abstract)</span><br><span class="line">    &#123;</span><br><span class="line">        return call_user_func(static::$bindings[$abstract]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 示例用的 talk 类</span><br><span class="line"> */</span><br><span class="line">class talk</span><br><span class="line">&#123;</span><br><span class="line">    public function greet($target)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &apos;hi, &apos; . $target-&gt;getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 示例用的 A 类</span><br><span class="line"> */</span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    public function getName()</span><br><span class="line">    &#123;</span><br><span class="line">        return &apos;Nick&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 示例用的 B 类</span><br><span class="line"> */</span><br><span class="line">class B</span><br><span class="line">&#123;</span><br><span class="line">    public function getName()</span><br><span class="line">    &#123;</span><br><span class="line">        return &apos;Amy&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 以下代码是主要示例代码</span><br><span class="line"> </span><br><span class="line">// 创建一个talk类的实例</span><br><span class="line">$talk = new talk;</span><br><span class="line"> </span><br><span class="line">// 将A类绑定至容器,命名为foo</span><br><span class="line">Container::bind(&apos;foo&apos;, function() &#123;</span><br><span class="line">    return new A;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">// 将B类绑定至容器,命名为bar</span><br><span class="line">Container::bind(&apos;bar&apos;, function() &#123;</span><br><span class="line">    return new B;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">// 通过容器取出实例</span><br><span class="line">$talk-&gt;greet(Container::make(&apos;foo&apos;)); // hi, Nick</span><br><span class="line">$talk-&gt;greet(Container::make(&apos;bar&apos;)); // hi, Amy</span><br></pre></td></tr></table></figure><p>上述例子中,只有通过make方法获取实例的时候,实例才被创建,使得我们可以实现容器。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;匿名函数,说白了就是”没有名字的函数”&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$foo = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //this is a closure;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面声明的就是匿名函数,没有什么特别的,和一般函数结构神似,唯独少了个函数名。并且这个&lt;strong&gt;函数可以作为一个值被赋予一个变量或者对象属性&lt;/strong&gt;。这种特性是的拥有匿名函数的编程语言在设计一些应用时,更为灵活。&lt;/p&gt;
&lt;p&gt;匿名函数和普通函数最大的区别是在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;匿名函数可以作为一个具体的”值”赋予给变量或者对象属性&lt;/li&gt;
&lt;li&gt;匿名函数可以被定义在不同地方,使得它可以有效利用他所在的局域内的变量（或者说上下文环境）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://blog.zhimma.com/categories/PHP/"/>
    
    
      <category term="闭包/匿名函数" scheme="https://blog.zhimma.com/tags/%E9%97%AD%E5%8C%85-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>PHP中匿名函数和闭包初探</title>
    <link href="https://blog.zhimma.com/2018/11/30/PHP%E4%B8%AD%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%92%8C%E9%97%AD%E5%8C%85%E5%88%9D%E6%8E%A2/"/>
    <id>https://blog.zhimma.com/2018/11/30/PHP中匿名函数和闭包初探/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:18:28.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="「闭包」和「匿名」的区别"><a href="#「闭包」和「匿名」的区别" class="headerlink" title="「闭包」和「匿名」的区别"></a>「闭包」和「匿名」的区别</h3><p>首先，虽然闭包和匿名在PHP中对应的都是一个东西，但是闭包和匿名并不等价。</p><p>匿名是指这个函数可以想变量一样操作，例如可以赋值给一个变量或者作为参数传递，作为函数的返回值等。</p><p>闭包则是指这个函数可以从上下文中捕获变量（不是通过传参获取），例如PHP使用use这个子句来完成这个操作；</p><p>实际上，闭包和匿名函数是伪装成函数的对象。他们是Closure类的实例。<br>闭包和字符串、整数一样，是一等值类型</p><a id="more"></a><h3 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h3><blockquote><p>提到闭包就不得不想起匿名函数，也叫闭包函数（closures），貌似PHP闭包实现主要就是靠它.所以，在PHP中闭包（Closure）就是匿名函数;</p></blockquote><p>声明一个匿名函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$func = function()&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>可以看到，匿名函数因为没有名字，如果要使用它，需要将其返回给一个变量。匿名函数也像普通函数一样可以声明参数，调用方法也相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$message = function($name)</span><br><span class="line">&#123;</span><br><span class="line">    echo &apos;hello &apos;.$name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$message(&apos;world&apos;);</span><br><span class="line">//输出hello world</span><br></pre></td></tr></table></figure></p><blockquote><p>通常会把闭包当做函数的回调来使用</p><p>我们之所以能调用$message变量，是因为这个变量的值是一个闭包，而且闭包对象实现了<strong>invoke()魔术方法。只要变量名后有(),PHP就会查找并调用</strong>invoke()方法。</p></blockquote><p><code>array_map(), preg_replace_callback()</code>方法都会用到回调函数，这是使用闭包的最佳时机！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$numbersPlusOne = array_map(function ($number) &#123;</span><br><span class="line">    return $number + 1;</span><br><span class="line">&#125;, [1, 2, 3]);</span><br><span class="line">print_r($numbersPlusOne);</span><br><span class="line">//输出[2, 3, 4]</span><br></pre></td></tr></table></figure><h3 id="use关键字"><a href="#use关键字" class="headerlink" title="use关键字"></a>use关键字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 一个基本的购物车，包括一些已经添加的商品和每种商品的数量。</span><br><span class="line">// 其中有一个方法用来计算购物车中所有商品的总价格。该方法使用了一个closure作为回调函数。</span><br><span class="line">class Cart</span><br><span class="line">&#123;</span><br><span class="line">    const PRICE_BUTTER  = 1.00;</span><br><span class="line">    const PRICE_MILK    = 3.00;</span><br><span class="line">    const PRICE_EGGS    = 6.95;</span><br><span class="line"></span><br><span class="line">    protected   $products = array();</span><br><span class="line"></span><br><span class="line">    public function add($product, $quantity)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;products[$product] = $quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getQuantity($product)</span><br><span class="line">    &#123;</span><br><span class="line">        return isset($this-&gt;products[$product]) ? $this-&gt;products[$product] :</span><br><span class="line">               FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getTotal($tax)</span><br><span class="line">    &#123;</span><br><span class="line">        $total = 0.00;</span><br><span class="line"></span><br><span class="line">        $callback =</span><br><span class="line">            function ($quantity, $product) use ($tax, &amp;$total)</span><br><span class="line">            &#123;</span><br><span class="line">                $pricePerItem = constant(__CLASS__ . &quot;::PRICE_&quot; .</span><br><span class="line">                    strtoupper($product));</span><br><span class="line">                $total += ($pricePerItem * $quantity) * ($tax + 1.0);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        array_walk($this-&gt;products, $callback);</span><br><span class="line">        return round($total, 2);;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$my_cart = new Cart;</span><br><span class="line"></span><br><span class="line">// 往购物车里添加条目</span><br><span class="line">$my_cart-&gt;add(&apos;butter&apos;, 1);</span><br><span class="line">$my_cart-&gt;add(&apos;milk&apos;, 3);</span><br><span class="line">$my_cart-&gt;add(&apos;eggs&apos;, 6);</span><br><span class="line"></span><br><span class="line">// 打出出总价格，其中有 5% 的销售税.</span><br><span class="line">print $my_cart-&gt;getTotal(0.05) . &quot;\n&quot;;</span><br><span class="line">// The result is 54.29</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>匿名函数不会自动从父作用域中继承变量，注意从父作用域继承变量和使用全局变量是不同的。</p><p>如果父作用域本身就是全局的 情况下就不存在从父作用域继承变量了，如果不是全局的话，想要使用父作用域中的变量，必须在声明匿名函数时候使用use换键字 来定义继承父作用域的变量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;「闭包」和「匿名」的区别&quot;&gt;&lt;a href=&quot;#「闭包」和「匿名」的区别&quot; class=&quot;headerlink&quot; title=&quot;「闭包」和「匿名」的区别&quot;&gt;&lt;/a&gt;「闭包」和「匿名」的区别&lt;/h3&gt;&lt;p&gt;首先，虽然闭包和匿名在PHP中对应的都是一个东西，但是闭包和匿名并不等价。&lt;/p&gt;
&lt;p&gt;匿名是指这个函数可以想变量一样操作，例如可以赋值给一个变量或者作为参数传递，作为函数的返回值等。&lt;/p&gt;
&lt;p&gt;闭包则是指这个函数可以从上下文中捕获变量（不是通过传参获取），例如PHP使用use这个子句来完成这个操作；&lt;/p&gt;
&lt;p&gt;实际上，闭包和匿名函数是伪装成函数的对象。他们是Closure类的实例。&lt;br&gt;闭包和字符串、整数一样，是一等值类型&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://blog.zhimma.com/categories/PHP/"/>
    
    
      <category term="闭包/匿名函数" scheme="https://blog.zhimma.com/tags/%E9%97%AD%E5%8C%85-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>PhpStorm中使用PSR2编码规范phpcbf脚本自动修正代码格式</title>
    <link href="https://blog.zhimma.com/2018/11/30/PhpStorm%E4%B8%AD%E4%BD%BF%E7%94%A8PSR2%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83phpcbf%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E4%BF%AE%E6%AD%A3%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
    <id>https://blog.zhimma.com/2018/11/30/PhpStorm中使用PSR2编码规范phpcbf脚本自动修正代码格式/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:17:48.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装CodeSniffer"><a href="#安装CodeSniffer" class="headerlink" title="安装CodeSniffer"></a>安装CodeSniffer</h2><h3 id="安装CodeSniffer-1"><a href="#安装CodeSniffer-1" class="headerlink" title="安装CodeSniffer"></a>安装CodeSniffer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install php-code-sniffer</span><br></pre></td></tr></table></figure><blockquote><p>安装完成后的路径:<code>/usr/local/Cellar/php-code-sniffer</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; ☁  bin  pwd</span><br><span class="line">&gt; /usr/local/Cellar/php-code-sniffer/<span class="number">3.3</span><span class="number">.1</span>/bin</span><br><span class="line">&gt; ☁  bin  ls</span><br><span class="line">&gt; phpcbf           phpcs</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="配置phpcbf"><a href="#配置phpcbf" class="headerlink" title="配置phpcbf"></a>配置phpcbf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./phpcs --config-set default_standard PSR2</span><br><span class="line">./phpcbf --config-set default_standard PSR2</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;☁ bin ls</span><br><span class="line">&gt;CodeSniffer.conf phpcbf           phpcs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="配置PhpStorm"><a href="#配置PhpStorm" class="headerlink" title="配置PhpStorm"></a>配置PhpStorm</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ol><li><p>打开<code>PhpStorm</code>的设置页（<code>File-&gt;Setting</code>或者<code>Command+,</code>），到<code>Editor/Code Style</code>页<code>PHP</code>中选择风格为 <code>PSR1/2</code></p><p><img src="http://zhimma.oss-cn-beijing.aliyuncs.com/md/1.jpg" alt=""></p></li><li><p>设置Code Sniffer</p><p><img src="http://zhimma.oss-cn-beijing.aliyuncs.com/md/2.jpg" alt=""></p><p>选择之前phpcs的路径，填写后可以点击Validate按钮验证</p></li><li><p><img src="http://zhimma.oss-cn-beijing.aliyuncs.com/md/3.jpg" alt=""></p></li></ol><p>现在使用<code>PhpStorm</code>的格式化，将会自动格式化成psr-2的风格</p><p><a href="https://qq52o.me/2460.html" target="_blank" rel="noopener">参考地址</a></p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装CodeSniffer&quot;&gt;&lt;a href=&quot;#安装CodeSniffer&quot; class=&quot;headerlink&quot; title=&quot;安装CodeSniffer&quot;&gt;&lt;/a&gt;安装CodeSniffer&lt;/h2&gt;&lt;h3 id=&quot;安装CodeSniffer-1&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="PHP" scheme="https://blog.zhimma.com/categories/PHP/"/>
    
      <category term="PhpStorm" scheme="https://blog.zhimma.com/categories/PHP/PhpStorm/"/>
    
    
      <category term="PhpStorm" scheme="https://blog.zhimma.com/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title>PhpStrom中安装CodeSniffer</title>
    <link href="https://blog.zhimma.com/2018/11/30/PhpStrom%E4%B8%AD%E5%AE%89%E8%A3%85CodeSniffer/"/>
    <id>https://blog.zhimma.com/2018/11/30/PhpStrom中安装CodeSniffer/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:17:42.874Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>环境 ： windows10</p><p>本地开发环境 ：phpStudy</p><p>Phpstrom版本：Phpstrom 2017.1<br><a id="more"></a></p></blockquote><h2 id="Phpstrom"><a href="#Phpstrom" class="headerlink" title="Phpstrom"></a>Phpstrom</h2><hr><p>Phpstorm是JetBrains 公司开发的跨平台的PHP IDE。在用Phpstorm编辑PHP，HTML和JavaScript的代码时，Phpstorm提供实施代码分析，错误提示和自动格式化等功能。支持的PHP版本包括5.3, 5.4, 5.5, 5.6 和 7.0。一款便携又强大的IDE，很多功能能够帮助你更好的进行开发。</p><h2 id="PHP-CodeSniffer"><a href="#PHP-CodeSniffer" class="headerlink" title="PHP CodeSniffer"></a>PHP CodeSniffer</h2><hr><p>PHP CodeSniffer是PEAR中的一个用PHP5写的一个PHP的代码风格检测器，它根据预先设定好的PHP编码风格和规则，去检查应用中的代码风格情况是否有违反一组预先设置好的编码标准，内置了ZEND，PEAR的编码风格规则，当然也支持自己定制。PHP CodeSniffer 是确保代码简洁一致的必不可少的开发工具，甚至还可以帮助程序员减少一些语义错误。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><hr><h3 id="PHP扩展安装"><a href="#PHP扩展安装" class="headerlink" title="PHP扩展安装"></a>PHP扩展安装</h3><ol><li>下载<a href="http://pear.php.net/go-pear.phar" target="_blank" rel="noopener">PEAR</a>文件</li><li>切换到PHP软件目录，运行<code>php go-pear.phar</code></li><li>按照提示指令输入，完成安装</li><li>装PHP Code Sniffer<code>pear install PHP_CodeSniffer</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">E:\phpStudy\php\php-5.6.27-nts&gt;php go-pear.phar</span><br><span class="line"></span><br><span class="line">Are you installing a system-wide PEAR or a local copy?</span><br><span class="line">(system|local) [system] :</span><br><span class="line"></span><br><span class="line">Below is a suggested file layout for your new PEAR installation.  To</span><br><span class="line">change individual locations, type the number in front of the</span><br><span class="line">directory.  Type &apos;all&apos; to change all of them or simply press Enter to</span><br><span class="line">accept these locations.</span><br><span class="line"></span><br><span class="line"> 1. Installation base ($prefix)                   : E:\phpStudy\php\php-5.6.27-nts</span><br><span class="line"> 2. Temporary directory for processing            : E:\phpStudy\php\php-5.6.27-nts\tmp</span><br><span class="line"> 3. Temporary directory for downloads             : E:\phpStudy\php\php-5.6.27-nts\tmp</span><br><span class="line"> 4. Binaries directory                            : E:\phpStudy\php\php-5.6.27-nts</span><br><span class="line"> 5. PHP code directory ($php_dir)                 : E:\phpStudy\php\php-5.6.27-nts\pear</span><br><span class="line"> 6. Documentation directory                       : E:\phpStudy\php\php-5.6.27-nts\docs</span><br><span class="line"> 7. Data directory                                : E:\phpStudy\php\php-5.6.27-nts\data</span><br><span class="line"> 8. User-modifiable configuration files directory : E:\phpStudy\php\php-5.6.27-nts\cfg</span><br><span class="line"> 9. Public Web Files directory                    : E:\phpStudy\php\php-5.6.27-nts\www</span><br><span class="line">10. System manual pages directory                 : E:\phpStudy\php\php-5.6.27-nts\man</span><br><span class="line">11. Tests directory                               : E:\phpStudy\php\php-5.6.27-nts\tests</span><br><span class="line">12. Name of configuration file                    : C:\Windows\pear.ini</span><br><span class="line">13. Path to CLI php.exe                           : E:\phpStudy\php\php-5.6.27-nts</span><br><span class="line"></span><br><span class="line">1-13, &apos;all&apos; or Enter to continue:</span><br><span class="line">Beginning install...</span><br><span class="line">Configuration written to C:\Windows\pear.ini...</span><br><span class="line">Initialized registry...</span><br><span class="line">Preparing to install...</span><br><span class="line">installing phar://E:/phpStudy/php/php-5.6.27-nts/go-pear.phar/PEAR/go-pear-tarballs/Archive_Tar-1.4.2.tar...</span><br><span class="line">installing phar://E:/phpStudy/php/php-5.6.27-nts/go-pear.phar/PEAR/go-pear-tarballs/Console_Getopt-1.4.1.tar...</span><br><span class="line">installing phar://E:/phpStudy/php/php-5.6.27-nts/go-pear.phar/PEAR/go-pear-tarballs/PEAR-1.10.3.tar...</span><br><span class="line">installing phar://E:/phpStudy/php/php-5.6.27-nts/go-pear.phar/PEAR/go-pear-tarballs/Structures_Graph-1.1.1.tar...</span><br><span class="line">installing phar://E:/phpStudy/php/php-5.6.27-nts/go-pear.phar/PEAR/go-pear-tarballs/XML_Util-1.4.2.tar...</span><br><span class="line">install ok: channel://pear.php.net/Archive_Tar-1.4.2</span><br><span class="line">install ok: channel://pear.php.net/Console_Getopt-1.4.1</span><br><span class="line">install ok: channel://pear.php.net/Structures_Graph-1.1.1</span><br><span class="line">install ok: channel://pear.php.net/XML_Util-1.4.2</span><br><span class="line">install ok: channel://pear.php.net/PEAR-1.10.3</span><br><span class="line">PEAR: Optional feature webinstaller available (PEAR&apos;s web-based installer)</span><br><span class="line">PEAR: Optional feature gtkinstaller available (PEAR&apos;s PHP-GTK-based installer)</span><br><span class="line">PEAR: Optional feature gtk2installer available (PEAR&apos;s PHP-GTK2-based installer)</span><br><span class="line">PEAR: To install optional features use &quot;pear install pear/PEAR#featurename&quot;</span><br><span class="line"></span><br><span class="line">** WARNING! Old version found at E:\phpStudy\php\php-5.6.27-nts, please remove it or be sure to use the new e:\phpstudy\php\php-5.6.27-nts\pear.bat command</span><br><span class="line"></span><br><span class="line">The &apos;pear&apos; command is now at your service at e:\phpstudy\php\php-5.6.27-nts\pear.bat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* WINDOWS ENVIRONMENT VARIABLES *</span><br><span class="line">For convenience, a REG file is available under E:\phpStudy\php\php-5.6.27-ntsPEAR_ENV.reg .</span><br><span class="line">This file creates ENV variables for the current user.</span><br><span class="line"></span><br><span class="line">Double-click this file to add it to the current user registry.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">E:\phpStudy\php\php-5.6.27-nts&gt;pear install PHP_CodeSniffer</span><br><span class="line">WARNING: channel &quot;pear.php.net&quot; has updated its protocols, use &quot;pear channel-update pear.php.net&quot; to update</span><br><span class="line">downloading PHP_CodeSniffer-2.8.1.tgz ...</span><br><span class="line">Starting to download PHP_CodeSniffer-2.8.1.tgz (522,712 bytes)</span><br><span class="line">.........................................................................................................done: 522,712 bytes</span><br><span class="line">install ok: channel://pear.php.net/PHP_CodeSniffer-2.8.1</span><br></pre></td></tr></table></figure><h3 id="Phpstrom配置"><a href="#Phpstrom配置" class="headerlink" title="Phpstrom配置"></a>Phpstrom配置</h3><ol><li>下载对应的标准到Standard（<code>E:\phpStudy\php\php-5.6.27-nts\pear\PHP\CodeSniffer\Standards</code>）目录下面<blockquote><p>这里我省略了这一步</p></blockquote></li><li>打开Phpstrom设置,依次打开<code>Setting-&gt;Languages and Frameworks-&gt;PHP-&gt;Code Sniffer</code>，按照下图操作<br><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP/4.png" alt="image"></li><li>Standard配置，按照下图操作<br><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP/5.png" alt="image"></li><li>最好保存即可预览效果</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;环境 ： windows10&lt;/p&gt;
&lt;p&gt;本地开发环境 ：phpStudy&lt;/p&gt;
&lt;p&gt;Phpstrom版本：Phpstrom 2017.1&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://blog.zhimma.com/categories/PHP/"/>
    
      <category term="PhpStorm" scheme="https://blog.zhimma.com/categories/PHP/PhpStorm/"/>
    
    
      <category term="PhpStorm" scheme="https://blog.zhimma.com/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title>SSH 密钥创建及密钥登录</title>
    <link href="https://blog.zhimma.com/2018/11/30/SSH%20%E5%AF%86%E9%92%A5%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/"/>
    <id>https://blog.zhimma.com/2018/11/30/SSH 密钥创建及密钥登录/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:20:12.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH-密钥创建及密钥登录"><a href="#SSH-密钥创建及密钥登录" class="headerlink" title="SSH 密钥创建及密钥登录"></a>SSH 密钥创建及密钥登录</h1><p>本文基本引自这里：<a href="https://blog.csdn.net/nahancy/article/details/79059135" target="_blank" rel="noopener">https://blog.csdn.net/nahancy/article/details/79059135</a></p><p>在我们平时使用Linux系统时候，通常使用的Linux SSH登录方式是用户名加密码的登录方式，今天来探讨另外的一种相对安全的登录方式——密钥登录</p><p>我们知道SSH登录是用的RSA非对称加密的，所以我们在SSH登录的时候就可以使用RSA密钥登录，SSH有专门创建SSH密钥的工具ssh-keygen，下面就来一睹风采。</p><p>首先进入Linux系统的用户目录下的.ssh目录下，root用户是/root/.ssh，普通用户是/home/您的用户名/.ssh，我们以root用户为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# cd /root/.ssh/</span><br><span class="line">[root@b04f945297ac .ssh]# ls</span><br><span class="line">known_hosts</span><br></pre></td></tr></table></figure><blockquote><p>上面是没有创建过ssh秘钥的样子</p></blockquote><p> 执行ssh-keygen命令创建密钥对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ssh-keygen -t rsa -b 4096</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): /root/.ssh/zhimma_id_rsa</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/zhimma_id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/zhimma_id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:WrIN4U/dk+1KdTxv0t5zFeXCeWWpvaNtFFMxbkDY2Cw root@b04f945297ac</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 4096]----+</span><br><span class="line">|            Bo oo|</span><br><span class="line">|           E +o.*|</span><br><span class="line">|      .     ..o*+|</span><br><span class="line">|     . . . . +=*o|</span><br><span class="line">|      + S . + o+B|</span><br><span class="line">|       X     + *+|</span><br><span class="line">|      o o   . * *|</span><br><span class="line">|           . o Bo|</span><br><span class="line">|            . . =|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><blockquote><p>-b 参数，指定了长度，也可以不加-b参数，直接使用ssh-keygen -t rsa</p><p>这里我重新命名了下秘钥文件名 zhimma_id_rsa</p></blockquote><p>密钥生成后会在当前目录下多出两个文件，zhimma_id_rsa和zhimma_id_rsa.pub，其中zhimma_id_rsa是私钥（敲黑板：这个很重要，不能外泄），zhimma_id_rsa.pub这个是公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ls</span><br><span class="line">known_hosts  zhimma_id_rsa  zhimma_id_rsa.pub</span><br><span class="line">[root@b04f945297ac .ssh]#</span><br></pre></td></tr></table></figure><h2 id="放置公钥"><a href="#放置公钥" class="headerlink" title="放置公钥"></a>放置公钥</h2><h3 id="ssh-copy-id"><a href="#ssh-copy-id" class="headerlink" title="ssh-copy-id"></a>ssh-copy-id</h3><p>把公钥拷贝到需要登录的远程服务器或Linux系统上，这里可以使用<code>ssh-copy-id</code></p><blockquote><p>ssh-copy-id默认端口是22，如果要重新指定端口，则使用<code>-p 端口号</code>命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ssh-copy-id -i /root/.ssh/zhimma_id_rsa.pub -p 203 root@192.168.2.107  </span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/zhimma_id_rsa.pub&quot;</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@192.168.2.107&apos;s password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh -p &apos;203&apos; &apos;root@192.168.2.107&apos;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><p>这样就把公钥加的指定的服务器上了</p><p>尝试登陆下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ssh -i /root/.ssh/zhimma_id_rsa -p 203 root@192.168.2.107</span><br><span class="line">Last login: Wed Jun  6 04:16:09 2018 from 172.17.0.1</span><br><span class="line">[root@e91b4a662023 ~]#</span><br></pre></td></tr></table></figure><p>登陆成功！</p><h3 id="手动放置"><a href="#手动放置" class="headerlink" title="手动放置"></a>手动放置</h3><p>进入远程服务器.ssh目录，创建authorized_keys 文件，赋权限600</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@01bb4850cc8c .ssh]# touch authorized_keys</span><br><span class="line">[root@01bb4850cc8c .ssh]# chmod -R 600 authorized_keys </span><br><span class="line">[root@01bb4850cc8c .ssh]# ls -al</span><br><span class="line">total 16</span><br><span class="line">drwx------ 1 root root 4096 Jun  6 07:02 .</span><br><span class="line">dr-xr-x--- 1 root root 4096 Apr 27 08:15 ..</span><br><span class="line">-rw------- 1 root root    0 Jun  6 07:02 authorized_keys</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jun  6 07:02 dd</span><br><span class="line">-rw-r--r-- 1 root root  824 Mar 16 08:59 known_hosts</span><br></pre></td></tr></table></figure><p>复制<code>zhimma_id_rsa.pub</code>的内容进入这个文件</p><p>尝试登陆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ssh -i /root/.ssh/zhimma_id_rsa -p 204 root@192.168.2.107</span><br><span class="line">Last login: Wed Jun  6 04:18:46 2018 from 172.17.0.1</span><br><span class="line">[root@01bb4850cc8c ~]#</span><br></pre></td></tr></table></figure><p>登陆成功！</p><h2 id="ssh-keygen可用的参数"><a href="#ssh-keygen可用的参数" class="headerlink" title="ssh-keygen可用的参数"></a>ssh-keygen可用的参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen可用的参数选项有：</span><br><span class="line">     -a trials  在使用 -T 对 DH-GEX 候选素数进行安全筛选时需要执行的基本测试数量。</span><br><span class="line">     -B      显示指定的公钥/私钥文件的 bubblebabble 摘要。</span><br><span class="line">     -b bits 指定密钥长度。对于RSA密钥，最小要求768位，默认是2048位。DSA密钥必须恰好是1024位(FIPS 186-2 标准的要求)。</span><br><span class="line">     -C comment 提供一个新注释</span><br><span class="line">     -c      要求修改私钥和公钥文件中的注释。本选项只支持 RSA1 密钥。</span><br><span class="line">             程序将提示输入私钥文件名、密语(如果存在)、新注释。</span><br><span class="line">     -D reader下载存储在智能卡 reader 里的 RSA 公钥。</span><br><span class="line"></span><br><span class="line">     -e      </span><br><span class="line">         读取OpenSSH的私钥或公钥文件，并以 RFC 4716 SSH 公钥文件格式在 stdout 上显示出来。</span><br><span class="line">              该选项能够为多种商业版本的 SSH 输出密钥。</span><br><span class="line">     -F hostname</span><br><span class="line">             在 known_hosts 文件中搜索指定的 hostname ，并列出所有的匹配项。</span><br><span class="line">             这个选项主要用于查找散列过的主机名/ip地址，还可以和 -H 选项联用打印找到的公钥的散列值。</span><br><span class="line">     -f filename</span><br><span class="line">             指定密钥文件名。</span><br><span class="line">     -G output_file</span><br><span class="line">             为 DH-GEX 产生候选素数。这些素数必须在使用之前使用 -T 选项进行安全筛选。</span><br><span class="line">     -g      在使用 -r 打印指纹资源记录的时候使用通用的 DNS 格式。</span><br><span class="line">     -H      对 known_hosts 文件进行散列计算。这将把文件中的所有主机名/ip地址替换为相应的散列值。</span><br><span class="line">             原来文件的内容将会添加一个&quot;.old&quot;后缀后保存。这些散列值只能被 ssh 和 sshd 使用。</span><br><span class="line">             这个选项不会修改已经经过散列的主机名/ip地址，因此可以在部分公钥已经散列过的文件上安全使用。</span><br><span class="line">     -i      读取未加密的SSH-2兼容的私钥/公钥文件，然后在 stdout 显示OpenSSH兼容的私钥/公钥。</span><br><span class="line">             该选项主要用于从多种商业版本的SSH中导入密钥。</span><br><span class="line">     -l      显示公钥文件的指纹数据。它也支持 RSA1 的私钥。</span><br><span class="line">             对于RSA和DSA密钥，将会寻找对应的公钥文件，然后显示其指纹数据。</span><br><span class="line">     -M memory</span><br><span class="line">             指定在生成 DH-GEXS 候选素数的时候最大内存用量(MB)。</span><br><span class="line"></span><br><span class="line">     -N new_passphrase</span><br><span class="line">             提供一个新的密语。</span><br><span class="line"></span><br><span class="line">     -P passphrase</span><br><span class="line">             提供(旧)密语。</span><br><span class="line">     -p      要求改变某私钥文件的密语而不重建私钥。程序将提示输入私钥文件名、原来的密语、以及两次输入新密语。</span><br><span class="line">     -q      安静模式。用于在 /etc/rc 中创建新密钥的时候。</span><br><span class="line">     -R hostname</span><br><span class="line">             从 known_hosts 文件中删除所有属于 hostname 的密钥。</span><br><span class="line">             这个选项主要用于删除经过散列的主机(参见 -H 选项)的密钥。</span><br><span class="line">     -r hostname</span><br><span class="line">             打印名为 hostname 的公钥文件的 SSHFP 指纹资源记录。</span><br><span class="line">     -S start</span><br><span class="line">             指定在生成 DH-GEX 候选模数时的起始点(16进制)。</span><br><span class="line">     -T output_file</span><br><span class="line">             测试 Diffie-Hellman group exchange 候选素数(由 -G 选项生成)的安全性。</span><br><span class="line">     -t type</span><br><span class="line">             指定要创建的密钥类型。可以使用：&quot;rsa1&quot;(SSH-1) &quot;rsa&quot;(SSH-2) &quot;dsa&quot;(SSH-2)</span><br><span class="line">     -U reader</span><br><span class="line">             把现存的RSA私钥上传到智能卡 reader</span><br><span class="line">     -v      详细模式。ssh-keygen 将会输出处理过程的详细调试信息。常用于调试模数的产生过程。</span><br><span class="line">             重复使用多个 -v 选项将会增加信息的详细程度(最大3次)。</span><br><span class="line">     -W generator</span><br><span class="line">             指定在为 DH-GEX 测试候选模数时想要使用的 generator</span><br><span class="line">     -y      读取OpenSSH专有格式的公钥文件，并将OpenSSH公钥显示在 stdout 上。</span><br></pre></td></tr></table></figure><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH-密钥创建及密钥登录&quot;&gt;&lt;a href=&quot;#SSH-密钥创建及密钥登录&quot; class=&quot;headerlink&quot; title=&quot;SSH 密钥创建及密钥登录&quot;&gt;&lt;/a&gt;SSH 密钥创建及密钥登录&lt;/h1&gt;&lt;p&gt;本文基本引自这里：&lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="SSH" scheme="https://blog.zhimma.com/categories/SSH/"/>
    
    
      <category term="ssh" scheme="https://blog.zhimma.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Mac安装Swoole扩展问题记录</title>
    <link href="https://blog.zhimma.com/2018/11/30/mac%E5%AE%89%E8%A3%85swoole%E6%89%A9%E5%B1%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://blog.zhimma.com/2018/11/30/mac安装swoole扩展问题记录/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:12:54.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="openssl-ssl-h-39-file-not-found"><a href="#openssl-ssl-h-39-file-not-found" class="headerlink" title="openssl/ssl.h&#39; file not found"></a><code>openssl/ssl.h&#39; file not found</code></h2><p><code>/private/tmp/pear/temp/swoole/include/swoole.h:438:10: fatal error: &#39;openssl/ssl.h&#39; file not found</code></p><p><strong>原因：</strong><br>openssl 未安装或 openssl 库不在标准位置中<br><strong>解决方案：</strong></p><ol><li><p>确认是否安装了 openssl<br><code>brew search openssl</code><br>若未安装则执行命令<code>brew install openssl</code>进行安装</p></li><li><p>确认 openssl 库是否在标准位置中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">☁  ~ ls /usr/local/include/openssl</span><br><span class="line">☁  ~ No such file or directory</span><br></pre></td></tr></table></figure><p>这就是问题所在了，找到 openssl/include/openssl 目录，并 cp 到 /usr/local/include 目录中。</p><p><code>☁  ~  ln -s /usr/local/Cellar/openssl/1.0.2p/include/openssl/ /usr/local/include/</code></p><p>一般情况下就可以解决该问题了。</p><p>但是，也可能会遇到很诡异的状况，上步没有解决问题，依然找不到 openssl/ssl.h 等文件<br>复制 openssl 源文件到 swoole 的源码目录中，编译就可以了。</p><p><code>cp -R  /usr/local/Cellar/openssl/1.0.2p/include/openssl swoole-src-2.1.3/include</code></p><p>这个肯定能解决问题了</p></li></ol><h2 id="Enable-openssl-support-require-openssl-library"><a href="#Enable-openssl-support-require-openssl-library" class="headerlink" title="Enable openssl support, require openssl library."></a><code>Enable openssl support, require openssl library.</code></h2><p><code>/private/tmp/pear/temp/swoole/php_swoole.h:137:2: error: &quot;Enable openssl support, require openssl library.&quot;</code></p><p>上面的问题解决了，再次<code>pecl install swoole</code>时候报了这个错，找了很久都么有找到解决方案，偶然看到pecl 安装的过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enable debug/trace log support? [no] : yes</span><br><span class="line">enable sockets supports? [no] : yes</span><br><span class="line">enable openssl support? [no] : yes</span><br><span class="line">enable http2 support? [no] : yes</span><br><span class="line">enable async-redis support? [no] : yes</span><br><span class="line">enable mysqlnd support? [no] : yes</span><br><span class="line">enable postgresql coroutine client support? [no] : no</span><br><span class="line">building in /private/tmp/pear/temp/pear-build-zhimmaSwGIQ1/swoole-4.2.1</span><br><span class="line">running: /private/tmp/pear/temp/swoole/configure --with-php-config=/usr/local/opt/php@7.1/bin/php-config --enable-debug-log=yes --enable-sockets=yes --enable-openssl=yes --enable-http2=yes --enable-async-redis=yes --enable-mysqlnd=yes --enable-coroutine-postgresql=no</span><br></pre></td></tr></table></figure><p>，于是猜想如果指定<code>openssl</code>的目录，是否可以解决，先看看<code>openssl</code>目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  which openssl</span><br><span class="line">/usr/local/opt/openssl/bin/openssl</span><br></pre></td></tr></table></figure><p>于是安装过程就变成下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enable debug/trace log support? [no] : yes</span><br><span class="line">enable sockets supports? [no] : yes</span><br><span class="line">enable openssl support? [no] : yes --with-openssl-dir=/usr/local/opt/openssl/bin/openssl</span><br><span class="line">enable http2 support? [no] : yes</span><br><span class="line">enable async-redis support? [no] : yes</span><br><span class="line">enable mysqlnd support? [no] : yes</span><br><span class="line">enable postgresql coroutine client support? [no] : no</span><br><span class="line">building in /private/tmp/pear/temp/pear-build-zhimmaN9CyFV/swoole-4.2.1</span><br><span class="line">running: /private/tmp/pear/temp/swoole/configure --with-php-config=/usr/local/opt/php@7.1/bin/php-config --enable-debug-log=yes --enable-sockets=yes --enable-openssl=yes --with-openssl-dir=/usr/local/opt/openssl/bin/openssl --enable-http2=yes --enable-async-redis=yes --enable-mysqlnd=yes --enable-coroutine-postgresql=no</span><br></pre></td></tr></table></figure><p>错误解决</p><h2 id="Enable-http2-support-require-nghttp2-library"><a href="#Enable-http2-support-require-nghttp2-library" class="headerlink" title="Enable http2 support, require nghttp2 library."></a><code>Enable http2 support, require nghttp2 library.</code></h2><p><code>/private/tmp/pear/temp/swoole/php_swoole.h:148:2: error: &quot;Enable http2 support, require nghttp2 library.</code></p><p><strong>解决方案：</strong></p><p><code>brew install nghttp2</code></p><blockquote><p>未能解决</p></blockquote><h2 id="hiredis-hiredis-h-39-file-not-found"><a href="#hiredis-hiredis-h-39-file-not-found" class="headerlink" title="hiredis/hiredis.h&#39; file not found"></a><code>hiredis/hiredis.h&#39; file not found</code></h2><p><code>/private/tmp/pear/temp/swoole/swoole_redis.c:20:10: fatal error: hiredis/hiredis.h&#39; file not found</code></p><p><strong>解决方案：</strong></p><p><code>brew install hiredis</code></p><h2 id="编译参数"><a href="#编译参数" class="headerlink" title="编译参数"></a>编译参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">--disable-option-checking  ignore unrecognized --enable/--with options</span><br><span class="line">  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)</span><br><span class="line">  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]</span><br><span class="line">  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]</span><br><span class="line">  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)</span><br><span class="line">  --with-libdir=NAME      Look for libraries in .../NAME rather than .../lib</span><br><span class="line">  --with-php-config=PATH  Path to php-config php-config</span><br><span class="line">  --enable-swoole-debug   Enable swoole debug</span><br><span class="line">  启用swoole的调试日志。不要在生产环境中启用此配置。</span><br><span class="line">  --enable-trace-log   Enable swoole trace log</span><br><span class="line">  --enable-sockets        Do you have sockets extension?</span><br><span class="line">  启用对 sockets 的支持。依赖 sockets</span><br><span class="line">  --enable-async-redis    Do you have hiredis?</span><br><span class="line">  启用对异步Redis客户端的支持。依赖 hiredis</span><br><span class="line">  --enable-coroutine-postgresql    Do you install postgresql?</span><br><span class="line">  启用协程 Postgresql 客户端，依赖 libpq</span><br><span class="line">  --enable-openssl        Use openssl?</span><br><span class="line">  启用openssl支持。依赖 libssl.so</span><br><span class="line">  --enable-http2          Use http2.0?</span><br><span class="line">  启用HTTP2的支持。依赖 nghttp2</span><br><span class="line">  --enable-thread         Experimental: Use thread?</span><br><span class="line">  启用线程支持 //实验性功能。请勿在生产环境中使用此功能</span><br><span class="line">  --enable-hugepage       Experimental: Use hugepage?</span><br><span class="line">  启用 hugepage //使用大内存页优化性能，具体鸟哥在他的博客中讲到。</span><br><span class="line">  如果已经开启了 jemalloc，再开启hugepage 印象性能</span><br><span class="line">  https://blog.digitalocean.com/transparent-huge-pages-and-alternative-memory-allocators/</span><br><span class="line">  实验性功能。请勿在生产环境中使用此功能</span><br><span class="line">  --enable-swoole         Enable swoole support</span><br><span class="line">  --enable-swoole-static    Enable swoole static compile support</span><br><span class="line">  --with-swoole           With swoole support</span><br><span class="line">  --with-libpq-dir=DIR    Include libpq support (requires libpq &gt;= 9.5)</span><br><span class="line">  --with-openssl-dir=DIR    Include OpenSSL support (requires OpenSSL &gt;= 0.9.6)</span><br><span class="line">  设置openssl库的路径，例如：--with-openssl-dir=/opt/openssl/.</span><br><span class="line">  --with-jemalloc-dir=DIR    Include jemalloc support</span><br><span class="line">  使用 jemalloc 进行内存优化支持</span><br><span class="line">  --enable-mysqlnd       Do you have mysqlnd?</span><br><span class="line">  启用对 mysqlnd 的支持，依赖 mysqlnd</span><br><span class="line">  --enable-coroutine      Enable coroutine (requires PHP &gt;= 5.5)</span><br><span class="line">  启用协程</span><br><span class="line">  --enable-asan      Enable asan</span><br><span class="line">  启用 Address-Sanitizier 内存检测工具 //只有开启debug才有效</span><br><span class="line">  --enable-picohttpparser     Experimental: Do you have picohttpparser?</span><br><span class="line">  启用 picohttpparser 支持 //这是一个超高性能的http解析器，实验性功能。请勿在生产环境中使用此功能</span><br><span class="line">  --enable-timewheel     Experimental: Enable timewheel heartbeat?</span><br><span class="line">  启用时间轮算法并优化心跳算法 //实验性功能。请勿在生产环境中使用此功能</span><br><span class="line">  --enable-debug,  compile with debug symbols</span><br><span class="line">  编译时加入符号表 //使用gdb调试时有用</span><br><span class="line">  --enable-shared=PKGS    Build shared libraries default=yes</span><br><span class="line">  --enable-static=PKGS    Build static libraries default=yes</span><br><span class="line">  --enable-fast-install=PKGS</span><br><span class="line">                          Optimize for fast installation default=yes</span><br><span class="line">  --with-gnu-ld           Assume the C compiler uses GNU ld default=no</span><br><span class="line">  --disable-libtool-lock  Avoid locking (might break parallel builds)</span><br><span class="line">  --with-pic              Try to use only PIC/non-PIC objects default=use both</span><br><span class="line">  --with-tags=TAGS        Include additional configurations automatic</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;openssl-ssl-h-39-file-not-found&quot;&gt;&lt;a href=&quot;#openssl-ssl-h-39-file-not-found&quot; class=&quot;headerlink&quot; title=&quot;openssl/ssl.h&amp;#39; file not fo
      
    
    </summary>
    
      <category term="Mac" scheme="https://blog.zhimma.com/categories/Mac/"/>
    
      <category term="Swoole" scheme="https://blog.zhimma.com/categories/Mac/Swoole/"/>
    
    
      <category term="Swoole" scheme="https://blog.zhimma.com/tags/Swoole/"/>
    
      <category term="Mac" scheme="https://blog.zhimma.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>MySQL中按照姓名或者中文首字母区间查询排序</title>
    <link href="https://blog.zhimma.com/2018/11/30/mysql%E4%B8%AD%E6%8C%89%E7%85%A7%E5%A7%93%E5%90%8D%E6%88%96%E8%80%85%E4%B8%AD%E6%96%87%E9%A6%96%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4%E6%9F%A5%E8%AF%A2%E6%8E%92%E5%BA%8F/"/>
    <id>https://blog.zhimma.com/2018/11/30/mysql中按照姓名或者中文首字母区间查询排序/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:14:33.002Z</updated>
    
    <content type="html"><![CDATA[<p>英文26个字母中除了i,u,v三个字母不能成为汉语拼音的首字母外,其它的字母都可以。<br>先上一个表格,说明下各个字母字母的拼音编码的开始值和结束值</p><a id="more"></a><table><thead><tr><th style="text-align:center">字母</th><th style="text-align:center">起值</th><th style="text-align:center">止值</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">45217</td><td style="text-align:center">45252</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">45253</td><td style="text-align:center">45760</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">45761</td><td style="text-align:center">46317</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">46318</td><td style="text-align:center">46825</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">46826</td><td style="text-align:center">47009</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">47010</td><td style="text-align:center">47296</td></tr><tr><td style="text-align:center">G</td><td style="text-align:center">47297</td><td style="text-align:center">47613</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">47614</td><td style="text-align:center">48118</td></tr><tr><td style="text-align:center">J</td><td style="text-align:center">48119</td><td style="text-align:center">49061</td></tr><tr><td style="text-align:center">K</td><td style="text-align:center">49062</td><td style="text-align:center">49323</td></tr><tr><td style="text-align:center">L</td><td style="text-align:center">49324</td><td style="text-align:center">49895</td></tr><tr><td style="text-align:center">M</td><td style="text-align:center">49896</td><td style="text-align:center">50370</td></tr><tr><td style="text-align:center">N</td><td style="text-align:center">50371</td><td style="text-align:center">50613</td></tr><tr><td style="text-align:center">O</td><td style="text-align:center">50614</td><td style="text-align:center">50621</td></tr><tr><td style="text-align:center">P</td><td style="text-align:center">50622</td><td style="text-align:center">50905</td></tr><tr><td style="text-align:center">Q</td><td style="text-align:center">50906</td><td style="text-align:center">51386</td></tr><tr><td style="text-align:center">R</td><td style="text-align:center">51387</td><td style="text-align:center">51445</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">51446</td><td style="text-align:center">52217</td></tr><tr><td style="text-align:center">T</td><td style="text-align:center">52218</td><td style="text-align:center">52697</td></tr><tr><td style="text-align:center">W</td><td style="text-align:center">52698</td><td style="text-align:center">52979</td></tr><tr><td style="text-align:center">X</td><td style="text-align:center">52980</td><td style="text-align:center">53688</td></tr><tr><td style="text-align:center">Y</td><td style="text-align:center">53689</td><td style="text-align:center">54480</td></tr><tr><td style="text-align:center">Z</td><td style="text-align:center">54481</td><td style="text-align:center">55289</td></tr></tbody></table><p>用途：<br>假如需要查询数据库中 以A-G字母开头的省,并且按照字母顺序排序：<br>数据库中数据<br><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/database/sql1.jpg" alt="数据库中数据"></p><p>需要的结果</p><p><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/database/sql2.jpg" alt="需要的结果"></p><p>类似这种结构或者这种数据排序,我们直接可以执行下面的sql语句查询</p><p><code>select * from wr_province where CONV(HEX(left(CONVERT(province_name USING gbk),1)),16,10) between 45217 and 47613 ORDER BY convert(province_name USING gbk) asc;</code></p><p><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/database/sql3.jpg" alt="sql结果"></p><p>下面有一个我在自己项目中使用的例子,用的是循环查询,大家可以看看结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$sort = array(</span><br><span class="line">    &apos;A-G&apos; =&gt; array(&apos;45217&apos;, &apos;47613&apos;),</span><br><span class="line">    &apos;H-K&apos; =&gt; array(&apos;47614&apos;, &apos;49323&apos;),</span><br><span class="line">    &apos;L-S&apos; =&gt; array(&apos;49324&apos;, &apos;52217&apos;),</span><br><span class="line">    &apos;T-Z&apos; =&gt; array(&apos;52218&apos;, &apos;55289&apos;)</span><br><span class="line">);</span><br><span class="line">$model = D(&apos;Province&apos;);</span><br><span class="line">$array = array();</span><br><span class="line">foreach ($sort as $key =&gt; $value)&#123;</span><br><span class="line">    $sql = &quot;select * from wr_province where CONV(HEX(left(CONVERT(province_name USING gbk),1)),16,10) between &#123;$value[0]&#125; and &#123;$value[1]&#125; ORDER BY convert(province_name USING gbk) asc&quot;;</span><br><span class="line">    $data = $model-&gt;query($sql);</span><br><span class="line">    foreach ($data as $value)&#123;</span><br><span class="line">        $array[$key][] = array(&apos;code&apos;=&gt;$value[&apos;province_id&apos;],&apos;address&apos;=&gt;$value[&apos;province_name&apos;]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">debug(json_encode($array));</span><br><span class="line">//结果：</span><br></pre></td></tr></table></figure><p><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/database/sql4.png" alt="sql结果"></p><p>满足需求;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;英文26个字母中除了i,u,v三个字母不能成为汉语拼音的首字母外,其它的字母都可以。&lt;br&gt;先上一个表格,说明下各个字母字母的拼音编码的开始值和结束值&lt;/p&gt;
    
    </summary>
    
      <category term="Mysql" scheme="https://blog.zhimma.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://blog.zhimma.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>PHP-FPM如何合理设置max_chindren和pm模式，包括开启status监听</title>
    <link href="https://blog.zhimma.com/2018/11/30/php-fpm%E5%A6%82%E4%BD%95%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AEmax_chindren%E5%92%8Cpm%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%8C%85%E6%8B%AC%E5%BC%80%E5%90%AFstatus%E7%9B%91%E5%90%AC/"/>
    <id>https://blog.zhimma.com/2018/11/30/php-fpm如何合理设置max_chindren和pm模式，包括开启status监听/</id>
    <published>2018-11-29T16:00:00.000Z</published>
    <updated>2019-01-24T09:16:33.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="php-fpm如何合理设置max-chindren和pm模式，包括开启status监听"><a href="#php-fpm如何合理设置max-chindren和pm模式，包括开启status监听" class="headerlink" title="php-fpm如何合理设置max_chindren和pm模式，包括开启status监听"></a>php-fpm如何合理设置max_chindren和pm模式，包括开启status监听</h2><h3 id="开启status获得执行状态"><a href="#开启status获得执行状态" class="headerlink" title="开启status获得执行状态"></a>开启status获得执行状态</h3><h4 id="启用php-fpm状态功能"><a href="#启用php-fpm状态功能" class="headerlink" title="启用php-fpm状态功能"></a>启用php-fpm状态功能</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/php-fpm.d/www.conf</span><br><span class="line">修改：</span><br><span class="line">pm.status_path = /status</span><br></pre></td></tr></table></figure><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ ^/status$</span></span><br><span class="line"><span class="regexp"></span>    &#123;</span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重启nginx和php-fpm"><a href="#重启nginx和php-fpm" class="headerlink" title="重启nginx和php-fpm"></a>重启nginx和php-fpm</h4><h4 id="打开status页面"><a href="#打开status页面" class="headerlink" title="打开status页面"></a>打开status页面</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac ~]<span class="comment"># curl http://visit.ma/status</span></span><br><span class="line">pool:                 www</span><br><span class="line">process manager:      dynamic</span><br><span class="line">start time:           <span class="number">23</span>/Jul/<span class="number">2018</span>:<span class="number">15</span>:<span class="number">32</span>:<span class="number">09</span> +<span class="number">0800</span></span><br><span class="line">start since:          <span class="number">1055</span></span><br><span class="line">accepted conn:        <span class="number">9</span></span><br><span class="line">listen queue:         <span class="number">0</span></span><br><span class="line">max listen queue:     <span class="number">0</span></span><br><span class="line">listen queue len:     <span class="number">128</span></span><br><span class="line">idle processes:       <span class="number">5</span></span><br><span class="line">active processes:     <span class="number">1</span></span><br><span class="line">total processes:      <span class="number">6</span></span><br><span class="line">max active processes: <span class="number">1</span></span><br><span class="line">max children reached: <span class="number">0</span></span><br><span class="line">slow requests:        <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h4><p><strong>pool</strong> – fpm池子名称，大多数为www<br><strong>process manager</strong> – 进程管理方式,值：static, dynamic or ondemand. dynamic<br><strong>start time</strong> – 启动日期,如果reload了php-fpm，时间会更新<br><strong>start since</strong> – 运行时长<br><strong>accepted conn</strong> – 当前池子接受的请求数<br><strong>listen queue</strong> – 请求等待队列，如果这个值不为0，那么要增加FPM的进程数量<br><strong>max listen queue</strong> – 请求等待队列最高的数量<br><strong>listen queue len</strong> – socket等待队列长度<br><strong>idle processes</strong> – 空闲进程数量<br><strong>active processes</strong> – 活跃进程数量<br>total processes – 总进程数量<br><strong>max active processes</strong> – 最大的活跃进程数量（FPM启动开始算）<br><strong>max children reached</strong>  - 大道进程最大数量限制的次数，如果这个数量不为0，那说明你的最大进程数量太小了，请改大一点。<br><strong>slow requests</strong> – 启用了php-fpm slow-log，缓慢请求的数量</p><h4 id="php-fpm其他参数"><a href="#php-fpm其他参数" class="headerlink" title="php-fpm其他参数"></a>php-fpm其他参数</h4><p><strong>php-fpm</strong>状态页比较个性化的一个地方是它可以带参数，可以带参数<strong>json</strong>、<strong>xml</strong>、<strong>html</strong>并且前面三个参数可以分别和<strong>full</strong>做一个组合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">curl http://visit.ma/status?json</span><br><span class="line">curl http://visit.ma/status?xml</span><br><span class="line">curl http://visit.ma/status?html</span><br><span class="line">curl http://visit.ma/status?full</span><br><span class="line"></span><br><span class="line">[root@b04f945297ac ~]# curl http://visit.ma/status?full</span><br><span class="line">pool:                 www</span><br><span class="line">process manager:      dynamic</span><br><span class="line">start time:           23/Jul/2018:15:32:09 +0800</span><br><span class="line">start since:          1240</span><br><span class="line">accepted conn:        10</span><br><span class="line">listen queue:         0</span><br><span class="line">max listen queue:     0</span><br><span class="line">listen queue len:     128</span><br><span class="line">idle processes:       5</span><br><span class="line">active processes:     1</span><br><span class="line">total processes:      6</span><br><span class="line">max active processes: 1</span><br><span class="line">max children reached: 0</span><br><span class="line">slow requests:        0</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  5466</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           23/Jul/2018:15:32:09 +0800</span><br><span class="line">start since:          1240</span><br><span class="line">requests:             2</span><br><span class="line">request duration:     99</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  2097152</span><br><span class="line">************************</span><br><span class="line">pid:                  5467</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           23/Jul/2018:15:32:09 +0800</span><br><span class="line">start since:          1240</span><br><span class="line">requests:             2</span><br><span class="line">request duration:     184</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status?full</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  2097152</span><br></pre></td></tr></table></figure><p>这里重点说下<strong>full</strong>参数详解</p><p><strong>pid</strong> – 进程PID，可以单独kill这个进程. You can use this PID to kill a long running process.<br><strong>state</strong> – 当前进程的状态 (Idle, Running, …)<br><strong>start time</strong> – 进程启动的日期<br><strong>start since</strong> – 当前进程运行时长<br><strong>requests</strong> – 当前进程处理了多少个请求<br><strong>request duration</strong> – 请求时长（微妙）<br>request method – 请求方法 (GET, POST, …)<br><strong>request URI</strong> – 请求URI<br><strong>content length</strong> – 请求内容长度 (仅用于 POST)<br><strong>user</strong> – 用户 (PHP_AUTH_USER) (or ‘-’ 如果没设置)<br><strong>script</strong> – PHP脚本 (or ‘-’ if not set)<br><strong>last request cpu</strong> – 最后一个请求CPU使用率<br><strong>last request memorythe</strong> - 上一个请求使用的内存</p><h3 id="合理设置max-chindren和pm模式"><a href="#合理设置max-chindren和pm模式" class="headerlink" title="合理设置max_chindren和pm模式"></a>合理设置max_chindren和pm模式</h3><p><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Nginx%2BPHP/htop.png" alt="htop"></p><p>使用htop命令查看单个php-fpm所申请的VIRT大小，我32G服务器是400左右（实际要除以8=M，就是：50M左右），如果按照每个进程消耗50M*1.5倍=75M左右，如果你的服务器内存是32G，我们假设可用于php-fpm的内存为60%=20G，则：20*1024/75=273，所以，一般我们建议max_chindren最大为273，最好还是设置为：8的倍数，所以我设置为256.</p><p>然后我们可以根据域名/status的结果来合理设置其他参数（<strong>pm.start_servers</strong>和<strong>pm.min_spare_servers</strong>和<strong>pm.max_spare_servers</strong>）</p><p>在php.ini中，我们可以看到<strong>memory_limit</strong>有一句这样的原文，<code>Maximum amount of memory a script may consume (128MB)</code>，就是说单个进程使用的最大内存大小，这个参数吧，当然不能低于刚刚计算的75M了，一般我们可以设置为3倍，则75*3=225M左右（建议：128，256，512，1024…）</p><p>这里假如有攻击的话，max_chindren=256，memory_limit=256，256*256=64G，很明显会导致内存爆满，所以如果想又保持性能，又能一定程度上防止内存爆满，可以将max_chindren设置的低一点，memory_limit可以设置为每个进程消耗的值（一般不建议低于128M吧，如果是独立服务器的话）。</p><h4 id="PHP-FPM-子进程数量，是不是越多越好？"><a href="#PHP-FPM-子进程数量，是不是越多越好？" class="headerlink" title="PHP-FPM 子进程数量，是不是越多越好？"></a>PHP-FPM 子进程数量，是不是越多越好？</h4><p>当然不是，pm.max_chindren，进程多了，增加进程管理的开销以及上下文切换的开销。</p><p>更核心的是，<strong>能并发执行的 php-fpm 进程不会超过 cpu 个数</strong>。</p><p>如何设置，取决于你的代码</p><p>如果代码是 CPU 计算密集型的，pm.max_chindren 不能超过 CPU 的内核数。</p><p>如果不是，那么将 pm.max_chindren 的值大于 CPU 的内核数，是非常明智的。<br>国外技术大拿给出这么个公式：</p><p>在 N + 20% 和 M/m 之间。</p><p>N 是 CPU 内核数量。<br>M 是 PHP 能利用的内存数量。<br>m 是每个 PHP 进程平均使用的内存数量。<br>适用于 <strong>dynamic</strong> 方式。</p><p><strong>static方式：M/(m * 1.2)</strong></p><p>当然，还有一种保险的方式，来配置 max_children。适用于 static 方式。</p><p>先把 max_childnren 设置成一个比较大的值。<br>稳定运行一段时间后，观察 php-fpm 的 status 里的 max<br>active processes 是多少<br>然后把 max_children 配置比它大一些就可以了。<br>pm.max_requests：指的是每个子进程在处理了多少个请求数量之后就重启。</p><p>这个参数，理论上可以随便设置，但是为了预防内存泄漏的风险，还是设置一个合理的数比较好</p><p>所以，我的服务器32G内存设置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">memory_limit = 256M</span><br><span class="line">pm = dynamic</span><br><span class="line">pm.max_children = 256</span><br><span class="line">pm.start_servers = 32</span><br><span class="line">pm.min_spare_servers = 16</span><br><span class="line">pm.max_spare_servers = 32</span><br></pre></td></tr></table></figure><blockquote><p> pm.max_children：静态方式下开启的php-fpm进程数量。</p><p>pm.start_servers：动态方式下的起始php-fpm进程数量。</p><p>pm.min_spare_servers：动态方式下的最小php-fpm进程数量。</p><p>pm.max_spare_servers：动态方式下的最大php-fpm进程数量。</p><p><strong>如果dm设置为static，那么其实只有pm.max_children这个参数生效。系统会开启设置数量的php-fpm进程。</strong></p><p><strong>如果dm设置为static，那么其实只有pm.max_children这个参数生效。系统会开启设置数量的php-fpm进程。</strong></p></blockquote><p><a href="http://www.zhanghongliang.com/article/1300" target="_blank" rel="noopener">http://www.zhanghongliang.com/article/1300</a></p><p><a href="http://www.ttlsa.com/php/use-php-fpm-status-page-detail/" target="_blank" rel="noopener">http://www.ttlsa.com/php/use-php-fpm-status-page-detail/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;php-fpm如何合理设置max-chindren和pm模式，包括开启status监听&quot;&gt;&lt;a href=&quot;#php-fpm如何合理设置max-chindren和pm模式，包括开启status监听&quot; class=&quot;headerlink&quot; title=&quot;php-fp
      
    
    </summary>
    
      <category term="Nginx" scheme="https://blog.zhimma.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://blog.zhimma.com/tags/Nginx/"/>
    
      <category term="PHP-FPM" scheme="https://blog.zhimma.com/tags/PHP-FPM/"/>
    
  </entry>
  
</feed>
