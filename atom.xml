<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhimma</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-24T08:14:43.781Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhimma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac重启php-fpm失败</title>
    <link href="http://yoursite.com/2019/01/24/Mac%E9%87%8D%E5%90%AFphp-fpm%E5%A4%B1%E8%B4%A5/"/>
    <id>http://yoursite.com/2019/01/24/Mac重启php-fpm失败/</id>
    <published>2019-01-24T08:13:52.000Z</published>
    <updated>2019-01-24T08:14:43.781Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mac重启php-fpm失败"><a href="#Mac重启php-fpm失败" class="headerlink" title="Mac重启php-fpm失败"></a><a href="https://www.jianshu.com/p/c9306c69e8b4" target="_blank" rel="noopener">Mac重启php-fpm失败</a></h3><p>关闭</p><p><code>killall -HUP php-fpm</code></p><p>重启，这里报错，提示找不到文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  php-fpm</span><br><span class="line">[27-May-2018 11:27:47] ERROR: failed to open configuration file &apos;/private/etc/php-fpm.conf&apos;: No such file or directory (2)</span><br><span class="line">[27-May-2018 11:27:47] ERROR: failed to load configuration file &apos;/private/etc/php-fpm.conf&apos;</span><br><span class="line">[27-May-2018 11:27:47] ERROR: FPM initialization failed</span><br></pre></td></tr></table></figure><p>检查了下本机的php-fpm.conf放在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/etc/php/7.1/php-fpm.conf</span><br></pre></td></tr></table></figure><p>于是修改配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php-fpm --fpm-config /usr/local/etc/php/7.1/php-fpm.conf</span><br></pre></td></tr></table></figure><p>继续报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  php-fpm --fpm-config /usr/local/etc/php/7.1/php-fpm.conf</span><br><span class="line">[27-May-2018 11:28:47] ERROR: failed to open error_log (/usr/var/log/php-fpm.log): No such file or directory (2)</span><br><span class="line">[27-May-2018 11:28:47] ERROR: failed to post process the configuration</span><br><span class="line">[27-May-2018 11:28:47] ERROR: FPM initialization failed</span><br></pre></td></tr></table></figure><p>错误信息显示：不能正确的打开”日志“文件，原因是默认在/usr/var目录下工作，可以修改配置文件指定正确的日志文件路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php-fpm --fpm-config /usr/local/etc/php/7.1/php-fpm.conf --prefix /usr/local/var</span><br></pre></td></tr></table></figure><p>可以成功运行了，错误文件会放在 <code>/usr/local/var/log/php-fpm.log</code></p><p>[TOC]</p><h3 id="Mac-启动、停止、重启-Nginx-重启-php-fpm"><a href="#Mac-启动、停止、重启-Nginx-重启-php-fpm" class="headerlink" title="Mac 启动、停止、重启 Nginx,重启 php-fpm"></a><a href="https://www.yuanshidai.cc/archives/93" target="_blank" rel="noopener">Mac 启动、停止、重启 Nginx,重启 php-fpm</a></h3><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><hr><p>启动：<code>sudo nginx</code></p><p>停止：</p><figure class="highlight ps"><figcaption><span>-ef | grep nginxsudo kill -INT [进程号]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br><span class="line">sudo kill -INT [进程号]</span><br></pre></td></tr></table></figure><p>重启：<code>sudo nginx -s reload</code></p><blockquote><p>重启之前一定要 执行<code>nginx -t</code>检查配置文件是否有问题</p></blockquote><h4 id="php-fpm"><a href="#php-fpm" class="headerlink" title="php-fpm"></a>php-fpm</h4><hr><p>关闭</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep php-fpm</span><br><span class="line">sudo killall php-fpm</span><br></pre></td></tr></table></figure><p>重启</p><p><code>/usr/local/Cellar/php71/7.1.12_23/sbin/php71-fpm start</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Mac重启php-fpm失败&quot;&gt;&lt;a href=&quot;#Mac重启php-fpm失败&quot; class=&quot;headerlink&quot; title=&quot;Mac重启php-fpm失败&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.jianshu.com/p/c9306c69e
      
    
    </summary>
    
      <category term="Mac" scheme="http://yoursite.com/categories/Mac/"/>
    
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/11/14/PhpStorm%E4%B8%AD%E4%BD%BF%E7%94%A8PSR2%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83phpcbf%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E4%BF%AE%E6%AD%A3%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/11/14/PhpStorm中使用PSR2编码规范phpcbf脚本自动修正代码格式/</id>
    <published>2018-11-14T02:30:42.123Z</published>
    <updated>2018-11-14T03:52:20.017Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="安装CodeSniffer"><a href="#安装CodeSniffer" class="headerlink" title="安装CodeSniffer"></a>安装CodeSniffer</h2><h3 id="安装CodeSniffer-1"><a href="#安装CodeSniffer-1" class="headerlink" title="安装CodeSniffer"></a>安装CodeSniffer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install php-code-sniffer</span><br></pre></td></tr></table></figure><blockquote><p>安装完成后的路径:<code>/usr/local/Cellar/php-code-sniffer</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; ☁  bin  pwd</span><br><span class="line">&gt; /usr/local/Cellar/php-code-sniffer/<span class="number">3.3</span><span class="number">.1</span>/bin</span><br><span class="line">&gt; ☁  bin  ls</span><br><span class="line">&gt; phpcbf           phpcs</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="配置phpcbf"><a href="#配置phpcbf" class="headerlink" title="配置phpcbf"></a>配置phpcbf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./phpcs --config-set default_standard PSR2</span><br><span class="line">./phpcbf --config-set default_standard PSR2</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;☁ bin ls</span><br><span class="line">&gt;CodeSniffer.conf phpcbf           phpcs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="配置PhpStorm"><a href="#配置PhpStorm" class="headerlink" title="配置PhpStorm"></a>配置PhpStorm</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ol><li><p>打开<code>PhpStorm</code>的设置页（<code>File-&gt;Setting</code>或者<code>Command+,</code>），到<code>Editor/Code Style</code>页<code>PHP</code>中选择风格为 <code>PSR1/2</code></p><p><img src="http://zhimma.oss-cn-beijing.aliyuncs.com/md/1.jpg" alt=""></p></li><li><p>设置Code Sniffer</p><p><img src="http://zhimma.oss-cn-beijing.aliyuncs.com/md/2.jpg" alt=""></p><p>选择之前phpcs的路径，填写后可以点击Validate按钮验证</p></li><li><p><img src="http://zhimma.oss-cn-beijing.aliyuncs.com/md/3.jpg" alt=""></p></li></ol><p>现在使用<code>PhpStorm</code>的格式化，将会自动格式化成psr-2的风格</p><p><a href="https://qq52o.me/2460.html" target="_blank" rel="noopener">参考地址</a></p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;安装CodeSniffer&quot;&gt;&lt;a href=&quot;#安装CodeSniffer&quot; class=&quot;headerlink&quot; title=&quot;安装CodeSniffer&quot;&gt;&lt;/a&gt;安装CodeSniffer&lt;/h2&gt;&lt;h3 id=&quot;安装CodeSn
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/09/29/负载均衡实践/</id>
    <published>2018-09-29T11:08:49.333Z</published>
    <updated>2018-09-29T11:08:49.333Z</updated>
    
    <content type="html"><![CDATA[<p>引用参考：<a href="https://juejin.im/post/5821c24e570c350060bef4c3" target="_blank" rel="noopener">https://juejin.im/post/5821c24e570c350060bef4c3</a></p><h2 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h2><p>windows 下4台服务器，真实机IP：192.168.2.107，其中</p><table><thead><tr><th>服务器</th><th>IP</th><th>说明</th></tr></thead><tbody><tr><td>nginx1</td><td>172.17.0.3</td><td>nginx服务器1</td></tr><tr><td>nginx2</td><td>172.17.0.4</td><td>nginx服务器2</td></tr><tr><td>server1</td><td>172.17.0.5</td><td>服务器1</td></tr><tr><td>server2</td><td>172.17.0.6</td><td>服务器2</td></tr><tr><td>server3</td><td>172.17.0.7</td><td>服务器3</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\mma&gt;docker ps</span><br><span class="line">CONTAINER ID        PORTSNAMES</span><br><span class="line">73e6f2096612        6379/tcp, 0.0.0.0:201-&gt;22/tcp, 0.0.0.0:881-&gt;80/tcp, 0.0.0.0:3361-&gt;3306/tcp, 0.0.0.0:9004-&gt;9001/tcp                                           nginx1</span><br><span class="line">805ef8d42fa6        6379/tcp, 0.0.0.0:202-&gt;22/tcp, 0.0.0.0:882-&gt;80/tcp, 0.0.0.0:3362-&gt;3306/tcp, 0.0.0.0:9005-&gt;9001/tcp                                           nginx2</span><br><span class="line">e91b4a662023        6379/tcp, 0.0.0.0:203-&gt;22/tcp, 0.0.0.0:883-&gt;80/tcp, 0.0.0.0:3363-&gt;3306/tcp, 0.0.0.0:9006-&gt;9001/tcp                                           server1</span><br><span class="line">01bb4850cc8c        6379/tcp, 0.0.0.0:204-&gt;22/tcp, 0.0.0.0:884-&gt;80/tcp, 0.0.0.0:3364-&gt;3306/tcp, 0.0.0.0:9007-&gt;9001/tcp                                           server2</span><br><span class="line">e500cbd1efad        6379/tcp, 0.0.0.0:205-&gt;22/tcp, 0.0.0.0:885-&gt;80/tcp, 0.0.0.0:3365-&gt;3306/tcp, 0.0.0.0:9008-&gt;9001/tcpserver3</span><br></pre></td></tr></table></figure><blockquote><p>主要需要暴露http服务端口</p></blockquote><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>负载均衡，英文名称为Load Balance，其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p><p>我们知道单台服务器的性能是有上限的，当流量很大时，就需要使用多台服务器来共同提供服务，这就是所谓的集群。</p><p>负载均衡服务器，就是用来把经过它的流量，按照某种方法，分配到集群中的各台服务器上。这样一来不仅可以承担更大的流量、降低服务的延迟，还可以避免单点故障造成服务不可用。一般的反向代理服务器，都具备负载均衡的功能。</p><p>负载均衡功能可以由硬件来提供，比如以前的F5设备。也可以由软件来提供，LVS可以提供四层的负载均衡(利用IP和端口)，</p><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img src="https://zhimma.oss-cn-beijing.aliyuncs.com/Nginx/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png" alt="负载均衡"></p><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><h4 id="加权轮询"><a href="#加权轮询" class="headerlink" title="加权轮询"></a>加权轮询</h4><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p><p><img src="https://zhimma.oss-cn-beijing.aliyuncs.com/Nginx/%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2.png" alt="加权轮询"></p><blockquote><p>图中有两点需要注意，第一，如果可以把加权轮询算法分为先深搜索和先广搜索，那么nginx采用的是先深搜索算法，即将首先将请求都分给高权重的机器，直到该机器的权值降到了比其他机器低，才开始将请求分给下一个高权重的机器；第二，当所有后端机器都down掉时，nginx会立即将所有机器的标志位清成初始状态，以避免造成所有的机器都处在timeout的状态，从而导致整个前端被夯住。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> zhimma &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:883</span> weight=<span class="number">5</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:884</span> weight=<span class="number">6</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:885</span> weight=<span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    server&#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> zhimma.ma;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>         http://zhimma;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了 weight 之外，还有别的配置项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream phpServers &#123;  </span><br><span class="line">    server 192.168.2.107:883 weight=5 max_fails=1 fail_timeout=20 max_conns=100;</span><br><span class="line">    server 192.168.2.107:883 weight=6 backup down</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>max_fails</strong></p><blockquote><p>默认为1。某台Server允许请求失败的次数，超过最大次数后，在failtimeout时间内，新的请求将不会分配给这台机器。如果设置为0，Nginx会将这台Server置为永久无效状态，然后将请求发给定义了proxynextupstream, fastcginextupstream, uwsginextupstream, scginextupstream, and memcachednext_upstream指令来处理这次错误的请求。</p></blockquote><p><strong>fail_timeout</strong></p><blockquote><p>默认为10秒。某台Server达到maxfails次失败请求后，在failtimeout期间内，nginx会认为这台Server暂时不可用，不会将请求分配给它</p></blockquote><p><strong>backup</strong></p><blockquote><p>备份机，所有服务器挂了之后才会生效</p></blockquote><p><strong>down</strong></p><blockquote><p>标识某一台server不可用</p></blockquote><p><strong>max_conns</strong></p><blockquote><p>限制分配给某台Server处理的最大连接数量，超过这个数量，将不会分配新的连接给它。默认为0，表示不限制。注意：1.5.9之后的版本才有这个配置 表示最多给100这台Server分配1000个请求，如果这台Server正在处理1000个请求，nginx将不会分配新的请求给到它。假如有一个请求处理完了，还剩下999个请求在处理，这时nginx也会将新的请求分配给它。</p></blockquote><h4 id="3-IP-HASH"><a href="#3-IP-HASH" class="headerlink" title="3.IP HASH"></a>3.IP HASH</h4><h4 id="ip-hash-ip绑定"><a href="#ip-hash-ip绑定" class="headerlink" title="ip_hash(ip绑定)"></a>ip_hash(ip绑定)</h4><p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p><p><img src="https://zhimma.oss-cn-beijing.aliyuncs.com/Nginx/iphash.png" alt="ip_hash"></p><p>ip hash算法的核心实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(i = 0;i &lt; 3;i++)&#123;</span><br><span class="line">    hash = (hash * 113 + iphp-&gt;addr[i]) % 6271; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p = hash % iphp-&gt;rrp.peers-&gt;number;</span><br></pre></td></tr></table></figure><blockquote><p>从代码中可以看出，hash值既与ip有关又与后端机器的数量有关。经过测试，上述算法可以连续产生1045个互异的value，这是该算法的硬限制。对此nginx使用了保护机制，当经过20次hash仍然找不到可用的机器时，算法退化成轮询。因此，从本质上说，ip hash算法是一种变相的轮询算法，如果两个ip的初始hash值恰好相同，那么来自这两个ip的请求将永远落在同一台服务器上，这为均衡性埋下了很深的隐患。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> zhimma &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:883</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:884</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:885</span>;</span><br><span class="line">&#125;</span><br><span class="line">    server&#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> zhimma.ma;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>         http://zhimma;</span><br><span class="line">            <span class="comment">#如果服务器要获取客户端真实IP，可以用下三句设置主机头和客户端真实地址</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fair"><a href="#fair" class="headerlink" title="fair"></a>fair</h4><h4 id="通用hash、一致性hash"><a href="#通用hash、一致性hash" class="headerlink" title="通用hash、一致性hash"></a>通用hash、一致性hash</h4><h4 id="session-sticky"><a href="#session-sticky" class="headerlink" title="session_sticky"></a>session_sticky</h4><h2 id="配置详情"><a href="#配置详情" class="headerlink" title="配置详情"></a>配置详情</h2><h3 id="负载均衡服务器"><a href="#负载均衡服务器" class="headerlink" title="负载均衡服务器"></a>负载均衡服务器</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span>  nginx;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log <span class="literal">warn</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    <span class="attribute">upstream</span> zhimma &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:883</span>   weight=<span class="number">3</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:884</span>   weight=<span class="number">4</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:885</span>   weight=<span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    server&#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> zhimma.ma;</span><br><span class="line">        <span class="attribute">root</span>   /home/www/tourism/laravel_store/public;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">proxy_pass</span>         http://zhimma;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#   include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="业务服务器"><a href="#业务服务器" class="headerlink" title="业务服务器"></a>业务服务器</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@e91b4a662023 conf.d]# pwd </span><br><span class="line">/etc/nginx/conf.d</span><br><span class="line">[root@e91b4a662023 conf.d]# ls</span><br><span class="line">zhimma.ma.conf</span><br><span class="line">root@e91b4a662023 conf.d]# cat zhimma.ma.conf </span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  zhimma.ma;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## Root and index files.</span></span><br><span class="line">    <span class="comment"># 这里的路径对应自己项目路径，因为我是做了目录挂载，所以剩下2台服务器nginx的配置做了区分</span></span><br><span class="line">    <span class="comment"># 分别是/home/www/zhimma/server2和/home/www/zhimma/server3</span></span><br><span class="line">    <span class="attribute">root</span> /home/www/zhimma/server1;</span><br><span class="line">    <span class="attribute">index</span>  index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">            <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">            <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">            <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME    <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">            <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php<span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx ，配置hosts,访问<code>zhimma.ma:881</code>,就能看的切换的效果了</p><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引用参考：&lt;a href=&quot;https://juejin.im/post/5821c24e570c350060bef4c3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/5821c24e570c350060be
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8%E7%9A%84MySQL%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/09/29/基于Docker容器的MySQL主从配置/</id>
    <published>2018-09-29T11:08:49.330Z</published>
    <updated>2018-09-29T11:08:49.330Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="基于Docker容器的MySQL主从配置"><a href="#基于Docker容器的MySQL主从配置" class="headerlink" title="基于Docker容器的MySQL主从配置"></a>基于Docker容器的MySQL主从配置</h1><p>我本机的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY                                     TAG                 IMAGE ID           </span><br><span class="line">ssh_network_vim_lnmp_redis_swoole_supervisor   latest              6da5efb40932</span><br></pre></td></tr></table></figure><p>环境搭建及MySQL安装步骤省略，根据已有的镜像创建容器</p><ol><li><p>master数据库</p><p><code>docker run -it -d --privileged=true --name master -p 33060:3306 -p 220:22 -p 8080:80 -p 1024:1024 -p 16379:6379 -p 9001:9001 -v   E:\www\:/home/www ssh_network_vim_lnmp_redis_swoole_supervisor /usr/sbin/init</code></p></li><li><p>slave1数据库</p><p><code>docker run -it -d --privileged=true --name slave1 -p 33061:3306 -p 221:22 -p 8081:80 -p 2024:1024 -p 26379:6379 -p 9002:9001 -v   E:\www\:/home/www ssh_network_vim_lnmp_redis_swoole_supervisor /usr/sbin/init</code></p></li><li><p>slave2数据库</p><p><code>docker run -it -d --privileged=true --name slave2 -p 33062:3306 -p 222:22 -p 8082:80 -p 3024:1024 -p 36379:6379 -p 9003:9001 -v   E:\www\:/home/www ssh_network_vim_lnmp_redis_swoole_supervisor /usr/sbin/init</code></p><p>​</p><p>……  slaveN</p></li></ol><h2 id="binlog方式"><a href="#binlog方式" class="headerlink" title="binlog方式"></a>binlog方式</h2><h3 id="master数据库"><a href="#master数据库" class="headerlink" title="master数据库"></a>master数据库</h3><p>真实机IP：192.168.2.107   容器IP:172.17.0.2</p><h4 id="修改MySQL配置文件-my-cnf"><a href="#修改MySQL配置文件-my-cnf" class="headerlink" title="修改MySQL配置文件(my.cnf)"></a>修改MySQL配置文件(my.cnf)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log-bin=mysql-bin #启动二进制文件 </span><br><span class="line">server_id=1 #服务器ID</span><br></pre></td></tr></table></figure><p>附一份全一点的配置,指定需要同步的数据库和不需要同步的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=1</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">log-bin-index=master-bin.index</span><br><span class="line">binlog_format=mixed  // binlog 日志文件格式</span><br><span class="line">sync-binlog=1//</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">binlog-ignore-db=product</span><br><span class="line">binlog-do-db=test</span><br><span class="line">binlog-do-db=local</span><br></pre></td></tr></table></figure><p>重启MySQL；</p><h4 id="创建复制用户"><a href="#创建复制用户" class="headerlink" title="创建复制用户"></a>创建复制用户</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.<span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'zhimma'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span> <span class="keyword">ON</span> . <span class="keyword">TO</span> <span class="string">'zhimma'</span>@<span class="string">'%'</span>;</span><br><span class="line">或者</span><br><span class="line">2.  <span class="keyword">grant</span> <span class="keyword">replication</span> <span class="keyword">slave</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'zhimma'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123456'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">MASTER</span> <span class="keyword">STATUS</span>;</span><br></pre></td></tr></table></figure><h4 id="查看MySQL"><a href="#查看MySQL" class="headerlink" title="查看MySQL"></a>查看MySQL</h4><figure class="highlight plain"><figcaption><span>master status```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```mysql</span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000001 |      998 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>如果是项目中途使用主从复制，可以使用下面方法迁移数据</p><ol><li><p>锁定所有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; FLUSH TABLES WITH READ LOCK;</span><br><span class="line">Query OK, 0 rows affected (2.59 sec)</span><br></pre></td></tr></table></figure></li><li><p>备份表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac ~]# mysqldump -uroot -p123456 --all-databases -l -F &gt;/tmp/all_db.sql</span><br></pre></td></tr></table></figure></li><li><p>解锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UNLOCK TABLES; </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>传输数据到从库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 221/222 /tmp/all_db.sql root@192.168.2.107:/tmp</span><br></pre></td></tr></table></figure></li></ol><h3 id="slave数据库"><a href="#slave数据库" class="headerlink" title="slave数据库"></a>slave数据库</h3><h4 id="修改server-uuid"><a href="#修改server-uuid" class="headerlink" title="修改server-uuid"></a>修改server-uuid</h4><p>将<code>/var/lib/mysql/auto.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[auto]</span><br><span class="line">server-uuid=f781e2b4-28e1-11e8-a1c0-0242ac110001</span><br></pre></td></tr></table></figure><h4 id="修改MySQL配置文件-my-cnf-1"><a href="#修改MySQL配置文件-my-cnf-1" class="headerlink" title="修改MySQL配置文件(my.cnf)"></a>修改MySQL配置文件(my.cnf)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log-bin=mysql-bin #启动二进制文件 </span><br><span class="line">server_id=101 #服务器ID</span><br></pre></td></tr></table></figure><p>重启MySQL；</p><h4 id="导入主备份文件"><a href="#导入主备份文件" class="headerlink" title="导入主备份文件"></a>导入主备份文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@9ae039d46474 tmp]# mysql -uroot -p123456 &lt; /tmp/all_db.sql</span><br></pre></td></tr></table></figure><h4 id="开启slave同步"><a href="#开启slave同步" class="headerlink" title="开启slave同步"></a>开启slave同步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=&apos;192.168.2.107&apos;,MASTER_PORT=33060, MASTER_USER=&apos;zhimma&apos;, MASTER_PASSWORD=&apos;123456&apos;, MASTER_LOG_FILE=&apos;mysql-bin.000001&apos;, MASTER_LOG_POS=998;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">CHANGE MASTER TO MASTER_HOST=&apos;172.17.0.2&apos;, MASTER_USER=&apos;zhimma&apos;, MASTER_PASSWORD=&apos;123456&apos;, MASTER_LOG_FILE=&apos;mysql-bin.000001&apos;, MASTER_LOG_POS=998;</span><br><span class="line"></span><br><span class="line">start slave</span><br></pre></td></tr></table></figure><h4 id="查看是否同步成功slave连接master成功"><a href="#查看是否同步成功slave连接master成功" class="headerlink" title="查看是否同步成功slave连接master成功"></a>查看是否同步成功slave连接master成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.43 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Queueing master event to the relay log</span><br><span class="line">                  Master_Host: 192.168.2.107</span><br><span class="line">                  Master_User: zhimma</span><br><span class="line">                  Master_Port: 33060</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 4</span><br><span class="line">               Relay_Log_File: 06e5a050e74b-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">              Slave_IO_Running: Yes</span><br><span class="line">              Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 998</span><br><span class="line">              Relay_Log_Space: 1483</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: f781e2b4-28e1-11e8-a1c0-0242ac110002</span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.20 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>同步成功</p><p><a href="http://www.cnblogs.com/clsn/p/8150036.html" target="_blank" rel="noopener">http://www.cnblogs.com/clsn/p/8150036.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;基于Docker容器的MySQL主从配置&quot;&gt;&lt;a href=&quot;#基于Docker容器的MySQL主从配置&quot; class=&quot;headerlink&quot; title=&quot;基于Docker容器的MySQL主从配置&quot;&gt;&lt;/a&gt;基于Docker容器的My
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/redis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/09/29/redis安装与配置/</id>
    <published>2018-09-29T11:08:49.329Z</published>
    <updated>2018-09-29T11:08:49.329Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="redis安装与配置"><a href="#redis安装与配置" class="headerlink" title="redis安装与配置"></a>redis安装与配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p><a href="https://redis.io/download" target="_blank" rel="noopener">redis下载地址</a></p></li><li><p>解压缩<code>tar -zxf redis-4.0.2.tar.gz</code></p></li><li><p><code>cd redis-4.0.2</code></p></li><li><p><code>make</code></p></li><li><p><code>cd src</code></p></li><li><p><code>make install</code></p><p>​</p></li></ul><p>到此就安装完成。但是，由于安装redis的时候，我们没有选择安装路径，故是默认位置安装。在此，我们可以将可执行文件和配置文件移动到习惯的目录。 </p><figure class="highlight plain"><figcaption><span>/usr/local </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/redis/bin </span><br><span class="line">mkdir -p /usr/local/redis/etc </span><br><span class="line">cd /usr/local/redis-4.0.2 </span><br><span class="line">mv ./redis.conf /usr/local/redis/etc </span><br><span class="line">cd src </span><br><span class="line">mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-dump redis-cli redis-server redis-sentinel /usr/local/redis/bin</span><br></pre></td></tr></table></figure><p><strong>比较重要的3个可执行文件</strong>：<br><strong>redis-server</strong>：Redis服务器程序<br><strong>redis-cli</strong>：Redis客户端程序，它是一个命令行操作工具。也可以使用telnet根据其纯文本协议操作。<br><strong>redis-benchmark</strong>：Redis性能测试工具，测试Redis在你的系统及配置下的读写性能</p><p><strong>Redis的启动命令：</strong><br><code>/usr/local/redis/bin/redis-server</code><br>或<br><code>cd /usr/local/redis/bin</code><br><code>./redis-server /usr/local/redis/etc/redis.conf</code>为redis-server指定配置文件</p><h3 id="Redis的配置"><a href="#Redis的配置" class="headerlink" title="Redis的配置"></a>Redis的配置</h3><p>下面列举了Redis中的一些常用配置项：<br>daemonize 如果需要将Redis服务以守护进程在后台运行，则把该项的值改为yes</p><p>pidfile 配置多个pid的地址，默认在/var/run/redis/pid</p><p>bind 绑定ip，设置后只接受来自该ip的请求</p><p>port 监听端口，默认是6379</p><p>timeout 客户端连接超时的设定，单位是秒</p><p>loglevel 分为4级，debug、verbose、notice、warning</p><p>logfile 配置log文件地址</p><p>databases 设置数据库的个数，默认使用的数据库为0</p><p>save 设置redis进行数据库镜像的频率</p><p>rdbcompression 在进行镜像备份时，是否进行压缩</p><p>Dbfilename 镜像备份文件的文件名</p><p>Dir 数据库镜像备份文件的存放路径</p><p>Slaveof 设置数据库为其他数据库的从数据库</p><p>Masterauth 主数据库连接需要的密码验证<br>Requirepass 设置登录时，需要使用的密码<br>Maxclients 设置同时连接的最大客户端数量<br>Maxmemory 设置redis能够使用的最大内存<br>Appendonly 开启append only模式<br>Appendfsync 设置对appendonly.aof文件同步的频率<br>vm-enabled 是否开启虚拟内存支持<br>vm-swap-file 设置虚拟内存的交换文件路径<br>vm-max-memory 设置redis能够使用的最大虚拟内存<br>vm-page-size 设置虚拟内存的页大小<br>vm-pages 设置交换文件的总的page数量<br>vm-max-threads 设置VMIO同时使用的线程数量<br>Glueoutputbuf 把小的输出缓存存放在一起<br>hash-max-zipmap-entries 设置hash的临界值<br>Activerehashing 重新hash</p><p><strong>修改redis的配置参数</strong>：<br>vi /usr/local/redis/etc/redis.conf<br>将daemonize no改为daemonize yes，保存退出。<br>再来启动redis服务器<br>cd /usr/local/redis/bin<br>./redis-server /usr/local/redis/etc/redis.conf 启动redis并指定配置文件</p><p>ps aux | grep redis 查看redis是否启动成功</p><p>netstat -tlun 查看主机的6379端口是否在使用（监听）</p><p>./redis-cli 打开redis的客户端</p><p>quit 退出redis的客户端</p><p>pkill redis-server 关闭redis服务器</p><p>./redis-cli shutdown 也可以通过这条命令关闭redis服务器</p><h3 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h3><p>只有两个步骤：</p><ol><li><p>设置redis.conf中<code>daemonize</code>为<strong>yes</strong>,确保守护进程开启。</p></li><li><p>编写开机自启动脚本</p><p>基本原理为：<br>系统开机启动时会去加载<code>/etc/init.d/</code>下面的脚本，通常而言每个脚本文件会自定义实现程序的启动；若想将新的程序开机自启动，只需在该目录下添加一个自定义启动程序的脚本，然后设置相应规则即可。<br>如在这里我们在<code>/etc/init.d/</code>下新建一个 redis 的脚本，开机启动时会去加载执行该脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx #!/bin/sh## Simple Redis init.d script conceived to work on Linux systems# as it does use of the /proc filesystem.REDISPORT=6379EXEC=/usr/local/redis/bin/redis-serverCLIEXEC=/usr/local/redis/bin/redis-cliPIDFILE=/var/run/redis_$&#123;REDISPORT&#125;.pidCONF=&quot;/usr/local/redis/etc/$&#123;REDISPORT&#125;.conf&quot;case &quot;$1&quot; in    start)        if [ -f $PIDFILE ]        then                echo &quot;$PIDFILE exists, process is already running or crashed&quot;        else                echo &quot;Starting Redis server...&quot;                $EXEC $CONF        fi        ;;    stop)</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>设置可执行权限：<code>chmod 755 redis</code></p></li><li><p>启动<code>/etc/init.d/redis start</code></p></li><li><p>设置开机自启动:<code>chkconfig redis on</code></p></li></ol><p><a href="https://blog.csdn.net/qq_38158631/article/details/78644274" target="_blank" rel="noopener">https://blog.csdn.net/qq_38158631/article/details/78644274</a></p><p><a href="https://blog.csdn.net/baidu_30000217/article/details/51558408" target="_blank" rel="noopener">https://blog.csdn.net/baidu_30000217/article/details/51558408</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;redis安装与配置&quot;&gt;&lt;a href=&quot;#redis安装与配置&quot; class=&quot;headerlink&quot; title=&quot;redis安装与配置&quot;&gt;&lt;/a&gt;redis安装与配置&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; cl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/SSH%20%E5%AF%86%E9%92%A5%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2018/09/29/SSH 密钥创建及密钥登录/</id>
    <published>2018-09-29T11:08:49.328Z</published>
    <updated>2018-09-29T11:08:49.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH-密钥创建及密钥登录"><a href="#SSH-密钥创建及密钥登录" class="headerlink" title="SSH 密钥创建及密钥登录"></a>SSH 密钥创建及密钥登录</h1><p>本文基本引自这里：<a href="https://blog.csdn.net/nahancy/article/details/79059135" target="_blank" rel="noopener">https://blog.csdn.net/nahancy/article/details/79059135</a></p><p>在我们平时使用Linux系统时候，通常使用的Linux SSH登录方式是用户名加密码的登录方式，今天来探讨另外的一种相对安全的登录方式——密钥登录</p><p>我们知道SSH登录是用的RSA非对称加密的，所以我们在SSH登录的时候就可以使用RSA密钥登录，SSH有专门创建SSH密钥的工具ssh-keygen，下面就来一睹风采。</p><p>首先进入Linux系统的用户目录下的.ssh目录下，root用户是/root/.ssh，普通用户是/home/您的用户名/.ssh，我们以root用户为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# cd /root/.ssh/</span><br><span class="line">[root@b04f945297ac .ssh]# ls</span><br><span class="line">known_hosts</span><br></pre></td></tr></table></figure><blockquote><p>上面是没有创建过ssh秘钥的样子</p></blockquote><p> 执行ssh-keygen命令创建密钥对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ssh-keygen -t rsa -b 4096</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): /root/.ssh/zhimma_id_rsa</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/zhimma_id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/zhimma_id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:WrIN4U/dk+1KdTxv0t5zFeXCeWWpvaNtFFMxbkDY2Cw root@b04f945297ac</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 4096]----+</span><br><span class="line">|            Bo oo|</span><br><span class="line">|           E +o.*|</span><br><span class="line">|      .     ..o*+|</span><br><span class="line">|     . . . . +=*o|</span><br><span class="line">|      + S . + o+B|</span><br><span class="line">|       X     + *+|</span><br><span class="line">|      o o   . * *|</span><br><span class="line">|           . o Bo|</span><br><span class="line">|            . . =|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><blockquote><p>-b 参数，指定了长度，也可以不加-b参数，直接使用ssh-keygen -t rsa</p><p>这里我重新命名了下秘钥文件名 zhimma_id_rsa</p></blockquote><p>密钥生成后会在当前目录下多出两个文件，zhimma_id_rsa和zhimma_id_rsa.pub，其中zhimma_id_rsa是私钥（敲黑板：这个很重要，不能外泄），zhimma_id_rsa.pub这个是公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ls</span><br><span class="line">known_hosts  zhimma_id_rsa  zhimma_id_rsa.pub</span><br><span class="line">[root@b04f945297ac .ssh]#</span><br></pre></td></tr></table></figure><h2 id="放置公钥"><a href="#放置公钥" class="headerlink" title="放置公钥"></a>放置公钥</h2><h3 id="ssh-copy-id"><a href="#ssh-copy-id" class="headerlink" title="ssh-copy-id"></a>ssh-copy-id</h3><p>把公钥拷贝到需要登录的远程服务器或Linux系统上，这里可以使用<code>ssh-copy-id</code></p><blockquote><p>ssh-copy-id默认端口是22，如果要重新指定端口，则使用<code>-p 端口号</code>命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ssh-copy-id -i /root/.ssh/zhimma_id_rsa.pub -p 203 root@192.168.2.107  </span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/zhimma_id_rsa.pub&quot;</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@192.168.2.107&apos;s password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh -p &apos;203&apos; &apos;root@192.168.2.107&apos;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><p>这样就把公钥加的指定的服务器上了</p><p>尝试登陆下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ssh -i /root/.ssh/zhimma_id_rsa -p 203 root@192.168.2.107</span><br><span class="line">Last login: Wed Jun  6 04:16:09 2018 from 172.17.0.1</span><br><span class="line">[root@e91b4a662023 ~]#</span><br></pre></td></tr></table></figure><p>登陆成功！</p><h3 id="手动放置"><a href="#手动放置" class="headerlink" title="手动放置"></a>手动放置</h3><p>进入远程服务器.ssh目录，创建authorized_keys 文件，赋权限600</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@01bb4850cc8c .ssh]# touch authorized_keys</span><br><span class="line">[root@01bb4850cc8c .ssh]# chmod -R 600 authorized_keys </span><br><span class="line">[root@01bb4850cc8c .ssh]# ls -al</span><br><span class="line">total 16</span><br><span class="line">drwx------ 1 root root 4096 Jun  6 07:02 .</span><br><span class="line">dr-xr-x--- 1 root root 4096 Apr 27 08:15 ..</span><br><span class="line">-rw------- 1 root root    0 Jun  6 07:02 authorized_keys</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jun  6 07:02 dd</span><br><span class="line">-rw-r--r-- 1 root root  824 Mar 16 08:59 known_hosts</span><br></pre></td></tr></table></figure><p>复制<code>zhimma_id_rsa.pub</code>的内容进入这个文件</p><p>尝试登陆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ssh -i /root/.ssh/zhimma_id_rsa -p 204 root@192.168.2.107</span><br><span class="line">Last login: Wed Jun  6 04:18:46 2018 from 172.17.0.1</span><br><span class="line">[root@01bb4850cc8c ~]#</span><br></pre></td></tr></table></figure><p>登陆成功！</p><h2 id="ssh-keygen可用的参数"><a href="#ssh-keygen可用的参数" class="headerlink" title="ssh-keygen可用的参数"></a>ssh-keygen可用的参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen可用的参数选项有：</span><br><span class="line">     -a trials  在使用 -T 对 DH-GEX 候选素数进行安全筛选时需要执行的基本测试数量。</span><br><span class="line">     -B      显示指定的公钥/私钥文件的 bubblebabble 摘要。</span><br><span class="line">     -b bits 指定密钥长度。对于RSA密钥，最小要求768位，默认是2048位。DSA密钥必须恰好是1024位(FIPS 186-2 标准的要求)。</span><br><span class="line">     -C comment 提供一个新注释</span><br><span class="line">     -c      要求修改私钥和公钥文件中的注释。本选项只支持 RSA1 密钥。</span><br><span class="line">             程序将提示输入私钥文件名、密语(如果存在)、新注释。</span><br><span class="line">     -D reader下载存储在智能卡 reader 里的 RSA 公钥。</span><br><span class="line"></span><br><span class="line">     -e      </span><br><span class="line">         读取OpenSSH的私钥或公钥文件，并以 RFC 4716 SSH 公钥文件格式在 stdout 上显示出来。</span><br><span class="line">              该选项能够为多种商业版本的 SSH 输出密钥。</span><br><span class="line">     -F hostname</span><br><span class="line">             在 known_hosts 文件中搜索指定的 hostname ，并列出所有的匹配项。</span><br><span class="line">             这个选项主要用于查找散列过的主机名/ip地址，还可以和 -H 选项联用打印找到的公钥的散列值。</span><br><span class="line">     -f filename</span><br><span class="line">             指定密钥文件名。</span><br><span class="line">     -G output_file</span><br><span class="line">             为 DH-GEX 产生候选素数。这些素数必须在使用之前使用 -T 选项进行安全筛选。</span><br><span class="line">     -g      在使用 -r 打印指纹资源记录的时候使用通用的 DNS 格式。</span><br><span class="line">     -H      对 known_hosts 文件进行散列计算。这将把文件中的所有主机名/ip地址替换为相应的散列值。</span><br><span class="line">             原来文件的内容将会添加一个&quot;.old&quot;后缀后保存。这些散列值只能被 ssh 和 sshd 使用。</span><br><span class="line">             这个选项不会修改已经经过散列的主机名/ip地址，因此可以在部分公钥已经散列过的文件上安全使用。</span><br><span class="line">     -i      读取未加密的SSH-2兼容的私钥/公钥文件，然后在 stdout 显示OpenSSH兼容的私钥/公钥。</span><br><span class="line">             该选项主要用于从多种商业版本的SSH中导入密钥。</span><br><span class="line">     -l      显示公钥文件的指纹数据。它也支持 RSA1 的私钥。</span><br><span class="line">             对于RSA和DSA密钥，将会寻找对应的公钥文件，然后显示其指纹数据。</span><br><span class="line">     -M memory</span><br><span class="line">             指定在生成 DH-GEXS 候选素数的时候最大内存用量(MB)。</span><br><span class="line"></span><br><span class="line">     -N new_passphrase</span><br><span class="line">             提供一个新的密语。</span><br><span class="line"></span><br><span class="line">     -P passphrase</span><br><span class="line">             提供(旧)密语。</span><br><span class="line">     -p      要求改变某私钥文件的密语而不重建私钥。程序将提示输入私钥文件名、原来的密语、以及两次输入新密语。</span><br><span class="line">     -q      安静模式。用于在 /etc/rc 中创建新密钥的时候。</span><br><span class="line">     -R hostname</span><br><span class="line">             从 known_hosts 文件中删除所有属于 hostname 的密钥。</span><br><span class="line">             这个选项主要用于删除经过散列的主机(参见 -H 选项)的密钥。</span><br><span class="line">     -r hostname</span><br><span class="line">             打印名为 hostname 的公钥文件的 SSHFP 指纹资源记录。</span><br><span class="line">     -S start</span><br><span class="line">             指定在生成 DH-GEX 候选模数时的起始点(16进制)。</span><br><span class="line">     -T output_file</span><br><span class="line">             测试 Diffie-Hellman group exchange 候选素数(由 -G 选项生成)的安全性。</span><br><span class="line">     -t type</span><br><span class="line">             指定要创建的密钥类型。可以使用：&quot;rsa1&quot;(SSH-1) &quot;rsa&quot;(SSH-2) &quot;dsa&quot;(SSH-2)</span><br><span class="line">     -U reader</span><br><span class="line">             把现存的RSA私钥上传到智能卡 reader</span><br><span class="line">     -v      详细模式。ssh-keygen 将会输出处理过程的详细调试信息。常用于调试模数的产生过程。</span><br><span class="line">             重复使用多个 -v 选项将会增加信息的详细程度(最大3次)。</span><br><span class="line">     -W generator</span><br><span class="line">             指定在为 DH-GEX 测试候选模数时想要使用的 generator</span><br><span class="line">     -y      读取OpenSSH专有格式的公钥文件，并将OpenSSH公钥显示在 stdout 上。</span><br></pre></td></tr></table></figure><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH-密钥创建及密钥登录&quot;&gt;&lt;a href=&quot;#SSH-密钥创建及密钥登录&quot; class=&quot;headerlink&quot; title=&quot;SSH 密钥创建及密钥登录&quot;&gt;&lt;/a&gt;SSH 密钥创建及密钥登录&lt;/h1&gt;&lt;p&gt;本文基本引自这里：&lt;a href=&quot;https://
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/Nginx%E4%B8%8EPHP%E7%9A%84%E4%BA%A4%E4%BA%92%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/09/29/Nginx与PHP的交互机制/</id>
    <published>2018-09-29T11:08:49.326Z</published>
    <updated>2018-09-29T11:08:49.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx与PHP的交互机制-1"><a href="#Nginx与PHP的交互机制-1" class="headerlink" title="Nginx与PHP的交互机制(1)"></a>Nginx与PHP的交互机制(1)</h1><p>from there <a href="https://www.awaimai.com/371.html" target="_blank" rel="noopener">https://www.awaimai.com/371.html</a></p><p>在搭建 LAMP/LNMP 服务器时，会经常遇到 PHP-FPM、FastCGI和CGI 这几个概念。如果对它们一知半解，很难搭建出高性能的服务器。接下来我们就以图形方式，解释这些概念之间的关系。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>在整个网站架构中，Web Server（如Apache）只是内容的分发者。举个栗子，如果客户端请求的是 index.html，那么Web Server会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。</p><p><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Nginx%2BPHP/php-nginx-1.png" alt="php-nginx-1"></p><p>如果请求的是 index.php，根据配置文件，Web Server知道这个不是静态文件，需要去找 PHP 解析器来处理，那么他会把这个请求简单处理，然后交给PHP解析器。</p><p><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Nginx%2BPHP/php-nginx-2.png" alt="php-nginx-2"></p><p>当Web Server收到 index.php 这个请求后，会启动对应的 CGI 程序，这里就是PHP的解析器。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程，Web server再把结果返回给浏览器。这就是一个完整的动态PHP Web访问流程</p><h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a><strong>CGI</strong></h2><p><strong>CGI</strong>是 Web Server 与 Web Application 之间数据交换的一种协议。<br>CGI全称是“公共网关接口”(Common Gateway Interface)，描述的是<strong>服务器和请求处理程序之间传输数据的一种标准</strong>（服务器与你的或其它机器上的程序进行“交谈”的一种工具）。 所以，<code>CGI</code>是一种协议。<code>CGI</code>可用于任何语言，只要该语言具有标准的输出、输入以及环境变量。如perl、php等语言。 以nginx和php为例，我们可以理解为，这是php在与nginx服务器之间交互时，对传输数据的一种约定。</p><p><strong>CGI的原理是什么?</strong><br>当需要请求使用网关的资源时，服务器会请辅助应用程序来处理请求（比如nginx会请php程序来处理请求）。 服务器会将辅助应用程序的数据传送给网关。然后网关会向服务器返回一条响应或者响应数据，服务器再将响应或响应数据转发给客户端。<br><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Nginx%2BPHP/cgi.png" alt="cgi"></p><p>由此我们可以清楚两点：</p><ol><li>服务器和网关是相互独立的应用程序</li><li>服务器是应用程序和网关之间的一座桥梁</li></ol><p>由此，我们可知<code>CGI</code>有一个致命的弱点，<strong>即应用程序的每次请求，都要引发一个全新的进程</strong>。所以，服务器和网关之间的分离会造成性能的 耗费，会限制使用<code>CGI</code>的服务器的性能，并且会加重服务端机器资源的负担。<br>好啦，重角要登场了。后来为了解决这个问题，出现了<code>FastCGI</code>，也就是快速的<code>CGI</code>。 接下来，我们再详细的了解下<code>FastCGI</code>。</p><h2 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a><strong>FastCGI</strong></h2><p> <strong>FastCGI</strong>:(Fast Common Gateway Interface),即快速通用网关接口，是一种让交互程序与Web服务器通信的协议。它是<code>CGI</code>的增强版本 <code>FastCGI</code>致力于减少网页服务器与CGI程序之间互动的开销，从而使服务器可以同时处理更多的网页请求。<br>以上来自维基百科，我们可以由此了解到，<code>FastCGI</code>，<strong>同<code>CGI</code>一样，也是一种协议，</strong>只不过它是<code>CGI</code>的增强版本。<br><strong>那<code>FastCGI</code>是如何增强性能的呢？</strong> <code>FastCGI</code>接口模拟了<code>CGI</code>，但<code>FastCGI</code>是作为持久守护进程运行的，消除了为每个请求建立或拆除新进程所带来的性能损耗。也就是允许，一个进程内可以处理多个请求。 也就说CGI解释器保持在内存中，并接受了<code>FastCGI</code>进程管理和调度，所以它可以提供更好的性能，可扩展性，故障切换等特点</p><p><strong>FastCGI的特点:</strong></p><ol><li>FastCGI与语言无关</li><li>FastCGI应用在进程中，独立于核心网络服务器，提供了一个比API环境更安全的环境。 APIs的代码和web服务器的应用的核心是 紧紧关联的。这也就意味着在API应用程序的错误可能会损坏其它应用程序或核心服务器。恶意API应用程序代码甚至可以窃取另一个应用程序或核心服务器密钥。</li><li>FastCGI技术目前支持PHP,C/C++, Java lanuage, Perl, Tcl, Python, SmallTalk, Ruby etc.. 它在Apache, ISS, Lighttpd和其他流行的 服务器中的相关模块都是可以使用的。FastCGI不依赖于任何服务器体系结构，所以即使服务器在技术上改变了，FastCGI还是稳定的</li></ol><p><strong>FastCGI的工作原理</strong></p><ol><li>Web Server 启动时载入FastCGI进程管理器 (IIS ISAPI 或Apache Module)</li><li>FastCGI进程管理器首先初始化自己，启动一批CGI解释器进程（可见多个php-cgi），然后等待来自Web Server的连接。</li><li>当Web Server中的一个客户端请求达到时， FastCGI进程管理器会选择并连接一个CGI解释器。Web server的CGI环境变量和标准输入会被送达FastCGI进程的php-cgi。</li><li>FastCGI子进程从同一连接完成返还给Web Server的标准输出和错误信息。当请求进程完成后，FastCGI进程会关闭此连接。FastCGI会等待并出来来自FastCGI进程管理器（运行在Web Server中的）的下一个连接。 在CGI模式，php-cgi然后会退出。</li></ol><p><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Nginx%2BPHP/nginx-fastcgi-php.png" alt="nginx-fastcgi-php"></p><p>如上图所示，FastCGI的下游，是CGI-APP，在我们的LNMP架构里，这个CGI-APP就是PHP程序。<br>而FastCGI的上游是Nginx，他们之间有一个通信载体，即图中的socket。<br>上图中的Pre-fork，则对应着我们PHP-FPM的启动，也就是在我们启动PHP-FPM时便会根据用户配置启动诸多FastCGI触发器（FastCGI Wrapper）。</p><p><strong>FastCGI的不足</strong> 因为是多进程，所以比CGI多线程消耗更多的服务器内存，PHP-CGI解释器每进程消耗7至25兆内存，将这个数字乘以50或100就是很大的内存数。 Nginx 0.8.46+PHP 5.2.14(FastCGI)服务器在3万并发连接下，开启的10个Nginx进程消耗150M内存（15M_10=150M），开启的64个php-cgi进程消耗1280M内存（20M_64=1280M），加上系统自身消耗的内存，总共消耗不到2GB内存。 如果服务器内存较小，完全可以只开启25个php-cgi进程，这样php-cgi消耗的总内存数才500M。 <a href="http://zyan.cc/nginx_php_v6/" target="_blank" rel="noopener">上面的数据摘自Nginx 0.8.x + PHP 5.2.13(FastCGI)搭建胜过Apache十倍的Web服务器(第6版)</a></p><h2 id="PHP-CGI"><a href="#PHP-CGI" class="headerlink" title="PHP-CGI"></a><strong>PHP-CGI</strong></h2><p><strong>PHP-CGI</strong>：是 PHP （Web Application）对 Web Server 提供的 CGI 协议的接口程序,是PHP自带的FastCGI管理器。</p><p><strong>PHP-CGI的不足:</strong></p><ol><li>php-cgi变更php.ini配置后需重启php-cgi才能让新的php-ini生效，不可以平滑重启</li><li>直接杀死php-cgi进程,php就不能运行了。(PHP-FPM和Spawn-FCGI就没有这个问题,守护进程会平滑从新生成新的子进程。）</li></ol><h2 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a><strong>PHP-FPM</strong></h2><p><strong>PHP-FPM</strong>：是 PHP（Web Application）对 Web Server 提供的 FastCGI 协议的接口程序，额外还提供了相对智能一些任务管理。<br>PHP-FPM的全称是PHP FastCGI Process Manager。<br>它是 PHP 针对 FastCGI 协议的具体实现，它会通过用户配置来管理一批FastCGI进程.<br>因此它也是PHP 在多种服务器端应用编程端口（SAPI：cgi、fast-cgi、cli、isapi、apache）里使用最普遍、性能最佳的一款进程管理器。<br>在PHP-FPM管理下的某个FastCGI进程挂了，PHP-FPM会根据用户配置来看是否要重启补全。<br>PHP-FPM更像是管理器，负责管理PHP FastCGI，而真正衔接Nginx与PHP的则是FastCGI进程。<br>因此，CGI是通用网关协议，FastCGI则是一种常驻进程的CGI模式程序，而PHP-FPM更像是管理器，用于管理FastCGI进程。<br>WEB 中:</p><ul><li>Web Server 一般指Apache、Nginx、IIS、Lighttpd、Tomcat等服务器，</li><li>Web Application 一般指PHP、Java、Asp.net等应用程序。</li></ul><p><strong>Nginx+PHP的工程模式下，两位主角分工明确，Nginx负责承载HTTP请求的响应与返回，以及超时控制记录日志等HTTP相关的功能，而PHP则负责处理具体请求要做的业务逻辑，它们俩的这种合作模式也是常见的分层架构设计中的一种，在它们各有专注面的同时，FastCGI又很好的将两块衔接，保障上下游通信交互</strong>，这种通过某种协议或规范来衔接好上下游的模式，在我们日常的PHP应用开发中也有这样的思想落地，譬如我们所开发的<strong>高性能API</strong>，具体的Client到底是PC、APP还是某个其他程序，我们不关心，而这些PC、APP、第三方程序也不关心我们的PHP代码实现，他们按照API的规范来请求做处理即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx与PHP的交互机制-1&quot;&gt;&lt;a href=&quot;#Nginx与PHP的交互机制-1&quot; class=&quot;headerlink&quot; title=&quot;Nginx与PHP的交互机制(1)&quot;&gt;&lt;/a&gt;Nginx与PHP的交互机制(1)&lt;/h1&gt;&lt;p&gt;from there &lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AJAX解决跨域问题（Access-Control-Allow-Origin）</title>
    <link href="http://yoursite.com/2017/06/12/AJAX%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%EF%BC%88Access-Control-Allow-Origin%EF%BC%89/"/>
    <id>http://yoursite.com/2017/06/12/AJAX解决跨域问题（Access-Control-Allow-Origin）/</id>
    <published>2017-06-12T11:37:45.000Z</published>
    <updated>2018-09-29T11:08:49.323Z</updated>
    
    <content type="html"><![CDATA[<p>之前遇到过跨域的问题,一直觉得很神秘,也没有多关注,就过去了,今天又看到几篇文章说跨域,闲来无事于是将其整理记录下来；</p><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p>先来阐述下几个概念:</p><p><strong>跨域</strong>:是指浏览器对于JavaScript的同源策略限制,只要协议、域名、端口有任何一个不同,都被当作是不同的域,都不能执行或获取其他网站的资源；</p><p>姑且这么定义吧,举个简单例子,就是<a href="http://www.client.com网站上的程序不能从www.server.com网站上获取数据,如果强行获取,则会报出下面错误" target="_blank" rel="noopener">www.client.com网站上的程序不能从www.server.com网站上获取数据,如果强行获取,则会报出下面错误</a></p><p><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/JavaScript/error1.png" alt="image"></p><a id="more"></a><p>有没有跨域,判断是不是属于跨域,可以参考下面:</p><table><thead><tr><th>URL</th><th>说明</th><th>是否允许通信</th></tr></thead><tbody><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> 调用 <a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>同一域名下</td><td>允许</td></tr><tr><td><a href="http://www.a.com/lab/a.js" target="_blank" rel="noopener">http://www.a.com/lab/a.js</a> 调用 <a href="http://www.a.com/script/b.js" target="_blank" rel="noopener">http://www.a.com/script/b.js</a></td><td>同一域名下不同文件夹</td><td>允许</td></tr><tr><td><a href="http://www.a.com:8000/a.js" target="_blank" rel="noopener">http://www.a.com:8000/a.js</a> 调用 <a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>同一域名,不同端口</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> 调用 <a href="https://www.a.com/b.js" target="_blank" rel="noopener">https://www.a.com/b.js</a></td><td>同一域名,不同协议</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> 调用 <a href="http://70.32.92.74/b.js" target="_blank" rel="noopener">http://70.32.92.74/b.js</a></td><td>域名和域名对应ip</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> 调用 <a href="http://script.a.com/b.js" target="_blank" rel="noopener">http://script.a.com/b.js</a></td><td>主域相同,子域不同</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="noopener">http://www.a.com/a.js</a> 调用 <a href="http://a.com/b.js" target="_blank" rel="noopener">http://a.com/b.js</a> 同一域名,不同二级域名（同上）</td><td>不允许（cookie这种情况下也不允许访问）</td></tr><tr><td><a href="http://www.cnblogs.com/a.js" target="_blank" rel="noopener">http://www.cnblogs.com/a.js</a> 调用 <a href="http://www.a.com/b.js" target="_blank" rel="noopener">http://www.a.com/b.js</a></td><td>不同域名</td><td>不允许</td></tr></tbody></table><p><strong>CORS</strong>:<strong>CORS（Cross-Origin Resource Sharing）跨域资源共享</strong>,定义了必须在访问跨域资源时,浏览器与服务器应该如何沟通.CORS背后的基本思想就是使用自定义的HTTP头部让浏览器与服务器进行沟通,从而决定请求或响应是应该成功还是失败.</p><p>服务器端对于<strong>CORS</strong>的支持,主要就是通过设置<strong>Access-Control-Allow-Origin</strong>来进行的.如果浏览器检测到相应的设置,就可以允许Ajax进行跨域的访问.</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="Solution-1-服务端程序解决"><a href="#Solution-1-服务端程序解决" class="headerlink" title="Solution 1:服务端程序解决"></a>Solution 1:服务端程序解决</h3><p>如果是双方预定沟通好请求允许数据,可以在服务端添加header头来解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header( &quot;Access-Control-Allow-Origin:*&quot; );</span><br><span class="line"></span><br><span class="line">header( &quot;Access-Control-Allow-Methods:POST,GET&quot; );</span><br></pre></td></tr></table></figure><p>看下面的例子:</p><p>客户端 <a href="http://www.client.com/cliend.html" target="_blank" rel="noopener">www.client.com/cliend.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt; 跨域测试 &lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;//code.jquery.com/jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button style=&quot;width:100px&quot;&gt;click client&lt;/button&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(&quot;button&quot;).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: &quot;http://www.server.com/server.php&quot;,</span><br><span class="line">            type: &quot;post&quot;,</span><br><span class="line">            data: &#123;&apos;text&apos;: &apos;hello world&apos;&#125;,</span><br><span class="line">            success: function (msg) &#123;</span><br><span class="line">                $(&quot;button&quot;).html(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>服务器端 <a href="http://www.server.com/server.php" target="_blank" rel="noopener">www.server.com/server.php</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//允许所有域名获取数据</span><br><span class="line">&lt;?php</span><br><span class="line">$text = $_POST[&apos;text&apos;];</span><br><span class="line">//允许所有的域名</span><br><span class="line">header(&apos;content-type:application:json;charset=utf8&apos;);</span><br><span class="line">header(&apos;Access-Control-Allow-Origin:*&apos;);  </span><br><span class="line">header(&apos;Access-Control-Allow-Methods:POST,GET&apos;);  </span><br><span class="line">header(&apos;Access-Control-Allow-Headers:x-requested-with,content-type&apos;);</span><br><span class="line">echo json_encode($text);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">//允许制定域名获取数据</span><br><span class="line">&lt;?php</span><br><span class="line">$text = $_POST[&apos;text&apos;];</span><br><span class="line">header(&apos;content-type:application:json;charset=utf8&apos;);</span><br><span class="line">$origin = isset($_SERVER[&apos;HTTP_ORIGIN&apos;]) ? $_SERVER[&apos;HTTP_ORIGIN&apos;] : &apos;&apos;;</span><br><span class="line">//允许指定域名</span><br><span class="line">$allow_origin = [</span><br><span class="line">    &apos;http://www.client.com&apos;,</span><br><span class="line">    &apos;http://www.client2.com&apos;</span><br><span class="line">];</span><br><span class="line">if (in_array($origin, $allow_origin)) &#123;</span><br><span class="line">    header(&apos;Access-Control-Allow-Origin:&apos; . $origin);</span><br><span class="line">    header(&apos;Access-Control-Allow-Methods:POST,GET&apos;);</span><br><span class="line">    header(&apos;Access-Control-Allow-Headers:x-requested-with,content-type&apos;);</span><br><span class="line">&#125;</span><br><span class="line">echo json_encode($text);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这样,理论上就可以解决跨域问题:</p><p><img src="http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/JavaScript/success%60.png" alt="image"></p><h3 id="Solution-2-代理模式"><a href="#Solution-2-代理模式" class="headerlink" title="Solution 2:代理模式"></a>Solution 2:代理模式</h3><p>解决思路:<br>例如 <a href="http://www.client.com/client.html" target="_blank" rel="noopener">www.client.com/client.html</a> 需要调用 <a href="http://www.server.com/server.php" target="_blank" rel="noopener">www.server.com/server.php</a> ,可以写一个接口 <a href="http://www.client.com/server.php" target="_blank" rel="noopener">www.client.com/server.php</a> ,由这个接口在后端去调用 <a href="http://www.server.com/server.php" target="_blank" rel="noopener">www.server.com/server.php</a> 并拿到返回值,然后再返回给index.html,这就是一个代理的模式.相当于绕过了浏览器端,自然就不存在跨域问题.</p><h3 id="Solution-3-使用JSONP"><a href="#Solution-3-使用JSONP" class="headerlink" title="Solution 3:使用JSONP"></a>Solution 3:使用JSONP</h3><p>使用之前,建议去看下我的另一篇文章<a href="https://blog.bytesclub.com/2017/06/12/JSON%E5%92%8CJSONP/" target="_blank" rel="noopener">Json和JsonP</a>,然后再过来实践；</p><p>还是直接上代码:</p><p>客户端 <a href="http://www.client.com/client.html" target="_blank" rel="noopener">www.client.com/client.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt; 跨域测试 &lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;//code.jquery.com/jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=&quot;clickMe&quot; style=&quot;width:100px&quot;&gt;click get jsonP&lt;/button&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $(&quot;#clickMe&quot;).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: &quot;http://www.server.com/jsonP.json&quot;,</span><br><span class="line">            type: &quot;post&quot;,</span><br><span class="line">            dataType: &quot;jsonP&quot;,</span><br><span class="line">            data: &#123;&apos;text&apos;: &apos;hello world&apos;&#125;,</span><br><span class="line">            jsonpCallback: &apos;returnData&apos;,  //可自定义 函数名</span><br><span class="line">            success: function (msg) &#123;</span><br><span class="line">                alert(msg.text);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: function (XMLHttpRequest, textStatus, errorThrown) &#123;</span><br><span class="line">                alert(XMLHttpRequest.status);</span><br><span class="line">                alert(XMLHttpRequest.readyState);</span><br><span class="line">                alert(textStatus);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>服务器端 <a href="http://www.server.com/jsonP.json" target="_blank" rel="noopener">www.server.com/jsonP.json</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">returnData(&#123;&quot;text&quot;:&quot;hello jsonP&quot;&#125;);</span><br></pre></td></tr></table></figure><p>同样的也可以跨域获取数据</p><h2 id="Solution-4-使用html5-API-postMessage-转自这里"><a href="#Solution-4-使用html5-API-postMessage-转自这里" class="headerlink" title="Solution 4:使用html5 API postMessage(转自这里)"></a>Solution 4:<a href="http://blog.xieliqun.com/2016/08/25/postMessage-cross-domain/" target="_blank" rel="noopener">使用html5 API postMessage(转自这里)</a></h2><p>客户端 <a href="http://www.client.com/client.html" target="_blank" rel="noopener">www.client.com/client.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;iframe style=&quot;display: none&quot; src=&quot;http://www.server.com/server.html&quot; name=&quot;postIframe&quot; onload=&quot;messageLoad()&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function messageLoad() &#123;</span><br><span class="line">        var url = &quot;http://www.server.com&quot;;</span><br><span class="line">        window.postIframe.postMessage(&quot;给我tsort的信息&quot;, url); //发送数据</span><br><span class="line">    &#125;</span><br><span class="line">    window.onmessage = function (e) &#123;</span><br><span class="line">        e = e || event;</span><br><span class="line">        console.log(e.data); //接收b返回的数据,在控制台有两次输出</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>服务器端 <a href="http://www.server.com/server.html" target="_blank" rel="noopener">www.server.com/server.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    window.onmessage = function(e)&#123;</span><br><span class="line">        e = e || event;</span><br><span class="line">        alert(e.data); //立即弹出a发送过来的数据</span><br><span class="line">        e.source.postMessage(&quot;好的,请稍等三秒！&quot;,e.origin); //立即回复a</span><br><span class="line"></span><br><span class="line">        var postData = &#123;name:&quot;tsrot&quot;,age:24&#125;;</span><br><span class="line">        var strData = JSON.stringify(postData); //json对象转化为字符串</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            e.source.postMessage(strData,e.origin);</span><br><span class="line">        &#125;,3000); //3秒后向a发送数据</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前遇到过跨域的问题,一直觉得很神秘,也没有多关注,就过去了,今天又看到几篇文章说跨域,闲来无事于是将其整理记录下来；&lt;/p&gt;
&lt;h2 id=&quot;一些概念&quot;&gt;&lt;a href=&quot;#一些概念&quot; class=&quot;headerlink&quot; title=&quot;一些概念&quot;&gt;&lt;/a&gt;一些概念&lt;/h2&gt;&lt;p&gt;先来阐述下几个概念:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跨域&lt;/strong&gt;:是指浏览器对于JavaScript的同源策略限制,只要协议、域名、端口有任何一个不同,都被当作是不同的域,都不能执行或获取其他网站的资源；&lt;/p&gt;
&lt;p&gt;姑且这么定义吧,举个简单例子,就是&lt;a href=&quot;http://www.client.com网站上的程序不能从www.server.com网站上获取数据,如果强行获取,则会报出下面错误&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.client.com网站上的程序不能从www.server.com网站上获取数据,如果强行获取,则会报出下面错误&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/JavaScript/error1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="跨域" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>CLI&amp;Swoole Model</title>
    <link href="http://yoursite.com/2017/06/12/CLI&amp;Swoole%20Model/"/>
    <id>http://yoursite.com/2017/06/12/CLI&amp;Swoole Model/</id>
    <published>2017-06-12T11:37:45.000Z</published>
    <updated>2019-01-24T08:01:38.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><p><code>php index.php FEE3D9650A692CB93FF43DE7267BDBD0/Customer/Api/Pay/Address/index/id/1/name/222</code></p><blockquote><p>获取参数<code>$_SERVER[&#39;PARAMS&#39;]</code></p></blockquote><h3 id="Swoole"><a href="#Swoole" class="headerlink" title="Swoole"></a>Swoole</h3><p><code>trunk/ThinkPHP/Library/Think/App.class.php    line:98</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (strtolower($_SERVER[<span class="string">'CY_REQUEST_URI'</span>]) == <span class="string">'swoole/server/swooleserver'</span>) &#123;</span><br><span class="line">    $class = <span class="string">''</span>;</span><br><span class="line">    $array = explode(<span class="string">'/'</span>, $_SERVER[<span class="string">'CY_REQUEST_URI'</span>]);</span><br><span class="line">    <span class="keyword">foreach</span> ($array <span class="keyword">as</span> $name) &#123;</span><br><span class="line">        $class .= <span class="string">'\\'</span>.parse_name($name, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行-1"><a href="#执行-1" class="headerlink" title="执行"></a>执行</h4><p>启动swoole 服务:<code>php index.php Swoole/Server/SwooleServer</code></p><p>投递异步任务</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">new</span> SwooleClient())-&gt;handle([</span><br><span class="line"><span class="string">'class'</span> =&gt;  <span class="string">'Swoole\Process\Customer\Export'</span>,</span><br><span class="line"><span class="string">'params'</span> =&gt; [<span class="string">'id'</span> =&gt; <span class="number">1</span>, <span class="string">'name'</span> =&gt; <span class="string">'zhimma'</span>],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CLI&quot;&gt;&lt;a href=&quot;#CLI&quot; class=&quot;headerlink&quot; title=&quot;CLI&quot;&gt;&lt;/a&gt;CLI&lt;/h3&gt;&lt;h4 id=&quot;执行&quot;&gt;&lt;a href=&quot;#执行&quot; class=&quot;headerlink&quot; title=&quot;执行&quot;&gt;&lt;/a&gt;执行&lt;/h4&gt;&lt;p
      
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="Swoole" scheme="http://yoursite.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>Mac环境ELK搭建</title>
    <link href="http://yoursite.com/2017/06/12/Mac%E7%8E%AF%E5%A2%83ELK%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/06/12/Mac环境ELK搭建/</id>
    <published>2017-06-12T11:37:45.000Z</published>
    <updated>2019-01-24T08:03:24.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>略。。。</p><p><del>这里我使用<code>brew install java</code>命令安装</del></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  java -version</span><br><span class="line">java version &quot;11&quot; 2018-09-25</span><br><span class="line">Java(TM) SE Runtime Environment 18.9 (build 11+28)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11+28, mixed mode)</span><br></pre></td></tr></table></figure><p>不要使用上述方式安装，有坑</p><p>下载这个文件安装java:<a href="https://edelivery.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-macosx-x64.dmg" target="_blank" rel="noopener">https://edelivery.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-macosx-x64.dmg</a></p><h2 id="Elasticsearch安装配置"><a href="#Elasticsearch安装配置" class="headerlink" title="Elasticsearch安装配置"></a>Elasticsearch安装配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官网下载对应平台的安装包</p><p><img src="/Users/zhimma/Pictures/ELK/downloadE.png" alt="下载Elasticsearch"></p><p>放到合适的位置，我放置后解压的目录是<code>/Users/zhimma/Soft/elasticsearch-6.4.1</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置-Elasticsearch"><a href="#配置-Elasticsearch" class="headerlink" title="配置 Elasticsearch"></a>配置 Elasticsearch</h4><p>下面是我的配置文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">☁  config  pwd</span><br><span class="line">/Users/zhimma/Soft/elasticsearch-6.4.1/config</span><br><span class="line">☁  config  grep &apos;^[a-z]&apos; elasticsearch.yml</span><br><span class="line">cluster.name: elk-stack</span><br><span class="line">path.data: /Users/zhimma/Data/elk_stack/data</span><br><span class="line">path.logs: /Users/zhimma/Data/elk_stack/logs</span><br><span class="line">bootstrap.memory_lock: false</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br></pre></td></tr></table></figure><h4 id="配置-Elasticsearch-内存占用"><a href="#配置-Elasticsearch-内存占用" class="headerlink" title="配置 Elasticsearch 内存占用"></a>配置 Elasticsearch 内存占用</h4><p>配置 jvm 最大堆和最小堆，一般为服务器物理内存的一半，最大不超过 32g</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">☁  config  pwd</span><br><span class="line">/Users/zhimma/Soft/elasticsearch-6.4.1/config</span><br><span class="line">☁  config  vi jvm.options </span><br><span class="line"></span><br><span class="line">-Xms8g</span><br><span class="line">-Xmx8g</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>进入<code>bin</code>目录启动<code>Elasticsearch</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">☁  bin  pwd</span><br><span class="line">/Users/zhimma/Soft/elasticsearch-6.4.1/bin</span><br><span class="line">☁  bin  ./elasticsearch</span><br></pre></td></tr></table></figure><h2 id="kibana安装配置"><a href="#kibana安装配置" class="headerlink" title="kibana安装配置"></a>kibana安装配置</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>官网下载对应平台的安装包</p><p><img src="/Users/zhimma/Pictures/ELK/downloadK.png" alt="下载Kibana"></p><p>放到合适的位置，我放置后解压的目录是<code>/Users/zhimma/Soft/kibana-6.4.1-darwin-x86_64</code></p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>凭感觉配置了一些，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">☁  config  grep &apos;^[a-z]&apos; kibana.yml</span><br><span class="line">server.port: 5601</span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br><span class="line">elasticsearch.url: &quot;http://0.0.0.0:9200&quot;</span><br><span class="line">kibana.index: &quot;.kibana&quot;</span><br></pre></td></tr></table></figure><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><p>进入<code>bin</code>目录启动<code>Kibana</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">☁  bin  pwd</span><br><span class="line">/Users/zhimma/Soft/kibana-6.4.1-darwin-x86_64/bin</span><br><span class="line">☁  bin  ./kibana</span><br></pre></td></tr></table></figure><h2 id="Logstash安装配置"><a href="#Logstash安装配置" class="headerlink" title="Logstash安装配置"></a>Logstash安装配置</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>官网下载对应平台的安装包</p><p><img src="/Users/zhimma/Pictures/ELK/downloadL.png" alt="下载Logstash"></p><p>放到合适的位置，我放置后解压的目录是<code>/Users/zhimma/Soft/logstash-6.4.1</code></p><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><h4 id="配置-Logstash"><a href="#配置-Logstash" class="headerlink" title="配置 Logstash"></a>配置 Logstash</h4><p>不是很了解，暂时使用默认配置</p><h4 id="配置-Logstash-内存占用"><a href="#配置-Logstash-内存占用" class="headerlink" title="配置 Logstash 内存占用"></a>配置 Logstash 内存占用</h4><p>配置 jvm 最大堆和最小堆，一般为服务器物理内存的一半，最大不超过 32g</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">☁  config  pwd</span><br><span class="line">/Users/zhimma/Soft/logstash-6.4.1/config</span><br><span class="line">☁  config  vi jvm.options </span><br><span class="line"></span><br><span class="line">-Xms8g</span><br><span class="line">-Xmx8g</span><br></pre></td></tr></table></figure><h3 id="添加项目或自定义配置文件"><a href="#添加项目或自定义配置文件" class="headerlink" title="添加项目或自定义配置文件"></a>添加项目或自定义配置文件</h3><p><code>Logstash</code>收集日志时候，可以对日志进行一定的操作和过滤，这里需要自定义不同的配置文件来实现，针对我们目前的项目，我简单的创建了下面的配置文件</p><p>在<code>/Users/zhimma/Soft/logstash-6.4.1/config</code>目录下创建<code>conf.d</code>文件夹，这个文件夹下存放我们所有的自定义配置文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [ &quot;/data/www/XX_project/trunk/Common/Runtime/Apps/Api/*.log&quot; ]</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    ignore_older =&gt; 0</span><br><span class="line">    sincedb_path =&gt; &quot;/dev/null&quot;</span><br><span class="line">    type =&gt; &quot;Api&quot;</span><br><span class="line">    codec =&gt; multiline &#123;</span><br><span class="line">      pattern =&gt; &quot;^\[&quot;</span><br><span class="line">      negate =&gt; true</span><br><span class="line">      what =&gt; &quot;previous&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [ &quot;/data/www/XX_project/trunk/Common/Runtime/Apps/SDK/*.log&quot; ]</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    ignore_older =&gt; 0</span><br><span class="line">    sincedb_path =&gt; &quot;/dev/null&quot;</span><br><span class="line">    type =&gt; &quot;SDK&quot;</span><br><span class="line">    codec =&gt; multiline &#123;</span><br><span class="line">      pattern =&gt; &quot;^\[&quot;</span><br><span class="line">      negate =&gt; true</span><br><span class="line">      what =&gt; &quot;previous&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123; </span><br><span class="line">  if [type] == &quot;Api&quot; &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [ &quot;127.0.0.1:9200&quot; ] </span><br><span class="line">      index =&gt; &quot;api&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  if [type] == &quot;SDK&quot; &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [ &quot;127.0.0.1:9200&quot; ] </span><br><span class="line">      index =&gt; &quot;sdk&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h3><p>进入<code>bin</code>目录启动Llogstash`</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">☁  bin  pwd</span><br><span class="line">/Users/zhimma/Soft/logstash-6.4.1/bin</span><br><span class="line">☁  bin  ./logstash -f /Users/zhimma/Soft/logstash-6.4.1/config/conf.d/default.conf</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="## 访问"></a>## 访问</h2><p>浏览器访问0.0.0.0:5601即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装Java&quot;&gt;&lt;a href=&quot;#安装Java&quot; class=&quot;headerlink&quot; title=&quot;安装Java&quot;&gt;&lt;/a&gt;安装Java&lt;/h2&gt;&lt;p&gt;略。。。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;这里我使用&lt;code&gt;brew install java&lt;/code&gt;命令
      
    
    </summary>
    
      <category term="ELK" scheme="http://yoursite.com/categories/ELK/"/>
    
    
      <category term="ELK" scheme="http://yoursite.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据类型</title>
    <link href="http://yoursite.com/2017/06/12/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/06/12/MySQL数据类型/</id>
    <published>2017-06-12T11:37:45.000Z</published>
    <updated>2019-01-24T08:04:53.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h2><h3 id="char和varchar"><a href="#char和varchar" class="headerlink" title="char和varchar"></a>char和varchar</h3><h3 id="varchar数据类型的变化"><a href="#varchar数据类型的变化" class="headerlink" title="varchar数据类型的变化"></a>varchar数据类型的变化</h3><p>MySQL4.1以下的版本中，varchar数据类型的最大长度限制为255，其数据范围可以是0~255或1~255（根据不同版本数据库来定）</p><p>MySQL5.0以上的版本中，varchar数据类型的长度支持到了65535，也就是说可以存放65532个字节的数据，起始位和结束位占去了3个字节</p><p>Mysql5根据编码不同,存储大小也不同，具体有以下规则：</p><ul><li>存储限制</li></ul><p>varchar 字段是将实际内容单独存储在聚簇索引之外，内容开头用1到2个字节表示实际长度（长度超过255时需要2个字节），因此最大长度不能超过65535。</p><ul><li>编码长度限制</li></ul><p>字符类型若为gbk，每个字符最多占2个字节，最大长度不能超过32766;</p><p>字符类型若为utf8，每个字符最多占3个字节，最大长度不能超过<strong>21845</strong>。</p><p>若定义的时候超过上述限制，则varchar字段会被强行转为text类型，并产生warning。</p><ul><li>行长度限制</li></ul><p>导致实际应用中varchar长度限制的是一个行定义的长度。 MySQL要求一个行的定义长度不能超过65535。若定义的表长度超过这个值，则提示</p><p><code>ERROR 1118 (42000): Row size too large. The maximum row size for the used table type, not counting BLOBs, is 65535. You have to change some columns to TEXT or BLOBs。</code></p><h3 id="char-M-varchar-M-不同之处"><a href="#char-M-varchar-M-不同之处" class="headerlink" title="char(M), varchar(M)不同之处"></a>char(M), varchar(M)不同之处</h3><p>char(M)定义的列的长度为固定的，M取值可以为0～255之间，当保存char值时，在它们的右边填充空格以达到指定的长度。当检索到CHAR值时，尾部的空格被删除掉。在存储或检索过程中不进行大小写转换。char存储定长数据很方便，<strong>char字段上的索引效率级高</strong>，比如定义char(10)，那么不论你存储的数据是否达到了10个字节，都要占去10个字节的空间,不足的自动用空格填充。</p><p>varchar(M)定义的列的长度为可变长字符串，M取值可以为0~65535之间，(VARCHAR的最大有效长度由最大行大小和使用的字符集确定。整体最大长度是65,532字节）。varchar值保存时只保存需要的字符数，另加一个字节来记录长度(如果列声明的长度超过255，则使用两个字节)。varchar值保存时不进行填充。当值保存和检索时尾部的空格仍保留，符合标准SQL。varchar存储变长数据，但存储效率没有char高。如果一个字段可能的值是不固定长度的，我们只知道它不可能超过10个字符，把它定义为 VARCHAR(10)是最合算的。VARCHAR类型的实际长度是它的值的实际长度+1。为什么”+1”呢？这一个字节用于保存实际使用了多大的长度。<strong>从空间上考虑，用varchar合适；从效率上考虑，用char合适</strong>，关键是根据实际情况找到权衡点。</p><p>char和varchar最大的不同就是一个是固定长度，一个是可变长度。由于是可变长度，因此实际存储的时候是实际字符串再加上一个记录字符串长度的字节(如果超过255则需要两个字节)。如果分配给char或varchar列的值超过列的最大长度，则对值进行裁剪以使其适合。如果被裁掉的字符不是空格，则会产生一条警告。如果裁剪非空格字符，则会造成错误(而不是警告)并通过使用严格SQL模式禁用值的插入。</p><h3 id="VARCHAR和TEXT、BlOB类型的区别"><a href="#VARCHAR和TEXT、BlOB类型的区别" class="headerlink" title="VARCHAR和TEXT、BlOB类型的区别"></a>VARCHAR和TEXT、BlOB类型的区别</h3><p>VARCHAR，BLOB和TEXT类型是变长类型，对于其存储需求取决于列值的实际长度(在前面的表格中用L表示)，而不是取决于类型的最大可能尺寸。例如，一个VARCHAR(10)列能保存最大长度为10个字符的一个字符串，实际的存储需要是字符串的长度 ，加上1个字节以记录字符串的长度。对于字符串’abcd’，L是4而存储要求是5个字节。</p><p>BLOB和TEXT类型需要1，2，3或4个字节来记录列值的长度，这取决于类型的最大可能长度。VARCHAR需要定义大小，有65535字节的最大限制；TEXT则不需要。如果你把一个超过列类型最大长度的值赋给一个BLOB或TEXT列，值被截断以适合它。</p><p>一个BLOB是一个能保存可变数量的数据的二进制的大对象。4个BLOB类型TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB仅仅在他们能保存值的最大长度方面有所不同。</p><p>BLOB 可以储存图片,TEXT不行，TEXT只能储存纯文本文件。4个TEXT类型TINYTEXT、TEXT、MEDIUMTEXT和LONGTEXT对应于4个BLOB类型，并且有同样的最大长度和存储需求。在BLOB和TEXT类型之间的唯一差别是对BLOB值的排序和比较以大小写敏感方式执行，而对TEXT值是大小写不敏感的。换句话说，一个TEXT是一个大小写不敏感的BLOB</p><h3 id="总结char，varchar，text区别"><a href="#总结char，varchar，text区别" class="headerlink" title="总结char，varchar，text区别"></a>总结char，varchar，text区别</h3><p>长度的区别，char范围是0～255，varchar最长是64k，但是注意这里的64k是整个row的长度，要考虑到其它的column，还有如果存在not null的时候也会占用一位，对不同的字符集，有效长度还不一样，比如utf8的，最多21845，还要除去别的column，但是varchar在一般情况下存储都够用了。如果遇到了大文本，考虑使用text，最大能到4G。</p><p>效率来说基本是char&gt;varchar&gt;text，但是如果使用的是Innodb引擎的话，推荐使用varchar代替char</p><p>char和varchar可以有默认值，text不能指定默认值</p><p>数据库选择合适的数据类型存储还是很有必要的，对性能有一定影响。这里在零碎记录两笔，对于int类型的，如果不需要存取负值，最好加上unsigned；对于经常出现在where语句中的字段，考虑加索引，整形的尤其适合加索引。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL数据类型&quot;&gt;&lt;a href=&quot;#MySQL数据类型&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据类型&quot;&gt;&lt;/a&gt;MySQL数据类型&lt;/h2&gt;&lt;h3 id=&quot;char和varchar&quot;&gt;&lt;a href=&quot;#char和varchar&quot;
      
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL添加新用户1364</title>
    <link href="http://yoursite.com/2017/06/12/MySQL%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%94%A8%E6%88%B71364/"/>
    <id>http://yoursite.com/2017/06/12/MySQL添加新用户1364/</id>
    <published>2017-06-12T11:37:45.000Z</published>
    <updated>2019-01-24T08:05:17.980Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL5.7添加新用户 出现<code>ERROR 1364 (HY000): Field &#39;ssl_cipher&#39; doesn&#39;t have a default value</code></p><p>## </p><h2 id="解决方法1："><a href="#解决方法1：" class="headerlink" title="解决方法1："></a>解决方法1：</h2><p><code>insert into user (host,user,authentication_string,select_priv,insert_priv,update_priv) values (&#39;%&#39; , &#39;mma&#39; ,PASSWORD(&#39;123456&#39;),&#39;Y&#39;,&#39;Y&#39;,&#39;Y&#39;);</code></p><p><strong>原因</strong>：</p><p>在我的配置文件my.cnf中有这样一条语句<code>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</code></p><p>指定了严格模式，为了安全，严格模式禁止通过insert 这种形式直接修改<strong>MySQL</strong>库中的<strong>user</strong>表进行添加新用户</p><p><strong>解决方法</strong>:</p><p>将配置文件中的STRICT_TRANS_TABLES删掉，即改为：</p><p><code>sql_mode=NO_ENGINE_SUBSTITUTION</code></p><p>然后重启mysql即可</p><h2 id="解决方法2-推荐-："><a href="#解决方法2-推荐-：" class="headerlink" title="解决方法2(推荐)："></a>解决方法2(推荐)：</h2><p>添加用户：</p><p><code>grant usage on *.* to &#39;mma&#39;@&#39;%&#39; identified by &#39;123456&#39; with grant option;</code></p><p>赋予权限</p><p><code>grant all privileges on *.* to &#39;mma&#39;@&#39;%&#39; identified by &#39;123456&#39;;</code></p><p><strong>or</strong></p><p><code>grant select,insert,update,delete,create,drop ON TUTORIALS.* TO &#39;mma&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</code></p><p>刷新权限</p><p><code>flush privileges;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL5.7添加新用户 出现&lt;code&gt;ERROR 1364 (HY000): Field &amp;#39;ssl_cipher&amp;#39; doesn&amp;#39;t have a default value&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;## &lt;/p&gt;
&lt;h2 id=&quot;解决方法1
      
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="http://yoursite.com/2017/06/12/Nginx/"/>
    <id>http://yoursite.com/2017/06/12/Nginx/</id>
    <published>2017-06-12T11:37:45.000Z</published>
    <updated>2019-01-24T08:05:39.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h3><p>Mainline version        开发版本</p><p>Stable version        稳定版本</p><p>Legacy versions        历史版本</p><h3 id="安装源"><a href="#安装源" class="headerlink" title="安装源"></a>安装源</h3><p>To set up the yum repository for RHEL/CentOS, create the file named <code>/etc/yum.repos.d/nginx.repo</code> with the following contents:</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; [nginx]</span><br><span class="line">&gt; name=nginx repo</span><br><span class="line">&gt; baseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/</span><br><span class="line">&gt; gpgcheck=0</span><br><span class="line">&gt; enabled=1</span><br><span class="line">&gt; </span><br><span class="line">&gt; baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>Replace “<code>OS</code>” with “<code>rhel</code>” or “<code>centos</code>”, depending on the distribution used, and “<code>OSRELEASE</code>” with “<code>6</code>” or “<code>7</code>”, for 6.x or 7.x versions, respectively.</p><h3 id="查看nginx安装包"><a href="#查看nginx安装包" class="headerlink" title="查看nginx安装包"></a>查看nginx安装包</h3><p><code>yum list | grep nginx</code></p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p><code>yum install nginx -y</code></p><h3 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]# nginx -v</span><br><span class="line"><span class="attribute">nginx</span> version: nginx/<span class="number">1</span>.<span class="number">14</span>.<span class="number">2</span></span><br><span class="line">[root<span class="variable">@host</span> ~]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">14</span>.<span class="number">2</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span>-<span class="number">28</span>) (GCC)</span><br><span class="line">built with OpenSSL <span class="number">1</span>.<span class="number">0</span>.<span class="number">2k</span>-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --<span class="literal">error</span>-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=<span class="string">'-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC'</span> --with-ld-opt=<span class="string">'-Wl,-z,relro -Wl,-z,now -pie'</span></span><br></pre></td></tr></table></figure><h2 id="nginx-配置解析"><a href="#nginx-配置解析" class="headerlink" title="nginx 配置解析"></a>nginx 配置解析</h2><table><thead><tr><th>user</th><th>设置nginx服务的系统使用用户</th></tr></thead><tbody><tr><td>worker_processes</td><td>工作进程数</td></tr><tr><td>error_log</td><td>nginx的错误日志</td></tr><tr><td>pid</td><td>nginx服务</td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> www www;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /home/wwwlogs/nginx_error.log <span class="literal">error</span>;</span><br><span class="line"><span class="comment"># pid /usr/local/nginx/logs/nginx.pid;</span></span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"><span class="comment">#Specifies the value for maximum file descriptors that can be opened by this process.</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>events</th><th>worker_connections</th><th>每个工作进程运行的最大链接数</th></tr></thead><tbody><tr><td></td><td>use</td><td>工作进程模式</td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">65535</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nginx-模块"><a href="#nginx-模块" class="headerlink" title="nginx 模块"></a>nginx 模块</h2><h3 id="stub-status"><a href="#stub-status" class="headerlink" title="stub_status"></a>stub_status</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /nginx &#123;</span><br><span class="line">stub_status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Active connections: 20 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 274 274 784 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 19</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;版本说明&quot;&gt;&lt;a href=&quot;#版本说明&quot; class=&quot;headerlink&quot; title=&quot;版本说明&quot;&gt;&lt;/a&gt;版本说明&lt;/h
      
    
    </summary>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>mac安装swoole扩展问题记录</title>
    <link href="http://yoursite.com/2017/06/12/mac%E5%AE%89%E8%A3%85swoole%E6%89%A9%E5%B1%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/06/12/mac安装swoole扩展问题记录/</id>
    <published>2017-06-12T11:37:45.000Z</published>
    <updated>2019-01-24T08:03:46.272Z</updated>
    
    <content type="html"><![CDATA[<h2 id="openssl-ssl-h-39-file-not-found"><a href="#openssl-ssl-h-39-file-not-found" class="headerlink" title="openssl/ssl.h&#39; file not found"></a><code>openssl/ssl.h&#39; file not found</code></h2><p><code>/private/tmp/pear/temp/swoole/include/swoole.h:438:10: fatal error: &#39;openssl/ssl.h&#39; file not found</code></p><p><strong>原因：</strong><br>openssl 未安装或 openssl 库不在标准位置中<br><strong>解决方案：</strong></p><ol><li><p>确认是否安装了 openssl<br><code>brew search openssl</code><br>若未安装则执行命令<code>brew install openssl</code>进行安装</p></li><li><p>确认 openssl 库是否在标准位置中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">☁  ~ ls /usr/local/include/openssl</span><br><span class="line">☁  ~ No such file or directory</span><br></pre></td></tr></table></figure><p>这就是问题所在了，找到 openssl/include/openssl 目录，并 cp 到 /usr/local/include 目录中。</p><p><code>☁  ~  ln -s /usr/local/Cellar/openssl/1.0.2p/include/openssl/ /usr/local/include/</code></p><p>一般情况下就可以解决该问题了。</p><p>但是，也可能会遇到很诡异的状况，上步没有解决问题，依然找不到 openssl/ssl.h 等文件<br>复制 openssl 源文件到 swoole 的源码目录中，编译就可以了。</p><p><code>cp -R  /usr/local/Cellar/openssl/1.0.2p/include/openssl swoole-src-2.1.3/include</code></p><p>这个肯定能解决问题了</p></li></ol><h2 id="Enable-openssl-support-require-openssl-library"><a href="#Enable-openssl-support-require-openssl-library" class="headerlink" title="Enable openssl support, require openssl library."></a><code>Enable openssl support, require openssl library.</code></h2><p><code>/private/tmp/pear/temp/swoole/php_swoole.h:137:2: error: &quot;Enable openssl support, require openssl library.&quot;</code></p><p>上面的问题解决了，再次<code>pecl install swoole</code>时候报了这个错，找了很久都么有找到解决方案，偶然看到pecl 安装的过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enable debug/trace log support? [no] : yes</span><br><span class="line">enable sockets supports? [no] : yes</span><br><span class="line">enable openssl support? [no] : yes</span><br><span class="line">enable http2 support? [no] : yes</span><br><span class="line">enable async-redis support? [no] : yes</span><br><span class="line">enable mysqlnd support? [no] : yes</span><br><span class="line">enable postgresql coroutine client support? [no] : no</span><br><span class="line">building in /private/tmp/pear/temp/pear-build-zhimmaSwGIQ1/swoole-4.2.1</span><br><span class="line">running: /private/tmp/pear/temp/swoole/configure --with-php-config=/usr/local/opt/php@7.1/bin/php-config --enable-debug-log=yes --enable-sockets=yes --enable-openssl=yes --enable-http2=yes --enable-async-redis=yes --enable-mysqlnd=yes --enable-coroutine-postgresql=no</span><br></pre></td></tr></table></figure><p>，于是猜想如果指定<code>openssl</code>的目录，是否可以解决，先看看<code>openssl</code>目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  which openssl</span><br><span class="line">/usr/local/opt/openssl/bin/openssl</span><br></pre></td></tr></table></figure><p>于是安装过程就变成下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enable debug/trace log support? [no] : yes</span><br><span class="line">enable sockets supports? [no] : yes</span><br><span class="line">enable openssl support? [no] : yes --with-openssl-dir=/usr/local/opt/openssl/bin/openssl</span><br><span class="line">enable http2 support? [no] : yes</span><br><span class="line">enable async-redis support? [no] : yes</span><br><span class="line">enable mysqlnd support? [no] : yes</span><br><span class="line">enable postgresql coroutine client support? [no] : no</span><br><span class="line">building in /private/tmp/pear/temp/pear-build-zhimmaN9CyFV/swoole-4.2.1</span><br><span class="line">running: /private/tmp/pear/temp/swoole/configure --with-php-config=/usr/local/opt/php@7.1/bin/php-config --enable-debug-log=yes --enable-sockets=yes --enable-openssl=yes --with-openssl-dir=/usr/local/opt/openssl/bin/openssl --enable-http2=yes --enable-async-redis=yes --enable-mysqlnd=yes --enable-coroutine-postgresql=no</span><br></pre></td></tr></table></figure><p>错误解决</p><h2 id="Enable-http2-support-require-nghttp2-library"><a href="#Enable-http2-support-require-nghttp2-library" class="headerlink" title="Enable http2 support, require nghttp2 library."></a><code>Enable http2 support, require nghttp2 library.</code></h2><p><code>/private/tmp/pear/temp/swoole/php_swoole.h:148:2: error: &quot;Enable http2 support, require nghttp2 library.</code></p><p><strong>解决方案：</strong></p><p><code>brew install nghttp2</code></p><blockquote><p>未能解决</p></blockquote><h2 id="hiredis-hiredis-h-39-file-not-found"><a href="#hiredis-hiredis-h-39-file-not-found" class="headerlink" title="hiredis/hiredis.h&#39; file not found"></a><code>hiredis/hiredis.h&#39; file not found</code></h2><p><code>/private/tmp/pear/temp/swoole/swoole_redis.c:20:10: fatal error: hiredis/hiredis.h&#39; file not found</code></p><p><strong>解决方案：</strong></p><p><code>brew install hiredis</code></p><h2 id="编译参数"><a href="#编译参数" class="headerlink" title="编译参数"></a>编译参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">--disable-option-checking  ignore unrecognized --enable/--with options</span><br><span class="line">  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)</span><br><span class="line">  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]</span><br><span class="line">  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]</span><br><span class="line">  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)</span><br><span class="line">  --with-libdir=NAME      Look for libraries in .../NAME rather than .../lib</span><br><span class="line">  --with-php-config=PATH  Path to php-config php-config</span><br><span class="line">  --enable-swoole-debug   Enable swoole debug</span><br><span class="line">  启用swoole的调试日志。不要在生产环境中启用此配置。</span><br><span class="line">  --enable-trace-log   Enable swoole trace log</span><br><span class="line">  --enable-sockets        Do you have sockets extension?</span><br><span class="line">  启用对 sockets 的支持。依赖 sockets</span><br><span class="line">  --enable-async-redis    Do you have hiredis?</span><br><span class="line">  启用对异步Redis客户端的支持。依赖 hiredis</span><br><span class="line">  --enable-coroutine-postgresql    Do you install postgresql?</span><br><span class="line">  启用协程 Postgresql 客户端，依赖 libpq</span><br><span class="line">  --enable-openssl        Use openssl?</span><br><span class="line">  启用openssl支持。依赖 libssl.so</span><br><span class="line">  --enable-http2          Use http2.0?</span><br><span class="line">  启用HTTP2的支持。依赖 nghttp2</span><br><span class="line">  --enable-thread         Experimental: Use thread?</span><br><span class="line">  启用线程支持 //实验性功能。请勿在生产环境中使用此功能</span><br><span class="line">  --enable-hugepage       Experimental: Use hugepage?</span><br><span class="line">  启用 hugepage //使用大内存页优化性能，具体鸟哥在他的博客中讲到。</span><br><span class="line">  如果已经开启了 jemalloc，再开启hugepage 印象性能</span><br><span class="line">  https://blog.digitalocean.com/transparent-huge-pages-and-alternative-memory-allocators/</span><br><span class="line">  实验性功能。请勿在生产环境中使用此功能</span><br><span class="line">  --enable-swoole         Enable swoole support</span><br><span class="line">  --enable-swoole-static    Enable swoole static compile support</span><br><span class="line">  --with-swoole           With swoole support</span><br><span class="line">  --with-libpq-dir=DIR    Include libpq support (requires libpq &gt;= 9.5)</span><br><span class="line">  --with-openssl-dir=DIR    Include OpenSSL support (requires OpenSSL &gt;= 0.9.6)</span><br><span class="line">  设置openssl库的路径，例如：--with-openssl-dir=/opt/openssl/.</span><br><span class="line">  --with-jemalloc-dir=DIR    Include jemalloc support</span><br><span class="line">  使用 jemalloc 进行内存优化支持</span><br><span class="line">  --enable-mysqlnd       Do you have mysqlnd?</span><br><span class="line">  启用对 mysqlnd 的支持，依赖 mysqlnd</span><br><span class="line">  --enable-coroutine      Enable coroutine (requires PHP &gt;= 5.5)</span><br><span class="line">  启用协程</span><br><span class="line">  --enable-asan      Enable asan</span><br><span class="line">  启用 Address-Sanitizier 内存检测工具 //只有开启debug才有效</span><br><span class="line">  --enable-picohttpparser     Experimental: Do you have picohttpparser?</span><br><span class="line">  启用 picohttpparser 支持 //这是一个超高性能的http解析器，实验性功能。请勿在生产环境中使用此功能</span><br><span class="line">  --enable-timewheel     Experimental: Enable timewheel heartbeat?</span><br><span class="line">  启用时间轮算法并优化心跳算法 //实验性功能。请勿在生产环境中使用此功能</span><br><span class="line">  --enable-debug,  compile with debug symbols</span><br><span class="line">  编译时加入符号表 //使用gdb调试时有用</span><br><span class="line">  --enable-shared=PKGS    Build shared libraries default=yes</span><br><span class="line">  --enable-static=PKGS    Build static libraries default=yes</span><br><span class="line">  --enable-fast-install=PKGS</span><br><span class="line">                          Optimize for fast installation default=yes</span><br><span class="line">  --with-gnu-ld           Assume the C compiler uses GNU ld default=no</span><br><span class="line">  --disable-libtool-lock  Avoid locking (might break parallel builds)</span><br><span class="line">  --with-pic              Try to use only PIC/non-PIC objects default=use both</span><br><span class="line">  --with-tags=TAGS        Include additional configurations automatic</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;openssl-ssl-h-39-file-not-found&quot;&gt;&lt;a href=&quot;#openssl-ssl-h-39-file-not-found&quot; class=&quot;headerlink&quot; title=&quot;openssl/ssl.h&amp;#39; file not fo
      
    
    </summary>
    
      <category term="Mac" scheme="http://yoursite.com/categories/Mac/"/>
    
      <category term="Swoole" scheme="http://yoursite.com/categories/Mac/Swoole/"/>
    
    
      <category term="Swoole" scheme="http://yoursite.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>php-fpm如何合理设置max_chindren和pm模式，包括开启status监听</title>
    <link href="http://yoursite.com/2017/06/12/php-fpm%E5%A6%82%E4%BD%95%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AEmax_chindren%E5%92%8Cpm%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%8C%85%E6%8B%AC%E5%BC%80%E5%90%AFstatus%E7%9B%91%E5%90%AC/"/>
    <id>http://yoursite.com/2017/06/12/php-fpm如何合理设置max_chindren和pm模式，包括开启status监听/</id>
    <published>2017-06-12T11:37:45.000Z</published>
    <updated>2019-01-24T08:06:26.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="php-fpm如何合理设置max-chindren和pm模式，包括开启status监听"><a href="#php-fpm如何合理设置max-chindren和pm模式，包括开启status监听" class="headerlink" title="php-fpm如何合理设置max_chindren和pm模式，包括开启status监听"></a>php-fpm如何合理设置max_chindren和pm模式，包括开启status监听</h2><h3 id="开启status获得执行状态"><a href="#开启status获得执行状态" class="headerlink" title="开启status获得执行状态"></a>开启status获得执行状态</h3><h4 id="启用php-fpm状态功能"><a href="#启用php-fpm状态功能" class="headerlink" title="启用php-fpm状态功能"></a>启用php-fpm状态功能</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/php-fpm.d/www.conf</span><br><span class="line">修改：</span><br><span class="line">pm.status_path = /status</span><br></pre></td></tr></table></figure><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ ^/status$</span></span><br><span class="line"><span class="regexp"></span>    &#123;</span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重启nginx和php-fpm"><a href="#重启nginx和php-fpm" class="headerlink" title="重启nginx和php-fpm"></a>重启nginx和php-fpm</h4><h4 id="打开status页面"><a href="#打开status页面" class="headerlink" title="打开status页面"></a>打开status页面</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac ~]<span class="comment"># curl http://visit.ma/status</span></span><br><span class="line">pool:                 www</span><br><span class="line">process manager:      dynamic</span><br><span class="line">start time:           <span class="number">23</span>/Jul/<span class="number">2018</span>:<span class="number">15</span>:<span class="number">32</span>:<span class="number">09</span> +<span class="number">0800</span></span><br><span class="line">start since:          <span class="number">1055</span></span><br><span class="line">accepted conn:        <span class="number">9</span></span><br><span class="line">listen queue:         <span class="number">0</span></span><br><span class="line">max listen queue:     <span class="number">0</span></span><br><span class="line">listen queue len:     <span class="number">128</span></span><br><span class="line">idle processes:       <span class="number">5</span></span><br><span class="line">active processes:     <span class="number">1</span></span><br><span class="line">total processes:      <span class="number">6</span></span><br><span class="line">max active processes: <span class="number">1</span></span><br><span class="line">max children reached: <span class="number">0</span></span><br><span class="line">slow requests:        <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h4><p><strong>pool</strong> – fpm池子名称，大多数为www<br><strong>process manager</strong> – 进程管理方式,值：static, dynamic or ondemand. dynamic<br><strong>start time</strong> – 启动日期,如果reload了php-fpm，时间会更新<br><strong>start since</strong> – 运行时长<br><strong>accepted conn</strong> – 当前池子接受的请求数<br><strong>listen queue</strong> – 请求等待队列，如果这个值不为0，那么要增加FPM的进程数量<br><strong>max listen queue</strong> – 请求等待队列最高的数量<br><strong>listen queue len</strong> – socket等待队列长度<br><strong>idle processes</strong> – 空闲进程数量<br><strong>active processes</strong> – 活跃进程数量<br>total processes – 总进程数量<br><strong>max active processes</strong> – 最大的活跃进程数量（FPM启动开始算）<br><strong>max children reached</strong>  - 大道进程最大数量限制的次数，如果这个数量不为0，那说明你的最大进程数量太小了，请改大一点。<br><strong>slow requests</strong> – 启用了php-fpm slow-log，缓慢请求的数量</p><h4 id="php-fpm其他参数"><a href="#php-fpm其他参数" class="headerlink" title="php-fpm其他参数"></a>php-fpm其他参数</h4><p><strong>php-fpm</strong>状态页比较个性化的一个地方是它可以带参数，可以带参数<strong>json</strong>、<strong>xml</strong>、<strong>html</strong>并且前面三个参数可以分别和<strong>full</strong>做一个组合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">curl http://visit.ma/status?json</span><br><span class="line">curl http://visit.ma/status?xml</span><br><span class="line">curl http://visit.ma/status?html</span><br><span class="line">curl http://visit.ma/status?full</span><br><span class="line"></span><br><span class="line">[root@b04f945297ac ~]# curl http://visit.ma/status?full</span><br><span class="line">pool:                 www</span><br><span class="line">process manager:      dynamic</span><br><span class="line">start time:           23/Jul/2018:15:32:09 +0800</span><br><span class="line">start since:          1240</span><br><span class="line">accepted conn:        10</span><br><span class="line">listen queue:         0</span><br><span class="line">max listen queue:     0</span><br><span class="line">listen queue len:     128</span><br><span class="line">idle processes:       5</span><br><span class="line">active processes:     1</span><br><span class="line">total processes:      6</span><br><span class="line">max active processes: 1</span><br><span class="line">max children reached: 0</span><br><span class="line">slow requests:        0</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  5466</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           23/Jul/2018:15:32:09 +0800</span><br><span class="line">start since:          1240</span><br><span class="line">requests:             2</span><br><span class="line">request duration:     99</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  2097152</span><br><span class="line">************************</span><br><span class="line">pid:                  5467</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           23/Jul/2018:15:32:09 +0800</span><br><span class="line">start since:          1240</span><br><span class="line">requests:             2</span><br><span class="line">request duration:     184</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status?full</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  2097152</span><br></pre></td></tr></table></figure><p>这里重点说下<strong>full</strong>参数详解</p><p><strong>pid</strong> – 进程PID，可以单独kill这个进程. You can use this PID to kill a long running process.<br><strong>state</strong> – 当前进程的状态 (Idle, Running, …)<br><strong>start time</strong> – 进程启动的日期<br><strong>start since</strong> – 当前进程运行时长<br><strong>requests</strong> – 当前进程处理了多少个请求<br><strong>request duration</strong> – 请求时长（微妙）<br>request method – 请求方法 (GET, POST, …)<br><strong>request URI</strong> – 请求URI<br><strong>content length</strong> – 请求内容长度 (仅用于 POST)<br><strong>user</strong> – 用户 (PHP_AUTH_USER) (or ‘-’ 如果没设置)<br><strong>script</strong> – PHP脚本 (or ‘-’ if not set)<br><strong>last request cpu</strong> – 最后一个请求CPU使用率<br><strong>last request memorythe</strong> - 上一个请求使用的内存</p><h3 id="合理设置max-chindren和pm模式"><a href="#合理设置max-chindren和pm模式" class="headerlink" title="合理设置max_chindren和pm模式"></a>合理设置max_chindren和pm模式</h3><p><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Nginx%2BPHP/htop.png" alt="htop"></p><p>使用htop命令查看单个php-fpm所申请的VIRT大小，我32G服务器是400左右（实际要除以8=M，就是：50M左右），如果按照每个进程消耗50M*1.5倍=75M左右，如果你的服务器内存是32G，我们假设可用于php-fpm的内存为60%=20G，则：20*1024/75=273，所以，一般我们建议max_chindren最大为273，最好还是设置为：8的倍数，所以我设置为256.</p><p>然后我们可以根据域名/status的结果来合理设置其他参数（<strong>pm.start_servers</strong>和<strong>pm.min_spare_servers</strong>和<strong>pm.max_spare_servers</strong>）</p><p>在php.ini中，我们可以看到<strong>memory_limit</strong>有一句这样的原文，<code>Maximum amount of memory a script may consume (128MB)</code>，就是说单个进程使用的最大内存大小，这个参数吧，当然不能低于刚刚计算的75M了，一般我们可以设置为3倍，则75*3=225M左右（建议：128，256，512，1024…）</p><p>这里假如有攻击的话，max_chindren=256，memory_limit=256，256*256=64G，很明显会导致内存爆满，所以如果想又保持性能，又能一定程度上防止内存爆满，可以将max_chindren设置的低一点，memory_limit可以设置为每个进程消耗的值（一般不建议低于128M吧，如果是独立服务器的话）。</p><h4 id="PHP-FPM-子进程数量，是不是越多越好？"><a href="#PHP-FPM-子进程数量，是不是越多越好？" class="headerlink" title="PHP-FPM 子进程数量，是不是越多越好？"></a>PHP-FPM 子进程数量，是不是越多越好？</h4><p>当然不是，pm.max_chindren，进程多了，增加进程管理的开销以及上下文切换的开销。</p><p>更核心的是，<strong>能并发执行的 php-fpm 进程不会超过 cpu 个数</strong>。</p><p>如何设置，取决于你的代码</p><p>如果代码是 CPU 计算密集型的，pm.max_chindren 不能超过 CPU 的内核数。</p><p>如果不是，那么将 pm.max_chindren 的值大于 CPU 的内核数，是非常明智的。<br>国外技术大拿给出这么个公式：</p><p>在 N + 20% 和 M/m 之间。</p><p>N 是 CPU 内核数量。<br>M 是 PHP 能利用的内存数量。<br>m 是每个 PHP 进程平均使用的内存数量。<br>适用于 <strong>dynamic</strong> 方式。</p><p><strong>static方式：M/(m * 1.2)</strong></p><p>当然，还有一种保险的方式，来配置 max_children。适用于 static 方式。</p><p>先把 max_childnren 设置成一个比较大的值。<br>稳定运行一段时间后，观察 php-fpm 的 status 里的 max<br>active processes 是多少<br>然后把 max_children 配置比它大一些就可以了。<br>pm.max_requests：指的是每个子进程在处理了多少个请求数量之后就重启。</p><p>这个参数，理论上可以随便设置，但是为了预防内存泄漏的风险，还是设置一个合理的数比较好</p><p>所以，我的服务器32G内存设置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">memory_limit = 256M</span><br><span class="line">pm = dynamic</span><br><span class="line">pm.max_children = 256</span><br><span class="line">pm.start_servers = 32</span><br><span class="line">pm.min_spare_servers = 16</span><br><span class="line">pm.max_spare_servers = 32</span><br></pre></td></tr></table></figure><blockquote><p> pm.max_children：静态方式下开启的php-fpm进程数量。</p><p>pm.start_servers：动态方式下的起始php-fpm进程数量。</p><p>pm.min_spare_servers：动态方式下的最小php-fpm进程数量。</p><p>pm.max_spare_servers：动态方式下的最大php-fpm进程数量。</p><p><strong>如果dm设置为static，那么其实只有pm.max_children这个参数生效。系统会开启设置数量的php-fpm进程。</strong></p><p><strong>如果dm设置为static，那么其实只有pm.max_children这个参数生效。系统会开启设置数量的php-fpm进程。</strong></p></blockquote><p><a href="http://www.zhanghongliang.com/article/1300" target="_blank" rel="noopener">http://www.zhanghongliang.com/article/1300</a></p><p><a href="http://www.ttlsa.com/php/use-php-fpm-status-page-detail/" target="_blank" rel="noopener">http://www.ttlsa.com/php/use-php-fpm-status-page-detail/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;php-fpm如何合理设置max-chindren和pm模式，包括开启status监听&quot;&gt;&lt;a href=&quot;#php-fpm如何合理设置max-chindren和pm模式，包括开启status监听&quot; class=&quot;headerlink&quot; title=&quot;php-fp
      
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>抽象类和接口</title>
    <link href="http://yoursite.com/2017/06/12/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2017/06/12/抽象类和接口/</id>
    <published>2017-06-12T11:37:45.000Z</published>
    <updated>2019-01-24T08:07:43.296Z</updated>
    
    <content type="html"><![CDATA[<p>来自这里<a href="https://blog.csdn.net/sunlylorn/article/details/6124319" target="_blank" rel="noopener">https://blog.csdn.net/sunlylorn/article/details/6124319</a></p><h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li><p>一个类中如果有一个方法是抽象方法，那么这个类必须定义为抽象类</p></li><li><p>抽象类是指在 class 前加了 abstract 关键字且存在抽象方法（在类方法 function 关键字前加了 abstract 关键字）的类。</p></li><li><p>抽象类不能直接实例化，抽象类中只定义（或部分实现）子类需要的方法。子类可以通过继承抽象类并通过实现抽象类中的所有抽象方法，使抽象类具体化。</p></li><li><p>如果子类需要实例化，前提是它实现了抽象类中的所有抽象方法。如果子类没有全部实现抽象类中的所有抽象方法，那么该子类也是一个抽象类，必须在 class 前面加上 abstract 关键字，并且不能被实例化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">     <span class="comment">/** 抽象类中可以定义变量 */</span>  </span><br><span class="line">    <span class="keyword">protected</span> $value1 = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">private</span> $value2 = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">public</span> $value3 = <span class="number">2</span>;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 大多数情况下，抽象类至少含有一个抽象方法。抽象方法用abstract关键字声明，其中不能有具体内容。 </span></span><br><span class="line"><span class="comment">     * 可以像声明普通类方法那样声明抽象方法，但是要以分号而不是方法体结束。也就是说抽象方法在抽象类中不能被实现，也就是没有函数体“&#123;some codes&#125;”。 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">talk</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="comment">/** 也可以定义非抽象方法 */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"run function"</span> .PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Service</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"say function"</span> .PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">jump</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiniA</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">talk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"talk function "</span>.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">other</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;jump();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$class = <span class="keyword">new</span> MiniA();</span><br><span class="line">$class-&gt;talk();</span><br><span class="line">$class-&gt;other();</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="接口类"><a href="#接口类" class="headerlink" title="接口类"></a>接口类</h3><p>PHP接口类interface就是一个类的领导者，指明方向，<code>子类必须完成它指定方法</code></p><ul><li><p>抽象类提供了具体实现的标准，而接口则是纯粹的模版。接口只定义功能，而不包含实现的内容。接口用关键字 interface 来声明。</p></li><li><p>interface 是完全抽象的，只能声明方法，而且只能声明 public 的方法，不能声明 private 及 protected 的方法，不能定义方法体，也<strong>不能声明实例变量 </strong>。然而， <strong>interface 却可以声明常量变量</strong> 。但将常量变量放在 interface 中违背了其作为接口的作用而存在的宗旨，也混淆了 interface 与类的不同价值。如果的确需要，可以将其放在相应的 abstract class 或 Class 中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">const</span> NAME = <span class="string">'zhimma'</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">talk</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">echo</span> Bar:: NAME;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>任何实现接口的类都要实现接口中所定义的所有方法,否则该类必须声明为 abstract 。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement say() method.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">talk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement talk() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">X</span> <span class="keyword">implements</span> <span class="title">Bar</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>一个类可以在声明中使用 implements 关键字来实现某个接口。这么做之后，实现接口的具体过程和继承一个仅包含抽象方法的抽象类是一样的。一个类可以同时继承一个父类和实现任意多个接口。 extends 子句应该在 implements 子句之前。 PHP 只支持继承自一个父类，因此 extends 关键字后只能跟一个类名。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement say() method.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">talk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement talk() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>接口不可以实现另一个接口，但可以继承多个</p><p>​</p><p>​</p></li></ul><h3 id="抽象类对比接口"><a href="#抽象类对比接口" class="headerlink" title="抽象类对比接口"></a>抽象类对比接口</h3><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><ul><li>两者都是抽象类，都不能实例化。</li><li>interface 实现类及 abstract class 的子类都必须要实现已经声明的抽象方法。</li></ul><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ul><li>interface 需要实现，要用 implements ，而 abstract class 需要继承，要用 extends 。</li><li>一个类可以实现多个 interface ，但一个类只能继承一个 abstract class </li><li>interface 强调特定功能的实现，而 abstract class 强调所属关系。</li><li>尽管 interface 实现类及 abstract class 的子类都必须要实现相应的抽象方法，但实现的形式不同。 interface 中的每一个方法都是抽象方法，都只是声明的 (declaration, 没有方法体 ) ，实现类必须要实现。而 abstract class 的子类可以有选择地实现。<ul><li>abstract class 中并非所有的方法都是抽象的，只有那些冠有 abstract 的方法才是抽象的，子类必须实现。那些没有 abstract 的方法，在 abstract class 中必须定义方法体</li><li>abstract class 的子类在继承它时，对非抽象方法既可以直接继承，也可以覆盖；而对抽象方法，可以选择实现，也可以留给其子类来实现，但此类必须也声明为抽象类。既是抽象类，当然也不能实例化。</li></ul></li><li>abstract class 是 interface 与 class 的中介。 abstract class 在 interface 及 class 中起到了承上启下的作用。一方面， abstract class 是抽象的，可以声明抽象方法，以规范子类必须实现的功能；另一方面，它又可以定义缺省的方法体，供子类直接使用或覆盖。另外，它还可以定义自己的实例变量，以供子类通过继承来使用。</li><li>接口中的抽象方法前不用也不能加 abstract 关键字，默认隐式就是抽象方法，也不能加 final关键字来防止抽象方法的继承。而抽象类中抽象方法前则必须加上 abstract 表示显示声明为抽象方法。</li><li>接口中的抽象方法默认是 public 的，也只能是 public 的，不能用 private ， protected 修饰符修饰。而抽象类中的抽象方法则可以用 public ， protected 来修饰，但不能用 private </li></ul><h3 id="应用场合"><a href="#应用场合" class="headerlink" title="应用场合"></a>应用场合</h3><h4 id="interface-的应用场合"><a href="#interface-的应用场合" class="headerlink" title="interface 的应用场合"></a>interface 的应用场合</h4><ul><li>类与类之间需要特定的接口进行协调，而不在乎其如何实现</li><li>作为能够实现特定功能的标识存在，也可以是什么接口方法都没有的纯粹标识。</li><li>需要将一组类视为单一的类，而调用者只通过接口来与这组类发生联系。</li><li>需要实现特定的多项功能，而这些功能之间可能完全没有任何联系。</li></ul><h4 id="abstract-的应用场合"><a href="#abstract-的应用场合" class="headerlink" title="abstract 的应用场合"></a>abstract 的应用场合</h4><p>在既需要统一的接口，又需要实例变量或缺省的方法的情况下，就可以使用它</p><ul><li>定义了一组接口，但又不想强迫每个实现类都必须实现所有的接口。可以用 abstract class 定义一组方法体，甚至可以是空方法体，然后由子类选择自己所感兴趣的方法来覆盖</li><li>某些场合下，只靠纯粹的接口不能满足类与类之间的协调，还必需类中表示状态的变量来区别不同的关系。 abstract 的中介作用可以很好地满足这一点。</li><li>规范了一组相互协调的方法，其中一些方法是共同的，与状态无关的，可以共享的，无需子类分别实现；而另一些方法却需要各个子类根据自己特定的状态来实现特 定的功能 。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;来自这里&lt;a href=&quot;https://blog.csdn.net/sunlylorn/article/details/6124319&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/sunlylorn/arti
      
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>搞懂JWT</title>
    <link href="http://yoursite.com/2017/06/12/%E6%90%9E%E6%87%82JWT/"/>
    <id>http://yoursite.com/2017/06/12/搞懂JWT/</id>
    <published>2017-06-12T11:37:45.000Z</published>
    <updated>2019-01-24T08:08:01.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搞懂JWT"><a href="#搞懂JWT" class="headerlink" title="搞懂JWT"></a>搞懂JWT</h1><p>本文基本一字不差的转载至<a href="http://blog.leapoahead.com/2015/09/06/understanding-jwt/" target="_blank" rel="noopener">这里</a></p><p>JSON Web Token（JWT）是一个非常轻巧的<a href="https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32" target="_blank" rel="noopener">规范</a>。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息</p><p>让我们来假想一下一个场景。在A用户关注了B用户的时候，系统发邮件给B用户，并且附有一个链接“点此关注A用户”。链接的地址可以是这样的<br><code>https://your.awesome-app.com/make-friend/?from_user=B&amp;target_user=A</code><br>上面的URL主要通过URL来描述这个当然这样做有一个弊端，那就是要求用户B用户是一定要先登录的。可不可以简化这个流程，让B用户不用登录就可以完成这个操作。JWT就允许我们做到这点。<br><img src="https://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP/jwt.png" alt="jwt"></p><h3 id="JWT的组成"><a href="#JWT的组成" class="headerlink" title="JWT的组成"></a>JWT的组成</h3><p>一个JWT实际上就是一个字符串，它由三部分组成，<strong>头部</strong>、<strong>载荷</strong>与<strong>签名</strong></p><h5 id="载荷（Payload）"><a href="#载荷（Payload）" class="headerlink" title="载荷（Payload）"></a>载荷（Payload）</h5><p>我们先将上面的添加好友的操作描述成一个JSON对象。其中添加了一些其他的信息，帮助今后收到这个JWT的服务器理解这个JWT。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">"iss"</span>: <span class="string">"John Wu JWT"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"iat"</span>: <span class="number">1441593502</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"exp"</span>: <span class="number">1441594722</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"aud"</span>: <span class="string">"www.example.com"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"sub"</span>: <span class="string">"jrocket@example.com"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"from_user"</span>: <span class="string">"B"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"target_user"</span>: <span class="string">"A"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里面的前五个字段都是由JWT的标准所定义的。</p><ul><li><code>iss</code>: 该JWT的签发者</li><li><code>sub</code>: 该JWT所面向的用户</li><li><code>aud</code>: 接收该JWT的一方</li><li><code>exp</code>(expires): 什么时候过期，这里是一个Unix时间戳</li><li><code>iat</code>(issued at): 在什么时候签发的</li></ul><p>这些定义都可以在<a href="https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32" target="_blank" rel="noopener">标准</a>中找到。<br>将上面的JSON对象进行[base64编码]可以得到下面的字符串。这个字符串我们将它称作JWT的<strong>Payload</strong>（载荷）。</p><p><code>eyJpc3MiOiJKb2huIFd1IEpXVCIsImlhdCI6MTQ0MTU5MzUwMiwiZXhwIjoxNDQxNTk0NzIyLCJhdWQiOiJ3d3cuZXhhbXBsZS5jb20iLCJzdWIiOiJqcm9ja2V0QGV4YW1wbGUuY29tIiwiZnJvbV91c2VyIjoiQiIsInRhcmdldF91c2VyIjoiQSJ9</code></p><p>如果你使用Node.js，可以用Node.js的包<a href="https://github.com/brianloveswords/base64url" target="_blank" rel="noopener">base64url</a>来得到这个字符串<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> base64url = <span class="built_in">require</span>(<span class="string">'base64url'</span>)</span><br><span class="line"><span class="keyword">var</span> header = &#123;</span><br><span class="line">    <span class="string">"from_user"</span>: <span class="string">"B"</span>,</span><br><span class="line">    <span class="string">"target_user"</span>: <span class="string">"A"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(base64url(<span class="built_in">JSON</span>.stringify(header)))</span><br><span class="line"><span class="comment">// 输出：eyJpc3MiOiJKb2huIFd1IEpXVCIsImlhdCI6MTQ0MTU5MzUwMiwiZXhwIjoxNDQxNTk0NzIyLCJhdWQiOiJ3d3cuZXhhbXBsZS5jb20iLCJzdWIiOiJqcm9ja2V0QGV4YW1wbGUuY29tIiwiZnJvbV91c2VyIjoiQiIsInRhcmdldF91c2VyIjoiQSJ9</span></span><br></pre></td></tr></table></figure></p><blockquote><p>小知识：Base64是一种编码，也就是说，它是可以被翻译回原来的样子来的。它并不是一种加密过程。</p></blockquote><h5 id="头部（Header）"><a href="#头部（Header）" class="headerlink" title="头部（Header）"></a>头部（Header）</h5><p>JWT还需要一个头部，头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里，我们说明了这是一个JWT，并且我们所用的签名算法（后面会提到）是HS256算法。<br>对它也要进行Base64编码，之后的字符串就成了JWT的<strong>Header</strong>（头部）。<code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</code></p><h5 id="签名（签名）"><a href="#签名（签名）" class="headerlink" title="签名（签名）"></a>签名（签名）</h5><p>将上面的两个编码后的字符串都用句号<code>.</code>连接在一起（头部在前），就形成了<br><code>yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcm9tX3VzZXIiOiJCIiwidGFyZ2V0X3VzZXIiOiJBIn0</code><br>这一部分的过程在<a href="https://github.com/brianloveswords/node-jws/blob/master/lib/sign-stream.js" target="_blank" rel="noopener">node-jws的源码</a>中有体现</p><p>最后，我们将上面拼接完的字符串用HS256算法进行加密。在加密的时候，我们还需要提供一个密钥（secret）。如果我们用<code>mystar</code>作为密钥的话，那么就可以得到我们加密后的内容<br><code>rSWamyAYwuHCo7IFAgd1oRpSP7nzL7BF5t7ItqpKViM</code><br>这一部分又叫做<strong>签名</strong>。</p><p><img src="https://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP/sig1.png" alt="签名"><br>最后将这一部分签名也拼接在被签名的字符串后面，我们就得到了完整的JWT<br><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcm9tX3VzZXIiOiJCIiwidGFyZ2V0X3VzZXIiOiJBIn0.rSWamyAYwuHCo7IFAgd1oRpSP7nzL7BF5t7ItqpKViM</code></p><p>于是，我们就可以将邮件中的URL改成<br><code>https://your.awesome-app.com/make-friend/?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcm9tX3VzZXIiOiJCIiwidGFyZ2V0X3VzZXIiOiJBIn0.rSWamyAYwuHCo7IFAgd1oRpSP7nzL7BF5t7ItqpKViM</code><br>这样就可以安全地完成添加好友的操作了！<br>且慢，我们一定会有一些问题：</p><ol><li>签名的目的是什么？</li><li>Base64是一种编码，是可逆的，那么我的信息不就被暴露了吗？<br>让我逐一为你说明。</li></ol><h3 id="签名的目的"><a href="#签名的目的" class="headerlink" title="签名的目的"></a>签名的目的</h3><p>最后一步签名的过程，实际上是对头部以及载荷内容进行签名。一般而言，加密算法对于不同的输入产生的输出总是不一样的。对于两个不同的输入，产生同样的输出的概率极其地小（有可能比我成世界首富的概率还小）。所以，我们就把“不一样的输入产生不一样的输出”当做必然事件来看待吧。</p><p>所以，如果有人对头部以及载荷的内容解码之后进行修改，再进行编码的话，那么新的头部和载荷的签名和之前的签名就将是不一样的。而且，如果不知道服务器加密的时候用的密钥的话，得出来的签名也一定会是不一样的。</p><p><img src="https://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP/sig2.png" alt="sig2"><br>服务器应用在接受到JWT后，会首先对头部和载荷的内容用同一算法再次签名。那么服务器应用是怎么知道我们用的是哪一种算法呢？别忘了，我们在JWT的头部中已经用<code>alg</code>字段指明了我们的加密算法了。</p><p>如果服务器应用对头部和载荷再次以同样方法签名之后发现，自己计算出来的签名和接受到的签名不一样，那么就说明这个Token的内容被别人动过的，我们应该拒绝这个Token，返回一个HTTP 401 Unauthorized响应。</p><h3 id="信息会暴露？"><a href="#信息会暴露？" class="headerlink" title="信息会暴露？"></a>信息会暴露？</h3><p>是的。</p><p>所以，在JWT中，不应该在载荷里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID。这个值实际上不是什么敏感内容，一般情况下被知道也是安全的。</p><p>但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第三方通过Base64解码就能很快地知道你的密码了。</p><h3 id="JWT的适用场景"><a href="#JWT的适用场景" class="headerlink" title="JWT的适用场景"></a>JWT的适用场景</h3><p>我们可以看到，JWT适合用于向Web应用传递一些非敏感信息。例如在上面提到的完成加好友的操作，还有诸如下订单的操作等等。</p><p>其实JWT还经常用于设计用户认证和授权系统，甚至实现Web应用的单点登录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搞懂JWT&quot;&gt;&lt;a href=&quot;#搞懂JWT&quot; class=&quot;headerlink&quot; title=&quot;搞懂JWT&quot;&gt;&lt;/a&gt;搞懂JWT&lt;/h1&gt;&lt;p&gt;本文基本一字不差的转载至&lt;a href=&quot;http://blog.leapoahead.com/2015/09/06
      
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="JWT" scheme="http://yoursite.com/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>搬瓦工Cenots7 实现BBR加速以及SS安装</title>
    <link href="http://yoursite.com/2017/06/12/%E6%90%AC%E7%93%A6%E5%B7%A5Cenots7%20%E5%AE%9E%E7%8E%B0BBR%E5%8A%A0%E9%80%9F%E4%BB%A5%E5%8F%8ASS%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2017/06/12/搬瓦工Cenots7 实现BBR加速以及SS安装/</id>
    <published>2017-06-12T11:37:45.000Z</published>
    <updated>2019-01-24T08:08:30.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h3 id="环境-centos7-64位"><a href="#环境-centos7-64位" class="headerlink" title="环境:   centos7 64位"></a>环境:   <code>centos7 64位</code></h3><h3 id="1、一键安装Shadowsock"><a href="#1、一键安装Shadowsock" class="headerlink" title="1、一键安装Shadowsock"></a>1、一键安装Shadowsock</h3><ul><li>下载脚本<br> <code>wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh</code> </li><li>增加执行权限<br> <code>chmod +x shadowsocks-libev.sh</code> </li><li>运行<br> <code>./shadowsocks-libev.sh 2&gt;&amp;1 | tee shadowsocks-libev.log</code> </li></ul><blockquote><p>安装过程中会提示配置端口、密码、加密方式。</p></blockquote><ul><li>卸载:<br> <code>./shadowsocks-libev.sh uninstall</code></li><li>ss控制</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">启动：/etc/init.d/shadowsocks start </span><br><span class="line">停止：/etc/init.d/shadowsocks stop </span><br><span class="line">重启：/etc/init.d/shadowsocks restart </span><br><span class="line">查看状态：/etc/init.d/shadowsocks status</span><br></pre></td></tr></table></figure><h3 id="2、安装BBR加速"><a href="#2、安装BBR加速" class="headerlink" title="2、安装BBR加速"></a>2、安装BBR加速</h3><blockquote><p>目前支持的Linux系统包括：Ubuntu 14.04 x64、Ubuntu 16.04 x64、CentOS 6 x64、CentOS 7 x64 只支持 64 位系统，要求 glibc 版本 2.14 以上。</p></blockquote><ul><li>关闭防火墙</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、systemctl disable firewalld</span><br><span class="line">2、systemctl stop firewalld</span><br></pre></td></tr></table></figure><ul><li>BBR安装脚本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、wget https://raw.githubusercontent.com/kuoruan/shell-scripts/master/ovz-bbr/ovz-bbr-installer.sh</span><br><span class="line">2、chmod +x ovz-bbr-installer.sh</span><br><span class="line">3、./ovz-bbr-installer.sh</span><br></pre></td></tr></table></figure><blockquote><p>安装过程中，会提示加速端口(可以更改)</p></blockquote><ul><li>判断BBR是否正常工作</li></ul><h4 id="ping-10-0-0-2-如果能通，则代表启动成功"><a href="#ping-10-0-0-2-如果能通，则代表启动成功" class="headerlink" title="ping 10.0.0.2 如果能通，则代表启动成功"></a>ping 10.0.0.2 如果能通，则代表启动成功</h4><ul><li>控制bbr</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl &#123;start|stop|restart|status&#125; haproxy-lkl</span><br></pre></td></tr></table></figure><ul><li>配置bbr加速端口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/haproxy-lkl/etc/port-rules</span><br></pre></td></tr></table></figure><blockquote><p>一行一个端口，可写范围</p></blockquote><ul><li>​    卸载BBR<br> ​    </li></ul><p>作者：我是你的nobita</p><p>链接：<a href="https://www.jianshu.com/p/9f27d4cabd40" target="_blank" rel="noopener">https://www.jianshu.com/p/9f27d4cabd40</a></p><p>來源：简书</p><p>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;h3 id=&quot;环境-centos7-64位&quot;&gt;&lt;a href=&quot;#环境-centos7-64位&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>正向代理和反向代理</title>
    <link href="http://yoursite.com/2017/06/12/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2017/06/12/正向代理和反向代理/</id>
    <published>2017-06-12T11:37:45.000Z</published>
    <updated>2019-01-24T08:09:22.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>正向代理是一个位于<strong>客户端和目标服务器之间的代理服务器（中间服务器）</strong>。为了从原始服务器取得内容，客户端向代理服务器发送一个请求，并且指定目标服务器，之后代理向目标服务器转交并且将获得的内容返回给客户端。正向代理的情况下客户端必须要进行一些特别的设置才能使用。</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>反向代理正好相反。对于客户端来说，反向代理就好像目标服务器。并且客户端不需要进行任何设置。客户端向反向代理发送请求，接着反向代理判断请求走向何处，并将请求转交给客户端，使得这些内容就好似他自己一样，一次客户端并不会感知到反向代理后面的服务，也因此不需要客户端做任何设置，只需要把反向代理服务器当成真正的服务器就好了。</p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="访问形式区分："><a href="#访问形式区分：" class="headerlink" title="访问形式区分："></a>访问形式区分：</h2><p>正向代理需要你主动设置代理服务器ip或者域名进行访问，由设置的服务器ip或者域名去获取访问内容并返回；<br>正向代理是代理客户端，为客户端收发请求，使真实客户端对服务器不可见；<br>反向代理不需要你做任何设置，直接访问服务器真实ip或者域名，但是服务器内部会自动根据访问内容进行跳转及内容返回，你不知道它最终访问的是哪些机器。<br>反向代理是代理服务器端，为服务器收发请求，使真实服务器对客户端不可见。<br>从上面的描述也能看得出来正向代理和反向代理最关键的两点区别：</p><ol><li>是否指定目标服务器</li><li>客户端是否要做设置<br><img src="https://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP/%E4%BB%A3%E7%90%86.jpeg" alt="代理"><br>正向代理中，proxy和client同属一个LAN，对server透明； 反向代理中，proxy和server同属一个LAN，对client透明。 实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把前者那种代理方式叫做正向代理，后者叫做反向代理。<h2 id="用途上来区分："><a href="#用途上来区分：" class="headerlink" title="用途上来区分："></a>用途上来区分：</h2>正向代理：正向代理用途是为了在防火墙内的局域网提供访问internet的途径。另外还可以使用缓冲特性减少网络使用率<br>反向代理：反向代理的用途是将防火墙后面的服务器提供给internet用户访问。同时还可以完成诸如负载均衡等功能<h2 id="从安全性来讲："><a href="#从安全性来讲：" class="headerlink" title="从安全性来讲："></a>从安全性来讲：</h2>正向代理：正向代理允许客户端通过它访问任意网站并且隐蔽客户端自身，因此你必须采取安全措施来确保仅为经过授权的客户端提供服务<br>反向代理：对外是透明的，访问者并不知道自己访问的是代理。对访问者而言，他以为访问的就是原始服务器<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><h2 id="正向代理-1"><a href="#正向代理-1" class="headerlink" title="正向代理"></a>正向代理</h2>从上面的介绍也就可以猜出来正向代理的至少一个功能（俗称翻墙），也即：</li></ol><p>用户A无法访问facebook，但是能访问服务器B，而服务器B可以访问facebook。于是用户A访问服务器B，通过服务器B去访问facebook，，服务器B收到请求后，去访问facebook，facebook把响应信息返回给服务器B，服务器B再把响应信息返回给A。这样，通过代理服务器B，就实现了翻墙。</p><h2 id="反向代理-1"><a href="#反向代理-1" class="headerlink" title="反向代理"></a>反向代理</h2><p>从上面的介绍也可以猜出来反向代理的至少一个功能（比如负载均衡），也即：</p><p>假设用户A访问 <a href="http://www.somesite.com/something.html，但www.somesite.com上并不存在something.html页面，于是接收用户请求的该服务器就偷偷从另外一台服务器上取回来，然后返回给用户，而用户并不知道something.html页面究竟位于哪台机器上。" target="_blank" rel="noopener">http://www.somesite.com/something.html，但www.somesite.com上并不存在something.html页面，于是接收用户请求的该服务器就偷偷从另外一台服务器上取回来，然后返回给用户，而用户并不知道something.html页面究竟位于哪台机器上。</a></p><p>反向代理的作用就比较多了，这里简单列举一下：</p><ul><li>保护和隐藏原始资源服务器</li><li>加密和SSL加速</li><li>负载均衡</li></ul><ul><li>缓存静态内容</li><li>压缩</li><li>减速上传</li><li>安全</li><li>外网发布</li></ul><p>下面做两个简单介绍</p><h3 id="保护和隐藏原始资源服务器"><a href="#保护和隐藏原始资源服务器" class="headerlink" title="保护和隐藏原始资源服务器"></a>保护和隐藏原始资源服务器</h3><p><img src="https://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP/%E4%BF%9D%E6%8A%A4%E5%92%8C%E9%9A%90%E8%97%8F%E5%8E%9F%E5%A7%8B%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8.jpeg" alt="保护和隐藏原始资源服务器"><br>用户A始终认为它访问的是原始服务器B而不是代理服务器Z，但实用际上反向代理服务器接受用户A的应答，从原始资源服务器B中取得用户A的需求资源，然后发送给用户A。由于防火墙的作用，只允许代理服务器Z访问原始资源服务器B。尽管在这个虚拟的环境下，防火墙和反向代理的共同作用保护了原始资源服务器B，但用户A并不知情。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p><img src="https://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.jpeg" alt="负载均衡"><br>当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器B的时候，让不同的代理服务器Z（x）去应答不同的用户，然后发送不同用户需要的资源。</p><h2 id="透明代理"><a href="#透明代理" class="headerlink" title="透明代理"></a>透明代理</h2><p>透明代理比较类似正向代理的功能，差别在于客户端根本不知道代理的存在，它改编你的request，并会传送真实IP（使用场景就是公司限制网络的访问）。</p><p>比如为了工作效率或者安全，A公司屏蔽了QQ软件的使用。A公司的员工接上了网络，但发现无法使用qq。这就是透明代理捣的鬼。公司在内网和外网的中间插入一个透明代理，这个代理会根据规则抓取请求内容，遇到qq的请求我就把这个请求给屏蔽掉，这样就完成了透明屏蔽。当然了，如果你明白原理，就可以自己搞个正向代理来绕过公司的屏蔽。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;h2 id=&quot;正向代理&quot;&gt;&lt;a href=&quot;#正向代理&quot; class=&quot;headerlink&quot; title=&quot;正向代理&quot;&gt;&lt;/a&gt;正向代理&lt;/h
      
    
    </summary>
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://yoursite.com/2017/06/12/Git/"/>
    <id>http://yoursite.com/2017/06/12/Git/</id>
    <published>2017-06-12T11:37:45.000Z</published>
    <updated>2019-01-24T08:02:20.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="集中式vs分布式"><a href="#集中式vs分布式" class="headerlink" title="集中式vs分布式"></a>集中式vs分布式</h3><p><strong>集中式</strong>版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。<br><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Git/%E9%9B%86%E4%B8%AD%E5%BC%8F.jpeg" alt="集中式"></p><p>集中式版本控制系统最大的毛病就是必须联网才能工作</p><p><strong>分布式</strong>版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。<br><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Git/%E5%88%86%E5%B8%83%E5%BC%8F.jpeg" alt="分布式"></p><h3 id="安装后的配置"><a href="#安装后的配置" class="headerlink" title="安装后的配置"></a>安装后的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br><span class="line">$ git config --global color.ui true //Git会适当地显示不同的颜色</span><br><span class="line">$ git config --global alias.st status</span><br><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line">$ git config --global alias.br branch</span><br><span class="line">&amp; git config --global alias.last &apos;log -1&apos;</span><br></pre></td></tr></table></figure><blockquote><p>Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。<br><code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p></blockquote><h3 id="文件的增删改查"><a href="#文件的增删改查" class="headerlink" title="文件的增删改查"></a>文件的增删改查</h3><h4 id="仓库管理"><a href="#仓库管理" class="headerlink" title="仓库管理"></a>仓库管理</h4><p>运行<code>git status</code>命令看看仓库状态<br><code>git diff</code>查看文件修改记录</p><h4 id="文件跟踪"><a href="#文件跟踪" class="headerlink" title="文件跟踪"></a>文件跟踪</h4><p><code>git log</code>命令显示从最近到最远的提交日志</p><blockquote><p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数<br>Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令</p></blockquote><h4 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h4><p>假如提交历史记录为下面所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">3628164fb26d48395383f8f31179f24e0882e1e0 latest commit</span><br><span class="line">ea34578d5496d7dd233c827ed32a8cd576c5ee85 second commit</span><br><span class="line">cb926e7ea50ad11b8f9e909c05226233bf755030 first commit</span><br></pre></td></tr></table></figure></p><p>在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>3628164...882e1e0</code>，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。<br>Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code></p><p>我们要把当前版本“latest commit”回退到上一个版本“second commit”，就可以使用<code>git reset</code>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at ea34578 second commit</span><br></pre></td></tr></table></figure></p><h4 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h4><p>工作区（Working Directory）：就是你在电脑里能看到的目录<br>版本库（Repository）：工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><blockquote><p>版本库又名仓库，英文名<strong>repository</strong>，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。<br>初始化一个Git仓库，使用<code>git init</code>命令。<br>添加文件到Git仓库，分两步：</p><ul><li>第一步，使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li><li>第二步，使用命令<code>git commit</code>，完成。</li></ul></blockquote><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p><code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的</p><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><p>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code><br>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。<br>已经提交了不合适的修改到版本库时，想要撤销本次提交，使用命令<code>git reset --hard commit_id</code></p><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>rm删除文件后，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了<br>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>，现在，文件就从版本库中被删除了。<br>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本，使用<code>git checkout -- test.txt</code>，<code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p><h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；<br>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；<br>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。<br>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p><h4 id="创建合并删除分支"><a href="#创建合并删除分支" class="headerlink" title="创建合并删除分支"></a>创建合并删除分支</h4><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p><p><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Git/%E5%88%86%E6%94%AF.png" alt="分支"></p><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上</p><p><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Git/%E5%88%86%E6%94%AF2.png" alt="分支2"></p><p>从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变</p><p><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Git/%E5%88%86%E6%94%AF3.png" alt="分支3"></p><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p><p><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Git/%E5%88%86%E6%94%AF4.png" alt="分支4"></p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p><p><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Git/%E5%88%86%E6%94%AF5.png" alt="分支5"></p><p>开始实战：<br>我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch &apos;dev&apos;</span><br></pre></td></tr></table></figure></p><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch &apos;dev&apos;</span><br></pre></td></tr></table></figure><p>然后，用<code>git branch</code>命令查看当前分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure></p><blockquote><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号</p></blockquote><p>然后，我们就可以在<code>dev</code>分支上正常提交;<br>如果<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br></pre></td></tr></table></figure><p>切换回<code>master</code>分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：<br><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Git/%E5%88%86%E6%94%AF6.png" alt="分支6"></p><p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Updating d17efd8..fec145a</span><br><span class="line">Fast-forward</span><br><span class="line"> readme.txt |    1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure></p><p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d dev</span><br><span class="line">Deleted branch dev (was fec145a).</span><br></pre></td></tr></table></figure><blockquote><p>丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p></blockquote><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>总结：</p><p>Git鼓励大量使用分支：</p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><h4 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h4><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Git/%E5%88%86%E6%94%AF%E7%AD%96%E7%95%A5.png" alt="分支策略"></p><h4 id="Bug分支-暂存文件"><a href="#Bug分支-暂存文件" class="headerlink" title="Bug分支-暂存文件"></a>Bug分支-暂存文件</h4><p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支<code>issue-101</code>来修复它，但是，等等，当前正在<code>dev</code>上进行的工作还没有提交，并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p><p>幸好，Git还提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on dev: 6224937 add merge</span><br><span class="line">HEAD is now at 6224937 add merge</span><br></pre></td></tr></table></figure><p>现在，用<code>git status</code>查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。<br>等到bug修复完毕，继续在dev分支开发时，工作区是干净的，刚才的工作现场存到哪去了？用<code>git stash list</code>命令看看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: 6224937 add merge</span><br></pre></td></tr></table></figure></p><p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p><p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了</p><h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><p>多人协作的工作模式通常是这样：</p><ol><li><p>首先，可以试图用<code>git push origin branch-name</code>推送自己的修改；</p></li><li><p>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</p></li><li><p>如果合并有冲突，则解决冲突，并在本地提交；</p></li><li><p>没有冲突或者解决掉冲突后，再用<code>git push origin branch-name</code>推送就能成功！</p></li></ol><p>如果<code>git pull</code>提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream branch-name origin/branch-name</code>。 </p><p>小结：</p><ul><li><p>查看远程库信息，使用<code>git remote -v</code>；</p></li><li><p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p></li><li><p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p></li><li><p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p></li><li><p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p></li><li><p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p></li></ul><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><p>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p><blockquote><p>tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起 </p></blockquote><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><p>在Git中打标签非常简单，首先，切换到需要打标签的分支上，然后，敲命令<code>git tag &lt;name&gt;</code>就可以打一个新标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag v1.0</span><br></pre></td></tr></table></figure></p><p>可以用命令<code>git tag</code>查看所有标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure><p>给之前的提交打标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag tag_name commit_id</span><br></pre></td></tr></table></figure></p><h4 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h4><p>如果标签打错了，也可以删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0.1</span><br><span class="line">Deleted tag &apos;v0.1&apos; (was e078af9)</span><br></pre></td></tr></table></figure></p><p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p><p>如果要推送某个标签到远程，使用命令<code>git push origin &lt;tagname&gt;</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin v1.0</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:michaelliao/learngit.git</span><br><span class="line"> * [new tag]         v1.0 -&gt; v1.0</span><br></pre></td></tr></table></figure></p><p>或者，一次性推送全部尚未推送到远程的本地标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --tags</span><br><span class="line">Counting objects: 1, done.</span><br><span class="line">Writing objects: 100% (1/1), 554 bytes, done.</span><br><span class="line">Total 1 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:michaelliao/learngit.git</span><br><span class="line"> * [new tag]         v0.2 -&gt; v0.2</span><br><span class="line"> * [new tag]         v0.9 -&gt; v0.9</span><br></pre></td></tr></table></figure><p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v0.9</span><br><span class="line">Deleted tag &apos;v0.9&apos; (was 6224937)</span><br></pre></td></tr></table></figure><p>然后，从远程删除。删除命令也是push，但是格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :refs/tags/v0.9</span><br><span class="line">To git@github.com:michaelliao/learngit.git</span><br><span class="line"> - [deleted]         v0.9</span><br></pre></td></tr></table></figure><p>小结：</p><ul><li><p>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</p></li><li><p>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</p></li><li><p>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</p></li><li><p>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;集中式vs分布式&quot;&gt;&lt;a href=&quot;#集中式vs分布式&quot; class=&quot;headerlink&quot; title=&quot;集中式vs分布式&quot;&gt;&lt;/a&gt;集中式vs分布式&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;集中式&lt;/strong&gt;版本控制系统，版本库是集中存放在中央服务器的，而干活
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
</feed>
