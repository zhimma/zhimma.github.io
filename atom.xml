<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhimma</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-21T09:08:11.361Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhimma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/12/21/Nginx/"/>
    <id>http://yoursite.com/2018/12/21/Nginx/</id>
    <published>2018-12-21T08:11:29.593Z</published>
    <updated>2018-12-21T09:08:11.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h3><p>Mainline version        开发版本</p><p>Stable version        稳定版本</p><p>Legacy versions        历史版本</p><h3 id="安装源"><a href="#安装源" class="headerlink" title="安装源"></a>安装源</h3><p>To set up the yum repository for RHEL/CentOS, create the file named <code>/etc/yum.repos.d/nginx.repo</code> with the following contents:</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; [nginx]</span><br><span class="line">&gt; name=nginx repo</span><br><span class="line">&gt; baseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/</span><br><span class="line">&gt; gpgcheck=0</span><br><span class="line">&gt; enabled=1</span><br><span class="line">&gt; </span><br><span class="line">&gt; baseurl=http://nginx.org/packages/centos/7/$basearch/</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>Replace “<code>OS</code>” with “<code>rhel</code>” or “<code>centos</code>”, depending on the distribution used, and “<code>OSRELEASE</code>” with “<code>6</code>” or “<code>7</code>”, for 6.x or 7.x versions, respectively.</p><h3 id="查看nginx安装包"><a href="#查看nginx安装包" class="headerlink" title="查看nginx安装包"></a>查看nginx安装包</h3><p><code>yum list | grep nginx</code></p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p><code>yum install nginx -y</code></p><h3 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@host ~]# nginx -v</span><br><span class="line"><span class="attribute">nginx</span> version: nginx/<span class="number">1</span>.<span class="number">14</span>.<span class="number">2</span></span><br><span class="line">[root<span class="variable">@host</span> ~]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/<span class="number">1</span>.<span class="number">14</span>.<span class="number">2</span></span><br><span class="line">built by gcc <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span> <span class="number">20150623</span> (Red Hat <span class="number">4</span>.<span class="number">8</span>.<span class="number">5</span>-<span class="number">28</span>) (GCC)</span><br><span class="line">built with OpenSSL <span class="number">1</span>.<span class="number">0</span>.<span class="number">2k</span>-fips  <span class="number">26</span> Jan <span class="number">2017</span></span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --<span class="literal">error</span>-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=<span class="string">'-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC'</span> --with-ld-opt=<span class="string">'-Wl,-z,relro -Wl,-z,now -pie'</span></span><br></pre></td></tr></table></figure><h2 id="nginx-配置解析"><a href="#nginx-配置解析" class="headerlink" title="nginx 配置解析"></a>nginx 配置解析</h2><table><thead><tr><th>user</th><th>设置nginx服务的系统使用用户</th></tr></thead><tbody><tr><td>worker_processes</td><td>工作进程数</td></tr><tr><td>error_log</td><td>nginx的错误日志</td></tr><tr><td>pid</td><td>nginx服务</td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> www www;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /home/wwwlogs/nginx_error.log <span class="literal">error</span>;</span><br><span class="line"><span class="comment"># pid /usr/local/nginx/logs/nginx.pid;</span></span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"><span class="comment">#Specifies the value for maximum file descriptors that can be opened by this process.</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>events</th><th>worker_connections</th><th>每个工作进程运行的最大链接数</th></tr></thead><tbody><tr><td></td><td>use</td><td>工作进程模式</td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">65535</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nginx-模块"><a href="#nginx-模块" class="headerlink" title="nginx 模块"></a>nginx 模块</h2><h3 id="stub-status"><a href="#stub-status" class="headerlink" title="stub_status"></a>stub_status</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /nginx &#123;</span><br><span class="line">stub_status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Active connections: 20 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 274 274 784 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 19</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;版本说明&quot;&gt;&lt;a href=&quot;#版本说明&quot; class=&quot;headerlink&quot; title=&quot;版本说明&quot;&gt;&lt;/a&gt;版本说明&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/12/04/CLI&amp;Swoole%20Model/"/>
    <id>http://yoursite.com/2018/12/04/CLI&amp;Swoole Model/</id>
    <published>2018-12-04T07:56:03.655Z</published>
    <updated>2018-12-05T09:42:25.229Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><p><code>php index.php FEE3D9650A692CB93FF43DE7267BDBD0/Customer/Api/Pay/Address/index/id/1/name/222</code></p><blockquote><p>获取参数<code>$_SERVER[&#39;PARAMS&#39;]</code></p></blockquote><h3 id="Swoole"><a href="#Swoole" class="headerlink" title="Swoole"></a>Swoole</h3><p><code>trunk/ThinkPHP/Library/Think/App.class.php    line:98</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (strtolower($_SERVER[<span class="string">'CY_REQUEST_URI'</span>]) == <span class="string">'swoole/server/swooleserver'</span>) &#123;</span><br><span class="line">    $class = <span class="string">''</span>;</span><br><span class="line">    $array = explode(<span class="string">'/'</span>, $_SERVER[<span class="string">'CY_REQUEST_URI'</span>]);</span><br><span class="line">    <span class="keyword">foreach</span> ($array <span class="keyword">as</span> $name) &#123;</span><br><span class="line">        $class .= <span class="string">'\\'</span>.parse_name($name, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行-1"><a href="#执行-1" class="headerlink" title="执行"></a>执行</h4><p>启动swoole 服务:<code>php index.php Swoole/Server/SwooleServer</code></p><p>投递异步任务</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">new</span> SwooleClient())-&gt;handle([</span><br><span class="line"><span class="string">'class'</span> =&gt;  <span class="string">'Swoole\Process\Customer\Export'</span>,</span><br><span class="line"><span class="string">'params'</span> =&gt; [<span class="string">'id'</span> =&gt; <span class="number">1</span>, <span class="string">'name'</span> =&gt; <span class="string">'zhimma'</span>],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;CLI&quot;&gt;&lt;a href=&quot;#CLI&quot; class=&quot;headerlink&quot; title=&quot;CLI&quot;&gt;&lt;/a&gt;CLI&lt;/h3&gt;&lt;h4 id=&quot;执行&quot;&gt;&lt;a href=&quot;#执行&quot; class=&quot;headerlink&quot; title=&quot;执行&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/11/14/PhpStorm%E4%B8%AD%E4%BD%BF%E7%94%A8PSR2%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83phpcbf%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E4%BF%AE%E6%AD%A3%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/11/14/PhpStorm中使用PSR2编码规范phpcbf脚本自动修正代码格式/</id>
    <published>2018-11-14T02:30:42.123Z</published>
    <updated>2018-11-14T03:52:20.017Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="安装CodeSniffer"><a href="#安装CodeSniffer" class="headerlink" title="安装CodeSniffer"></a>安装CodeSniffer</h2><h3 id="安装CodeSniffer-1"><a href="#安装CodeSniffer-1" class="headerlink" title="安装CodeSniffer"></a>安装CodeSniffer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install php-code-sniffer</span><br></pre></td></tr></table></figure><blockquote><p>安装完成后的路径:<code>/usr/local/Cellar/php-code-sniffer</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; ☁  bin  pwd</span><br><span class="line">&gt; /usr/local/Cellar/php-code-sniffer/<span class="number">3.3</span><span class="number">.1</span>/bin</span><br><span class="line">&gt; ☁  bin  ls</span><br><span class="line">&gt; phpcbf           phpcs</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="配置phpcbf"><a href="#配置phpcbf" class="headerlink" title="配置phpcbf"></a>配置phpcbf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./phpcs --config-set default_standard PSR2</span><br><span class="line">./phpcbf --config-set default_standard PSR2</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;☁ bin ls</span><br><span class="line">&gt;CodeSniffer.conf phpcbf           phpcs</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="配置PhpStorm"><a href="#配置PhpStorm" class="headerlink" title="配置PhpStorm"></a>配置PhpStorm</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ol><li><p>打开<code>PhpStorm</code>的设置页（<code>File-&gt;Setting</code>或者<code>Command+,</code>），到<code>Editor/Code Style</code>页<code>PHP</code>中选择风格为 <code>PSR1/2</code></p><p><img src="http://zhimma.oss-cn-beijing.aliyuncs.com/md/1.jpg" alt=""></p></li><li><p>设置Code Sniffer</p><p><img src="http://zhimma.oss-cn-beijing.aliyuncs.com/md/2.jpg" alt=""></p><p>选择之前phpcs的路径，填写后可以点击Validate按钮验证</p></li><li><p><img src="http://zhimma.oss-cn-beijing.aliyuncs.com/md/3.jpg" alt=""></p></li></ol><p>现在使用<code>PhpStorm</code>的格式化，将会自动格式化成psr-2的风格</p><p><a href="https://qq52o.me/2460.html" target="_blank" rel="noopener">参考地址</a></p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;安装CodeSniffer&quot;&gt;&lt;a href=&quot;#安装CodeSniffer&quot; class=&quot;headerlink&quot; title=&quot;安装CodeSniffer&quot;&gt;&lt;/a&gt;安装CodeSniffer&lt;/h2&gt;&lt;h3 id=&quot;安装CodeSn
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/10/21/go-note/"/>
    <id>http://yoursite.com/2018/10/21/go-note/</id>
    <published>2018-10-21T12:50:43.775Z</published>
    <updated>2018-12-27T03:36:29.446Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p><code>m</code>:map名称</p><p><code>[int]</code>:key类型</p><p><code>string</code>:value类型</p><h5 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line">m = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">fmt.Println(m) <span class="comment">// map[]</span></span><br></pre></td></tr></table></figure><h5 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line">fmt.Println(m) <span class="comment">// map[]</span></span><br></pre></td></tr></table></figure><blockquote><p>var m map[int]string = make(map[int]string)</p></blockquote><h5 id="方式3"><a href="#方式3" class="headerlink" title="方式3"></a>方式3</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line">fmt.Println(m) <span class="comment">// map[]</span></span><br></pre></td></tr></table></figure><h4 id="使用赋值"><a href="#使用赋值" class="headerlink" title="使用赋值"></a>使用赋值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line">m[<span class="number">1</span>] = <span class="string">"map value"</span></span><br><span class="line">key1 := m[<span class="number">1</span>]</span><br><span class="line">fmt.Println(key1) <span class="comment">// map value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line">m[<span class="number">1</span>] = <span class="string">"map value"</span></span><br><span class="line">key1 := m[<span class="number">1</span>]</span><br><span class="line">fmt.Println(m) <span class="comment">// map[1:map value]</span></span><br><span class="line">fmt.Println(key1) <span class="comment">// map value</span></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="number">1</span>)</span><br><span class="line">fmt.Println(m) <span class="comment">// map[]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套map初始化"><a href="#嵌套map初始化" class="headerlink" title="嵌套map初始化"></a>嵌套map初始化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line">m[<span class="number">0</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</span><br><span class="line">m[<span class="number">0</span>][<span class="number">1</span>] = <span class="string">"map=&gt;0=&gt;1"</span></span><br><span class="line">a := m[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">fmt.Println(a)</span><br></pre></td></tr></table></figure><h4 id="map迭代"><a href="#map迭代" class="headerlink" title="map迭代"></a>map迭代</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot; class=&quot;headerlink&quot; title=&quot;map&quot;&gt;&lt;/a&gt;map&lt;/h3&gt;&lt;h4 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/10/03/Mac%E7%8E%AF%E5%A2%83ELK%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/10/03/Mac环境ELK搭建/</id>
    <published>2018-10-03T14:01:12.430Z</published>
    <updated>2018-10-05T15:05:32.701Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>略。。。</p><p><del>这里我使用<code>brew install java</code>命令安装</del></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  java -version</span><br><span class="line">java version &quot;11&quot; 2018-09-25</span><br><span class="line">Java(TM) SE Runtime Environment 18.9 (build 11+28)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11+28, mixed mode)</span><br></pre></td></tr></table></figure><p>不要使用上述方式安装，有坑</p><p>下载这个文件安装java:<a href="https://edelivery.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-macosx-x64.dmg" target="_blank" rel="noopener">https://edelivery.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-macosx-x64.dmg</a></p><h2 id="Elasticsearch安装配置"><a href="#Elasticsearch安装配置" class="headerlink" title="Elasticsearch安装配置"></a>Elasticsearch安装配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官网下载对应平台的安装包</p><p><img src="/Users/zhimma/Pictures/ELK/downloadE.png" alt="下载Elasticsearch"></p><p>放到合适的位置，我放置后解压的目录是<code>/Users/zhimma/Soft/elasticsearch-6.4.1</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置-Elasticsearch"><a href="#配置-Elasticsearch" class="headerlink" title="配置 Elasticsearch"></a>配置 Elasticsearch</h4><p>下面是我的配置文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">☁  config  pwd</span><br><span class="line">/Users/zhimma/Soft/elasticsearch-6.4.1/config</span><br><span class="line">☁  config  grep &apos;^[a-z]&apos; elasticsearch.yml</span><br><span class="line">cluster.name: elk-stack</span><br><span class="line">path.data: /Users/zhimma/Data/elk_stack/data</span><br><span class="line">path.logs: /Users/zhimma/Data/elk_stack/logs</span><br><span class="line">bootstrap.memory_lock: false</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br></pre></td></tr></table></figure><h4 id="配置-Elasticsearch-内存占用"><a href="#配置-Elasticsearch-内存占用" class="headerlink" title="配置 Elasticsearch 内存占用"></a>配置 Elasticsearch 内存占用</h4><p>配置 jvm 最大堆和最小堆，一般为服务器物理内存的一半，最大不超过 32g</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">☁  config  pwd</span><br><span class="line">/Users/zhimma/Soft/elasticsearch-6.4.1/config</span><br><span class="line">☁  config  vi jvm.options </span><br><span class="line"></span><br><span class="line">-Xms8g</span><br><span class="line">-Xmx8g</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>进入<code>bin</code>目录启动<code>Elasticsearch</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">☁  bin  pwd</span><br><span class="line">/Users/zhimma/Soft/elasticsearch-6.4.1/bin</span><br><span class="line">☁  bin  ./elasticsearch</span><br></pre></td></tr></table></figure><h2 id="kibana安装配置"><a href="#kibana安装配置" class="headerlink" title="kibana安装配置"></a>kibana安装配置</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>官网下载对应平台的安装包</p><p><img src="/Users/zhimma/Pictures/ELK/downloadK.png" alt="下载Kibana"></p><p>放到合适的位置，我放置后解压的目录是<code>/Users/zhimma/Soft/kibana-6.4.1-darwin-x86_64</code></p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>凭感觉配置了一些，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">☁  config  grep &apos;^[a-z]&apos; kibana.yml</span><br><span class="line">server.port: 5601</span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br><span class="line">elasticsearch.url: &quot;http://0.0.0.0:9200&quot;</span><br><span class="line">kibana.index: &quot;.kibana&quot;</span><br></pre></td></tr></table></figure><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><p>进入<code>bin</code>目录启动<code>Kibana</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">☁  bin  pwd</span><br><span class="line">/Users/zhimma/Soft/kibana-6.4.1-darwin-x86_64/bin</span><br><span class="line">☁  bin  ./kibana</span><br></pre></td></tr></table></figure><h2 id="Logstash安装配置"><a href="#Logstash安装配置" class="headerlink" title="Logstash安装配置"></a>Logstash安装配置</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>官网下载对应平台的安装包</p><p><img src="/Users/zhimma/Pictures/ELK/downloadL.png" alt="下载Logstash"></p><p>放到合适的位置，我放置后解压的目录是<code>/Users/zhimma/Soft/logstash-6.4.1</code></p><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><h4 id="配置-Logstash"><a href="#配置-Logstash" class="headerlink" title="配置 Logstash"></a>配置 Logstash</h4><p>不是很了解，暂时使用默认配置</p><h4 id="配置-Logstash-内存占用"><a href="#配置-Logstash-内存占用" class="headerlink" title="配置 Logstash 内存占用"></a>配置 Logstash 内存占用</h4><p>配置 jvm 最大堆和最小堆，一般为服务器物理内存的一半，最大不超过 32g</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">☁  config  pwd</span><br><span class="line">/Users/zhimma/Soft/logstash-6.4.1/config</span><br><span class="line">☁  config  vi jvm.options </span><br><span class="line"></span><br><span class="line">-Xms8g</span><br><span class="line">-Xmx8g</span><br></pre></td></tr></table></figure><h3 id="添加项目或自定义配置文件"><a href="#添加项目或自定义配置文件" class="headerlink" title="添加项目或自定义配置文件"></a>添加项目或自定义配置文件</h3><p><code>Logstash</code>收集日志时候，可以对日志进行一定的操作和过滤，这里需要自定义不同的配置文件来实现，针对我们目前的项目，我简单的创建了下面的配置文件</p><p>在<code>/Users/zhimma/Soft/logstash-6.4.1/config</code>目录下创建<code>conf.d</code>文件夹，这个文件夹下存放我们所有的自定义配置文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [ &quot;/data/www/XX_project/trunk/Common/Runtime/Apps/Api/*.log&quot; ]</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    ignore_older =&gt; 0</span><br><span class="line">    sincedb_path =&gt; &quot;/dev/null&quot;</span><br><span class="line">    type =&gt; &quot;Api&quot;</span><br><span class="line">    codec =&gt; multiline &#123;</span><br><span class="line">      pattern =&gt; &quot;^\[&quot;</span><br><span class="line">      negate =&gt; true</span><br><span class="line">      what =&gt; &quot;previous&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [ &quot;/data/www/XX_project/trunk/Common/Runtime/Apps/SDK/*.log&quot; ]</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    ignore_older =&gt; 0</span><br><span class="line">    sincedb_path =&gt; &quot;/dev/null&quot;</span><br><span class="line">    type =&gt; &quot;SDK&quot;</span><br><span class="line">    codec =&gt; multiline &#123;</span><br><span class="line">      pattern =&gt; &quot;^\[&quot;</span><br><span class="line">      negate =&gt; true</span><br><span class="line">      what =&gt; &quot;previous&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123; </span><br><span class="line">  if [type] == &quot;Api&quot; &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [ &quot;127.0.0.1:9200&quot; ] </span><br><span class="line">      index =&gt; &quot;api&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  if [type] == &quot;SDK&quot; &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [ &quot;127.0.0.1:9200&quot; ] </span><br><span class="line">      index =&gt; &quot;sdk&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h3><p>进入<code>bin</code>目录启动Llogstash`</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">☁  bin  pwd</span><br><span class="line">/Users/zhimma/Soft/logstash-6.4.1/bin</span><br><span class="line">☁  bin  ./logstash -f /Users/zhimma/Soft/logstash-6.4.1/config/conf.d/default.conf</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="## 访问"></a>## 访问</h2><p>浏览器访问0.0.0.0:5601即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;安装Java&quot;&gt;&lt;a href=&quot;#安装Java&quot; class=&quot;headerlink&quot; title=&quot;安装Java&quot;&gt;&lt;/a&gt;安装Java&lt;/h2&gt;&lt;p&gt;略。。。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;这里我使用&lt;code&gt;brew install 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/30/%E6%90%AC%E7%93%A6%E5%B7%A5Cenots7%20%E5%AE%9E%E7%8E%B0BBR%E5%8A%A0%E9%80%9F%E4%BB%A5%E5%8F%8ASS%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/09/30/搬瓦工Cenots7 实现BBR加速以及SS安装/</id>
    <published>2018-09-30T07:23:52.587Z</published>
    <updated>2018-12-18T10:05:31.466Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h3 id="环境-centos7-64位"><a href="#环境-centos7-64位" class="headerlink" title="环境:   centos7 64位"></a>环境:   <code>centos7 64位</code></h3><h3 id="1、一键安装Shadowsock"><a href="#1、一键安装Shadowsock" class="headerlink" title="1、一键安装Shadowsock"></a>1、一键安装Shadowsock</h3><ul><li>下载脚本<br> <code>wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh</code> </li><li>增加执行权限<br> <code>chmod +x shadowsocks-libev.sh</code> </li><li>运行<br> <code>./shadowsocks-libev.sh 2&gt;&amp;1 | tee shadowsocks-libev.log</code> </li></ul><blockquote><p>安装过程中会提示配置端口、密码、加密方式。</p></blockquote><ul><li>卸载:<br> <code>./shadowsocks-libev.sh uninstall</code></li><li>ss控制</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">启动：/etc/init.d/shadowsocks start </span><br><span class="line">停止：/etc/init.d/shadowsocks stop </span><br><span class="line">重启：/etc/init.d/shadowsocks restart </span><br><span class="line">查看状态：/etc/init.d/shadowsocks status</span><br></pre></td></tr></table></figure><h3 id="2、安装BBR加速"><a href="#2、安装BBR加速" class="headerlink" title="2、安装BBR加速"></a>2、安装BBR加速</h3><blockquote><p>目前支持的Linux系统包括：Ubuntu 14.04 x64、Ubuntu 16.04 x64、CentOS 6 x64、CentOS 7 x64 只支持 64 位系统，要求 glibc 版本 2.14 以上。</p></blockquote><ul><li>关闭防火墙</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、systemctl disable firewalld</span><br><span class="line">2、systemctl stop firewalld</span><br></pre></td></tr></table></figure><ul><li>BBR安装脚本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、wget https://raw.githubusercontent.com/kuoruan/shell-scripts/master/ovz-bbr/ovz-bbr-installer.sh</span><br><span class="line">2、chmod +x ovz-bbr-installer.sh</span><br><span class="line">3、./ovz-bbr-installer.sh</span><br></pre></td></tr></table></figure><blockquote><p>安装过程中，会提示加速端口(可以更改)</p></blockquote><ul><li>判断BBR是否正常工作</li></ul><h4 id="ping-10-0-0-2-如果能通，则代表启动成功"><a href="#ping-10-0-0-2-如果能通，则代表启动成功" class="headerlink" title="ping 10.0.0.2 如果能通，则代表启动成功"></a>ping 10.0.0.2 如果能通，则代表启动成功</h4><ul><li>控制bbr</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl &#123;start|stop|restart|status&#125; haproxy-lkl</span><br></pre></td></tr></table></figure><ul><li>配置bbr加速端口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/haproxy-lkl/etc/port-rules</span><br></pre></td></tr></table></figure><blockquote><p>一行一个端口，可写范围</p></blockquote><ul><li>​    卸载BBR<br> ​    </li></ul><p>作者：我是你的nobita</p><p>链接：<a href="https://www.jianshu.com/p/9f27d4cabd40" target="_blank" rel="noopener">https://www.jianshu.com/p/9f27d4cabd40</a></p><p>來源：简书</p><p>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;h3 id=&quot;环境-centos7-64位&quot;&gt;&lt;a href=&quot;#环境-centos7-64位&quot; class=&quot;hea
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/30/mac%E5%AE%89%E8%A3%85swoole%E6%89%A9%E5%B1%95%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/09/30/mac安装swoole扩展问题记录/</id>
    <published>2018-09-30T06:09:46.412Z</published>
    <updated>2018-09-30T07:16:29.480Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="openssl-ssl-h-39-file-not-found"><a href="#openssl-ssl-h-39-file-not-found" class="headerlink" title="openssl/ssl.h&#39; file not found"></a><code>openssl/ssl.h&#39; file not found</code></h2><p><code>/private/tmp/pear/temp/swoole/include/swoole.h:438:10: fatal error: &#39;openssl/ssl.h&#39; file not found</code></p><p><strong>原因：</strong><br>openssl 未安装或 openssl 库不在标准位置中<br><strong>解决方案：</strong></p><ol><li><p>确认是否安装了 openssl<br><code>brew search openssl</code><br>若未安装则执行命令<code>brew install openssl</code>进行安装</p></li><li><p>确认 openssl 库是否在标准位置中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">☁  ~ ls /usr/local/include/openssl</span><br><span class="line">☁  ~ No such file or directory</span><br></pre></td></tr></table></figure><p>这就是问题所在了，找到 openssl/include/openssl 目录，并 cp 到 /usr/local/include 目录中。</p><p><code>☁  ~  ln -s /usr/local/Cellar/openssl/1.0.2p/include/openssl/ /usr/local/include/</code></p><p>一般情况下就可以解决该问题了。</p><p>但是，也可能会遇到很诡异的状况，上步没有解决问题，依然找不到 openssl/ssl.h 等文件<br>复制 openssl 源文件到 swoole 的源码目录中，编译就可以了。</p><p><code>cp -R  /usr/local/Cellar/openssl/1.0.2p/include/openssl swoole-src-2.1.3/include</code></p><p>这个肯定能解决问题了</p></li></ol><h2 id="Enable-openssl-support-require-openssl-library"><a href="#Enable-openssl-support-require-openssl-library" class="headerlink" title="Enable openssl support, require openssl library."></a><code>Enable openssl support, require openssl library.</code></h2><p><code>/private/tmp/pear/temp/swoole/php_swoole.h:137:2: error: &quot;Enable openssl support, require openssl library.&quot;</code></p><p>上面的问题解决了，再次<code>pecl install swoole</code>时候报了这个错，找了很久都么有找到解决方案，偶然看到pecl 安装的过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enable debug/trace log support? [no] : yes</span><br><span class="line">enable sockets supports? [no] : yes</span><br><span class="line">enable openssl support? [no] : yes</span><br><span class="line">enable http2 support? [no] : yes</span><br><span class="line">enable async-redis support? [no] : yes</span><br><span class="line">enable mysqlnd support? [no] : yes</span><br><span class="line">enable postgresql coroutine client support? [no] : no</span><br><span class="line">building in /private/tmp/pear/temp/pear-build-zhimmaSwGIQ1/swoole-4.2.1</span><br><span class="line">running: /private/tmp/pear/temp/swoole/configure --with-php-config=/usr/local/opt/php@7.1/bin/php-config --enable-debug-log=yes --enable-sockets=yes --enable-openssl=yes --enable-http2=yes --enable-async-redis=yes --enable-mysqlnd=yes --enable-coroutine-postgresql=no</span><br></pre></td></tr></table></figure><p>，于是猜想如果指定<code>openssl</code>的目录，是否可以解决，先看看<code>openssl</code>目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  which openssl</span><br><span class="line">/usr/local/opt/openssl/bin/openssl</span><br></pre></td></tr></table></figure><p>于是安装过程就变成下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enable debug/trace log support? [no] : yes</span><br><span class="line">enable sockets supports? [no] : yes</span><br><span class="line">enable openssl support? [no] : yes --with-openssl-dir=/usr/local/opt/openssl/bin/openssl</span><br><span class="line">enable http2 support? [no] : yes</span><br><span class="line">enable async-redis support? [no] : yes</span><br><span class="line">enable mysqlnd support? [no] : yes</span><br><span class="line">enable postgresql coroutine client support? [no] : no</span><br><span class="line">building in /private/tmp/pear/temp/pear-build-zhimmaN9CyFV/swoole-4.2.1</span><br><span class="line">running: /private/tmp/pear/temp/swoole/configure --with-php-config=/usr/local/opt/php@7.1/bin/php-config --enable-debug-log=yes --enable-sockets=yes --enable-openssl=yes --with-openssl-dir=/usr/local/opt/openssl/bin/openssl --enable-http2=yes --enable-async-redis=yes --enable-mysqlnd=yes --enable-coroutine-postgresql=no</span><br></pre></td></tr></table></figure><p>错误解决</p><h2 id="Enable-http2-support-require-nghttp2-library"><a href="#Enable-http2-support-require-nghttp2-library" class="headerlink" title="Enable http2 support, require nghttp2 library."></a><code>Enable http2 support, require nghttp2 library.</code></h2><p><code>/private/tmp/pear/temp/swoole/php_swoole.h:148:2: error: &quot;Enable http2 support, require nghttp2 library.</code></p><p><strong>解决方案：</strong></p><p><code>brew install nghttp2</code></p><blockquote><p>未能解决</p></blockquote><h2 id="hiredis-hiredis-h-39-file-not-found"><a href="#hiredis-hiredis-h-39-file-not-found" class="headerlink" title="hiredis/hiredis.h&#39; file not found"></a><code>hiredis/hiredis.h&#39; file not found</code></h2><p><code>/private/tmp/pear/temp/swoole/swoole_redis.c:20:10: fatal error: hiredis/hiredis.h&#39; file not found</code></p><p><strong>解决方案：</strong></p><p><code>brew install hiredis</code></p><h2 id="编译参数"><a href="#编译参数" class="headerlink" title="编译参数"></a>编译参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">--disable-option-checking  ignore unrecognized --enable/--with options</span><br><span class="line">  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)</span><br><span class="line">  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]</span><br><span class="line">  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]</span><br><span class="line">  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)</span><br><span class="line">  --with-libdir=NAME      Look for libraries in .../NAME rather than .../lib</span><br><span class="line">  --with-php-config=PATH  Path to php-config php-config</span><br><span class="line">  --enable-swoole-debug   Enable swoole debug</span><br><span class="line">  启用swoole的调试日志。不要在生产环境中启用此配置。</span><br><span class="line">  --enable-trace-log   Enable swoole trace log</span><br><span class="line">  --enable-sockets        Do you have sockets extension?</span><br><span class="line">  启用对 sockets 的支持。依赖 sockets</span><br><span class="line">  --enable-async-redis    Do you have hiredis?</span><br><span class="line">  启用对异步Redis客户端的支持。依赖 hiredis</span><br><span class="line">  --enable-coroutine-postgresql    Do you install postgresql?</span><br><span class="line">  启用协程 Postgresql 客户端，依赖 libpq</span><br><span class="line">  --enable-openssl        Use openssl?</span><br><span class="line">  启用openssl支持。依赖 libssl.so</span><br><span class="line">  --enable-http2          Use http2.0?</span><br><span class="line">  启用HTTP2的支持。依赖 nghttp2</span><br><span class="line">  --enable-thread         Experimental: Use thread?</span><br><span class="line">  启用线程支持 //实验性功能。请勿在生产环境中使用此功能</span><br><span class="line">  --enable-hugepage       Experimental: Use hugepage?</span><br><span class="line">  启用 hugepage //使用大内存页优化性能，具体鸟哥在他的博客中讲到。</span><br><span class="line">  如果已经开启了 jemalloc，再开启hugepage 印象性能</span><br><span class="line">  https://blog.digitalocean.com/transparent-huge-pages-and-alternative-memory-allocators/</span><br><span class="line">  实验性功能。请勿在生产环境中使用此功能</span><br><span class="line">  --enable-swoole         Enable swoole support</span><br><span class="line">  --enable-swoole-static    Enable swoole static compile support</span><br><span class="line">  --with-swoole           With swoole support</span><br><span class="line">  --with-libpq-dir=DIR    Include libpq support (requires libpq &gt;= 9.5)</span><br><span class="line">  --with-openssl-dir=DIR    Include OpenSSL support (requires OpenSSL &gt;= 0.9.6)</span><br><span class="line">  设置openssl库的路径，例如：--with-openssl-dir=/opt/openssl/.</span><br><span class="line">  --with-jemalloc-dir=DIR    Include jemalloc support</span><br><span class="line">  使用 jemalloc 进行内存优化支持</span><br><span class="line">  --enable-mysqlnd       Do you have mysqlnd?</span><br><span class="line">  启用对 mysqlnd 的支持，依赖 mysqlnd</span><br><span class="line">  --enable-coroutine      Enable coroutine (requires PHP &gt;= 5.5)</span><br><span class="line">  启用协程</span><br><span class="line">  --enable-asan      Enable asan</span><br><span class="line">  启用 Address-Sanitizier 内存检测工具 //只有开启debug才有效</span><br><span class="line">  --enable-picohttpparser     Experimental: Do you have picohttpparser?</span><br><span class="line">  启用 picohttpparser 支持 //这是一个超高性能的http解析器，实验性功能。请勿在生产环境中使用此功能</span><br><span class="line">  --enable-timewheel     Experimental: Enable timewheel heartbeat?</span><br><span class="line">  启用时间轮算法并优化心跳算法 //实验性功能。请勿在生产环境中使用此功能</span><br><span class="line">  --enable-debug,  compile with debug symbols</span><br><span class="line">  编译时加入符号表 //使用gdb调试时有用</span><br><span class="line">  --enable-shared=PKGS    Build shared libraries default=yes</span><br><span class="line">  --enable-static=PKGS    Build static libraries default=yes</span><br><span class="line">  --enable-fast-install=PKGS</span><br><span class="line">                          Optimize for fast installation default=yes</span><br><span class="line">  --with-gnu-ld           Assume the C compiler uses GNU ld default=no</span><br><span class="line">  --disable-libtool-lock  Avoid locking (might break parallel builds)</span><br><span class="line">  --with-pic              Try to use only PIC/non-PIC objects default=use both</span><br><span class="line">  --with-tags=TAGS        Include additional configurations automatic</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;openssl-ssl-h-39-file-not-found&quot;&gt;&lt;a href=&quot;#openssl-ssl-h-39-file-not-found&quot; class=&quot;headerlink&quot; title=&quot;openssl/ssl.h&amp;#39
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2018/09/29/面向对象的特性/</id>
    <published>2018-09-29T11:08:49.334Z</published>
    <updated>2018-09-29T11:08:49.334Z</updated>
    
    <content type="html"><![CDATA[<p>来自这里<a href="https://www.cnblogs.com/zhyunfe/p/6398581.html、" target="_blank" rel="noopener">https://www.cnblogs.com/zhyunfe/p/6398581.html、</a></p><p>[TOC]</p><h2 id="面向对象的特性"><a href="#面向对象的特性" class="headerlink" title="面向对象的特性"></a>面向对象的特性</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>对事物的封装是指，将事物进行抽象后，提供抽象概念的实现的具体方法。</p><p>PHP也只是三种封装概念：Private，Protected，Public。</p><p><strong>私有/Private</strong><br>私有的概念是，仅仅对象内部可见，外部不可见</p><p><strong>保护/Protected</strong></p><p>保护的概念是，仅仅是自身类和继承类可见，这个关键字的<code>用途主要是防止滥用类的派生</code>，另外三方库编写的时候会用到，防止误用。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承性就是派生类(子类)自动继承一个或多个基类(父类)中的属性与方法，并可以重写或添加新的属性和方法。继承这个特性简化了对象和类的创建，增加了代码的可重性。继承分单继承和多继承，PHP所支持的是单继承，也就是说，一个子类有且只有一个父类。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态是指在面向对象中能够根据使用类的上下文来重新定义或改变类的性质和行为同一个类的不同对象，使用同一个方法可以获得不同的结果。多态性增强了软件的灵活性和重用性。</p><h2 id="五大基本原则"><a href="#五大基本原则" class="headerlink" title="五大基本原则"></a>五大基本原则</h2><h3 id="单一职责原则SRP-Single-Responsibility-Principle"><a href="#单一职责原则SRP-Single-Responsibility-Principle" class="headerlink" title="单一职责原则SRP(Single Responsibility Principle)"></a>单一职责原则SRP(Single Responsibility Principle)</h3><p>是指一个类的功能要单一，不能包罗万象。如同一个人一样，分配的工作不能太多，否则一天到晚虽然忙忙碌碌的，但效率却高不起来。</p><h3 id="开放封闭原则OCP-Open－Close-Principle"><a href="#开放封闭原则OCP-Open－Close-Principle" class="headerlink" title="开放封闭原则OCP(Open－Close Principle)"></a>开放封闭原则OCP(Open－Close Principle)</h3><p>一个模块在扩展性方面应该是开放的而在更改性方面应该是封闭的。比如：一个网络模块，原来只服务端功能，而现在要加入客户端功能，<br>那么应当在不用修改服务端功能代码的前提下，就能够增加客户端功能的实现代码，这要求在设计之初，就应当将服务端和客户端分开，公共部分抽象出来。</p><h3 id="替换原则-the-Liskov-Substitution-Principle-LSP"><a href="#替换原则-the-Liskov-Substitution-Principle-LSP" class="headerlink" title="替换原则(the Liskov Substitution Principle LSP)"></a>替换原则(the Liskov Substitution Principle LSP)</h3><p>子类应当可以替换父类并出现在父类能够出现的任何地方。比如：公司搞年度晚会，所有员工可以参加抽奖，那么不管是老员工还是新员工，<br>也不管是总部员工还是外派员工，都应当可以参加抽奖，否则这公司就不和谐了。</p><h3 id="依赖原则-the-Dependency-Inversion-Principle-DIP-具体依赖抽象，上层依赖下层。"><a href="#依赖原则-the-Dependency-Inversion-Principle-DIP-具体依赖抽象，上层依赖下层。" class="headerlink" title="依赖原则(the Dependency Inversion Principle DIP) 具体依赖抽象，上层依赖下层。"></a>依赖原则(the Dependency Inversion Principle DIP) 具体依赖抽象，上层依赖下层。</h3><p>假设B是较A低的模块，但B需要使用到A的功能，这个时候，B不应当直接使用A中的具体类： 而应当由B定义一抽象接口，并由A来实现这个抽象接口，B只使用这个抽象接口：这样就达到<br>了依赖倒置的目的，B也解除了对A的依赖，反过来是A依赖于B定义的抽象接口。通过上层模块难以避免依赖下层模块，假如B也直接依赖A的实现，那么就可能造成循环依赖。一个常见的问题就是编译A模块时需要直接包含到B模块的cpp文件，而编译B时同样要直接包含到A的cpp文件。</p><h3 id="接口分离原则-the-Interface-Segregation-Principle-ISP"><a href="#接口分离原则-the-Interface-Segregation-Principle-ISP" class="headerlink" title="接口分离原则(the Interface Segregation Principle ISP)"></a>接口分离原则(the Interface Segregation Principle ISP)</h3><p>模块间要通过抽象接口隔离开，而不是通过具体的类强耦合起来</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;来自这里&lt;a href=&quot;https://www.cnblogs.com/zhyunfe/p/6398581.html、&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/zhyunfe/p/6398581.ht
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/09/29/负载均衡实践/</id>
    <published>2018-09-29T11:08:49.333Z</published>
    <updated>2018-09-29T11:08:49.333Z</updated>
    
    <content type="html"><![CDATA[<p>引用参考：<a href="https://juejin.im/post/5821c24e570c350060bef4c3" target="_blank" rel="noopener">https://juejin.im/post/5821c24e570c350060bef4c3</a></p><h2 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h2><p>windows 下4台服务器，真实机IP：192.168.2.107，其中</p><table><thead><tr><th>服务器</th><th>IP</th><th>说明</th></tr></thead><tbody><tr><td>nginx1</td><td>172.17.0.3</td><td>nginx服务器1</td></tr><tr><td>nginx2</td><td>172.17.0.4</td><td>nginx服务器2</td></tr><tr><td>server1</td><td>172.17.0.5</td><td>服务器1</td></tr><tr><td>server2</td><td>172.17.0.6</td><td>服务器2</td></tr><tr><td>server3</td><td>172.17.0.7</td><td>服务器3</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\mma&gt;docker ps</span><br><span class="line">CONTAINER ID        PORTSNAMES</span><br><span class="line">73e6f2096612        6379/tcp, 0.0.0.0:201-&gt;22/tcp, 0.0.0.0:881-&gt;80/tcp, 0.0.0.0:3361-&gt;3306/tcp, 0.0.0.0:9004-&gt;9001/tcp                                           nginx1</span><br><span class="line">805ef8d42fa6        6379/tcp, 0.0.0.0:202-&gt;22/tcp, 0.0.0.0:882-&gt;80/tcp, 0.0.0.0:3362-&gt;3306/tcp, 0.0.0.0:9005-&gt;9001/tcp                                           nginx2</span><br><span class="line">e91b4a662023        6379/tcp, 0.0.0.0:203-&gt;22/tcp, 0.0.0.0:883-&gt;80/tcp, 0.0.0.0:3363-&gt;3306/tcp, 0.0.0.0:9006-&gt;9001/tcp                                           server1</span><br><span class="line">01bb4850cc8c        6379/tcp, 0.0.0.0:204-&gt;22/tcp, 0.0.0.0:884-&gt;80/tcp, 0.0.0.0:3364-&gt;3306/tcp, 0.0.0.0:9007-&gt;9001/tcp                                           server2</span><br><span class="line">e500cbd1efad        6379/tcp, 0.0.0.0:205-&gt;22/tcp, 0.0.0.0:885-&gt;80/tcp, 0.0.0.0:3365-&gt;3306/tcp, 0.0.0.0:9008-&gt;9001/tcpserver3</span><br></pre></td></tr></table></figure><blockquote><p>主要需要暴露http服务端口</p></blockquote><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>负载均衡，英文名称为Load Balance，其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p><p>我们知道单台服务器的性能是有上限的，当流量很大时，就需要使用多台服务器来共同提供服务，这就是所谓的集群。</p><p>负载均衡服务器，就是用来把经过它的流量，按照某种方法，分配到集群中的各台服务器上。这样一来不仅可以承担更大的流量、降低服务的延迟，还可以避免单点故障造成服务不可用。一般的反向代理服务器，都具备负载均衡的功能。</p><p>负载均衡功能可以由硬件来提供，比如以前的F5设备。也可以由软件来提供，LVS可以提供四层的负载均衡(利用IP和端口)，</p><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img src="https://zhimma.oss-cn-beijing.aliyuncs.com/Nginx/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png" alt="负载均衡"></p><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><h4 id="加权轮询"><a href="#加权轮询" class="headerlink" title="加权轮询"></a>加权轮询</h4><p>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p><p><img src="https://zhimma.oss-cn-beijing.aliyuncs.com/Nginx/%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2.png" alt="加权轮询"></p><blockquote><p>图中有两点需要注意，第一，如果可以把加权轮询算法分为先深搜索和先广搜索，那么nginx采用的是先深搜索算法，即将首先将请求都分给高权重的机器，直到该机器的权值降到了比其他机器低，才开始将请求分给下一个高权重的机器；第二，当所有后端机器都down掉时，nginx会立即将所有机器的标志位清成初始状态，以避免造成所有的机器都处在timeout的状态，从而导致整个前端被夯住。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> zhimma &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:883</span> weight=<span class="number">5</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:884</span> weight=<span class="number">6</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:885</span> weight=<span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    server&#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> zhimma.ma;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>         http://zhimma;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了 weight 之外，还有别的配置项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream phpServers &#123;  </span><br><span class="line">    server 192.168.2.107:883 weight=5 max_fails=1 fail_timeout=20 max_conns=100;</span><br><span class="line">    server 192.168.2.107:883 weight=6 backup down</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>max_fails</strong></p><blockquote><p>默认为1。某台Server允许请求失败的次数，超过最大次数后，在failtimeout时间内，新的请求将不会分配给这台机器。如果设置为0，Nginx会将这台Server置为永久无效状态，然后将请求发给定义了proxynextupstream, fastcginextupstream, uwsginextupstream, scginextupstream, and memcachednext_upstream指令来处理这次错误的请求。</p></blockquote><p><strong>fail_timeout</strong></p><blockquote><p>默认为10秒。某台Server达到maxfails次失败请求后，在failtimeout期间内，nginx会认为这台Server暂时不可用，不会将请求分配给它</p></blockquote><p><strong>backup</strong></p><blockquote><p>备份机，所有服务器挂了之后才会生效</p></blockquote><p><strong>down</strong></p><blockquote><p>标识某一台server不可用</p></blockquote><p><strong>max_conns</strong></p><blockquote><p>限制分配给某台Server处理的最大连接数量，超过这个数量，将不会分配新的连接给它。默认为0，表示不限制。注意：1.5.9之后的版本才有这个配置 表示最多给100这台Server分配1000个请求，如果这台Server正在处理1000个请求，nginx将不会分配新的请求给到它。假如有一个请求处理完了，还剩下999个请求在处理，这时nginx也会将新的请求分配给它。</p></blockquote><h4 id="3-IP-HASH"><a href="#3-IP-HASH" class="headerlink" title="3.IP HASH"></a>3.IP HASH</h4><h4 id="ip-hash-ip绑定"><a href="#ip-hash-ip绑定" class="headerlink" title="ip_hash(ip绑定)"></a>ip_hash(ip绑定)</h4><p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p><p><img src="https://zhimma.oss-cn-beijing.aliyuncs.com/Nginx/iphash.png" alt="ip_hash"></p><p>ip hash算法的核心实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(i = 0;i &lt; 3;i++)&#123;</span><br><span class="line">    hash = (hash * 113 + iphp-&gt;addr[i]) % 6271; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p = hash % iphp-&gt;rrp.peers-&gt;number;</span><br></pre></td></tr></table></figure><blockquote><p>从代码中可以看出，hash值既与ip有关又与后端机器的数量有关。经过测试，上述算法可以连续产生1045个互异的value，这是该算法的硬限制。对此nginx使用了保护机制，当经过20次hash仍然找不到可用的机器时，算法退化成轮询。因此，从本质上说，ip hash算法是一种变相的轮询算法，如果两个ip的初始hash值恰好相同，那么来自这两个ip的请求将永远落在同一台服务器上，这为均衡性埋下了很深的隐患。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> zhimma &#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:883</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:884</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:885</span>;</span><br><span class="line">&#125;</span><br><span class="line">    server&#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> zhimma.ma;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>         http://zhimma;</span><br><span class="line">            <span class="comment">#如果服务器要获取客户端真实IP，可以用下三句设置主机头和客户端真实地址</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fair"><a href="#fair" class="headerlink" title="fair"></a>fair</h4><h4 id="通用hash、一致性hash"><a href="#通用hash、一致性hash" class="headerlink" title="通用hash、一致性hash"></a>通用hash、一致性hash</h4><h4 id="session-sticky"><a href="#session-sticky" class="headerlink" title="session_sticky"></a>session_sticky</h4><h2 id="配置详情"><a href="#配置详情" class="headerlink" title="配置详情"></a>配置详情</h2><h3 id="负载均衡服务器"><a href="#负载均衡服务器" class="headerlink" title="负载均衡服务器"></a>负载均衡服务器</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span>  nginx;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log <span class="literal">warn</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    <span class="attribute">upstream</span> zhimma &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:883</span>   weight=<span class="number">3</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:884</span>   weight=<span class="number">4</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.2.107:885</span>   weight=<span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    server&#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> zhimma.ma;</span><br><span class="line">        <span class="attribute">root</span>   /home/www/tourism/laravel_store/public;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">proxy_pass</span>         http://zhimma;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   Host             <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span>   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#   include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="业务服务器"><a href="#业务服务器" class="headerlink" title="业务服务器"></a>业务服务器</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@e91b4a662023 conf.d]# pwd </span><br><span class="line">/etc/nginx/conf.d</span><br><span class="line">[root@e91b4a662023 conf.d]# ls</span><br><span class="line">zhimma.ma.conf</span><br><span class="line">root@e91b4a662023 conf.d]# cat zhimma.ma.conf </span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  zhimma.ma;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">## Root and index files.</span></span><br><span class="line">    <span class="comment"># 这里的路径对应自己项目路径，因为我是做了目录挂载，所以剩下2台服务器nginx的配置做了区分</span></span><br><span class="line">    <span class="comment"># 分别是/home/www/zhimma/server2和/home/www/zhimma/server3</span></span><br><span class="line">    <span class="attribute">root</span> /home/www/zhimma/server1;</span><br><span class="line">    <span class="attribute">index</span>  index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">            <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">            <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">            <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME    <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">            <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php<span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx ，配置hosts,访问<code>zhimma.ma:881</code>,就能看的切换的效果了</p><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引用参考：&lt;a href=&quot;https://juejin.im/post/5821c24e570c350060bef4c3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/5821c24e570c350060be
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2018/09/29/正向代理和反向代理/</id>
    <published>2018-09-29T11:08:49.332Z</published>
    <updated>2018-09-29T11:08:49.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>正向代理是一个位于<strong>客户端和目标服务器之间的代理服务器（中间服务器）</strong>。为了从原始服务器取得内容，客户端向代理服务器发送一个请求，并且指定目标服务器，之后代理向目标服务器转交并且将获得的内容返回给客户端。正向代理的情况下客户端必须要进行一些特别的设置才能使用。</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>反向代理正好相反。对于客户端来说，反向代理就好像目标服务器。并且客户端不需要进行任何设置。客户端向反向代理发送请求，接着反向代理判断请求走向何处，并将请求转交给客户端，使得这些内容就好似他自己一样，一次客户端并不会感知到反向代理后面的服务，也因此不需要客户端做任何设置，只需要把反向代理服务器当成真正的服务器就好了。</p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="访问形式区分："><a href="#访问形式区分：" class="headerlink" title="访问形式区分："></a>访问形式区分：</h2><p>正向代理需要你主动设置代理服务器ip或者域名进行访问，由设置的服务器ip或者域名去获取访问内容并返回；<br>正向代理是代理客户端，为客户端收发请求，使真实客户端对服务器不可见；<br>反向代理不需要你做任何设置，直接访问服务器真实ip或者域名，但是服务器内部会自动根据访问内容进行跳转及内容返回，你不知道它最终访问的是哪些机器。<br>反向代理是代理服务器端，为服务器收发请求，使真实服务器对客户端不可见。<br>从上面的描述也能看得出来正向代理和反向代理最关键的两点区别：</p><ol><li>是否指定目标服务器</li><li>客户端是否要做设置<br><img src="https://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP/%E4%BB%A3%E7%90%86.jpeg" alt="代理"><br>正向代理中，proxy和client同属一个LAN，对server透明； 反向代理中，proxy和server同属一个LAN，对client透明。 实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把前者那种代理方式叫做正向代理，后者叫做反向代理。<h2 id="用途上来区分："><a href="#用途上来区分：" class="headerlink" title="用途上来区分："></a>用途上来区分：</h2>正向代理：正向代理用途是为了在防火墙内的局域网提供访问internet的途径。另外还可以使用缓冲特性减少网络使用率<br>反向代理：反向代理的用途是将防火墙后面的服务器提供给internet用户访问。同时还可以完成诸如负载均衡等功能<h2 id="从安全性来讲："><a href="#从安全性来讲：" class="headerlink" title="从安全性来讲："></a>从安全性来讲：</h2>正向代理：正向代理允许客户端通过它访问任意网站并且隐蔽客户端自身，因此你必须采取安全措施来确保仅为经过授权的客户端提供服务<br>反向代理：对外是透明的，访问者并不知道自己访问的是代理。对访问者而言，他以为访问的就是原始服务器<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><h2 id="正向代理-1"><a href="#正向代理-1" class="headerlink" title="正向代理"></a>正向代理</h2>从上面的介绍也就可以猜出来正向代理的至少一个功能（俗称翻墙），也即：</li></ol><p>用户A无法访问facebook，但是能访问服务器B，而服务器B可以访问facebook。于是用户A访问服务器B，通过服务器B去访问facebook，，服务器B收到请求后，去访问facebook，facebook把响应信息返回给服务器B，服务器B再把响应信息返回给A。这样，通过代理服务器B，就实现了翻墙。</p><h2 id="反向代理-1"><a href="#反向代理-1" class="headerlink" title="反向代理"></a>反向代理</h2><p>从上面的介绍也可以猜出来反向代理的至少一个功能（比如负载均衡），也即：</p><p>假设用户A访问 <a href="http://www.somesite.com/something.html，但www.somesite.com上并不存在something.html页面，于是接收用户请求的该服务器就偷偷从另外一台服务器上取回来，然后返回给用户，而用户并不知道something.html页面究竟位于哪台机器上。" target="_blank" rel="noopener">http://www.somesite.com/something.html，但www.somesite.com上并不存在something.html页面，于是接收用户请求的该服务器就偷偷从另外一台服务器上取回来，然后返回给用户，而用户并不知道something.html页面究竟位于哪台机器上。</a></p><p>反向代理的作用就比较多了，这里简单列举一下：</p><ul><li>保护和隐藏原始资源服务器</li><li>加密和SSL加速</li><li>负载均衡</li></ul><ul><li>缓存静态内容</li><li>压缩</li><li>减速上传</li><li>安全</li><li>外网发布</li></ul><p>下面做两个简单介绍</p><h3 id="保护和隐藏原始资源服务器"><a href="#保护和隐藏原始资源服务器" class="headerlink" title="保护和隐藏原始资源服务器"></a>保护和隐藏原始资源服务器</h3><p><img src="https://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP/%E4%BF%9D%E6%8A%A4%E5%92%8C%E9%9A%90%E8%97%8F%E5%8E%9F%E5%A7%8B%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8.jpeg" alt="保护和隐藏原始资源服务器"><br>用户A始终认为它访问的是原始服务器B而不是代理服务器Z，但实用际上反向代理服务器接受用户A的应答，从原始资源服务器B中取得用户A的需求资源，然后发送给用户A。由于防火墙的作用，只允许代理服务器Z访问原始资源服务器B。尽管在这个虚拟的环境下，防火墙和反向代理的共同作用保护了原始资源服务器B，但用户A并不知情。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p><img src="https://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.jpeg" alt="负载均衡"><br>当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器B的时候，让不同的代理服务器Z（x）去应答不同的用户，然后发送不同用户需要的资源。</p><h2 id="透明代理"><a href="#透明代理" class="headerlink" title="透明代理"></a>透明代理</h2><p>透明代理比较类似正向代理的功能，差别在于客户端根本不知道代理的存在，它改编你的request，并会传送真实IP（使用场景就是公司限制网络的访问）。</p><p>比如为了工作效率或者安全，A公司屏蔽了QQ软件的使用。A公司的员工接上了网络，但发现无法使用qq。这就是透明代理捣的鬼。公司在内网和外网的中间插入一个透明代理，这个代理会根据规则抓取请求内容，遇到qq的请求我就把这个请求给屏蔽掉，这样就完成了透明屏蔽。当然了，如果你明白原理，就可以自己搞个正向代理来绕过公司的屏蔽。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;h2 id=&quot;正向代理&quot;&gt;&lt;a href=&quot;#正向代理&quot; class=&quot;headerlink&quot; title=&quot;正向代理&quot;&gt;&lt;/a&gt;正向代理&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/29/计算机基础/</id>
    <published>2018-09-29T11:08:49.332Z</published>
    <updated>2018-09-29T11:08:49.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><p>title: 计算机基础<br>date: 2018-03-18 23:20:16</p><hr><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p><strong>进程和线程都是一个时间段的描述，是CPU工作时间段的描述</strong></p><p><strong>一个最最基础的事实</strong>：CPU太快，太快，太快了，寄存器仅仅能够追的上他的脚步，RAM和别的挂在各总线上的设备完全是望其项背。那当多个任务要执行的时候怎么办呢？轮流着来?或者谁优先级高谁来？不管怎么样的策略，一句话就是在CPU看来就是轮流着来。<br><strong>一个必须知道的事实</strong>：执行一段程序代码，实现一个功能的过程介绍 ，当得到CPU的时候，相关的资源必须也已经就位，就是显卡啊，GPS啊什么的必须就位，然后CPU开始执行。这里除了CPU以外所有的就构成了这个程序的执行环境，也就是我们所定义的<strong>程序上下文</strong>。当这个程序执行完了，或者分配给他的CPU执行时间用完了，那它就要被切换出去，等待下一次CPU的临幸。在被切换出去的最后一步工作就是保存程序上下文，因为这个是下次他被CPU临幸的运行环境，必须保存。<br><strong>串联起来的事实</strong>：前面讲过在CPU看来所有的任务都是一个一个的轮流执行的，具体的轮流方法就是：先加载程序A的上下文，然后开始执行A，保存程序A的上下文，调入下一个要执行的程序B的程序上下文，然后开始执行B,保存程序B的上下文。。。</p><p> <strong>进程就是包换上下文切换的程序执行时间总和</strong> = <strong>CPU加载上下文+CPU执行+CPU保存上下文</strong><br>进程的颗粒度太大，每次都要有上下的调入，保存，调出。如果我们把进程比喻为一个运行在电脑上的软件，那么一个软件的执行不可能是一条逻辑执行的，必定有多个分支和多个程序段，就好比要实现程序A，实际分成 a，b，c等多个块组合而成。那么这里具体的执行就可能变成：</p><p>程序A得到CPU =&gt; CPU加载上下文，开始执行程序A的a小段，然后执行A的b小段，然后再执行A的c小段，最后CPU保存A的上下文。</p><p>这里a，b，c的执行是共享了A的上下文，CPU在执行的时候没有进行上下文切换的。这<strong>里的a，b，c就是线程，也就是说线程是共享了进程的上下文环境，的更为细小的CPU时间段。</strong></p><hr><p>开个QQ，开了一个进程；开了迅雷，开了一个进程。<br>在QQ的这个进程里，传输文字开一个线程、传输语音开了一个线程、弹出对话框又开了一个线程。<br>所以运行某个软件，相当于开了一个进程。在这个软件运行的过程里（在这个进程里），多个工作支撑的完成QQ的运行，那么这“多个工作”分别有一个线程。<br>所以一个进程管着多个线程。<br>通俗的讲：“进程是爹妈，管着众多的线程儿子”…</p><ul><li>一个进程可以包括多个线程</li><li>每个线程可以使用进程的共享内存（互斥锁）</li></ul><hr><p>操作系统的设计，因此可以归结为三点：</p><ol><li>以多进程形式，允许多个任务同时运行；</li><li>以多线程形式，允许单个任务分成不同的部分运行；</li><li>提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。</li></ol><h2 id="异步，非阻塞和-IO-复用"><a href="#异步，非阻塞和-IO-复用" class="headerlink" title="异步，非阻塞和 IO 复用"></a>异步，非阻塞和 IO 复用</h2><p><a href="https://segmentfault.com/a/1190000007614502" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007614502</a></p><h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><p>同步与异步的重点在消息通知的方式上，也就是调用结果通知的方式。</p><p><code>同步</code>: 当一个同步调用发出去后，调用者要一直等待调用结果的通知后，才能进行后续的执行。<br><code>异步</code>：当一个异步调用发出去后，调用者不能立即得到调用结果的返回。<br>异步调用，要想获得结果，一般有两种方式</p><blockquote><ol><li>主动轮询异步调用的结果;</li><li>被调用方通过callback来通知调用方调用结果。</li></ol></blockquote><p>demo：<br><code>同步买奶茶</code>：小明点单交钱，然后等着拿奶茶；异步买奶茶：小明点单交钱，店员给小明一个小票，等小明奶茶做好了，再来取。</p><p><code>异步买奶茶</code>: 小明要想知道奶茶是否做好了，有两种方式：</p><blockquote><ol><li>小明主动去问店员，一会就去问一下：“奶茶做好了吗？”…直到奶茶做好。这叫轮训。</li><li>等奶茶做好了，店员喊一声：“小明，奶茶好了！”，然后小明去取奶茶。这叫回调。</li></ol></blockquote><h3 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h3><p>阻塞与非阻塞的重点在于进/线程等待消息时候的行为，也就是在等待消息的时候，当前进/线程是挂起状态，还是非挂起状态。</p><p><code>阻塞调用</code>在发出去后，在消息返回之前，当前进/线程会被挂起，直到有消息返回，当前进/线程才会被激活.<br><code>非阻塞</code>调用在发出去后，不会阻塞当前进/线程，而会立即返回。</p><p>demo：<br><code>阻塞买奶茶</code>：小明点单交钱，干等着拿奶茶，什么事都不做；<br><code>非阻塞买奶茶</code>：小明点单交钱，等着拿奶茶，等的过程中，时不时刷刷微博、朋友圈。</p><p><strong>总结：</strong></p><ul><li>同步与异步，重点在于消息通知的方式;</li><li>阻塞与非阻塞，重点在于等消息时候的行为。</li></ul><p>demo</p><ul><li>同步阻塞：小明在柜台干等着拿奶茶；</li><li>同步非阻塞：小明在柜台边刷微博边等着拿奶茶；</li><li>异步阻塞：小明拿着小票啥都不干，一直等着店员通知他拿奶茶；</li><li>异步非阻塞：小明拿着小票，刷着微博，等着店员通知他拿奶茶。</li></ul><h3 id="IO复用"><a href="#IO复用" class="headerlink" title="IO复用"></a>IO复用</h3><p>在一个进程处理所有的并发I/O呢?<br>答案是有的，这就是I/O复用技术。</p><h4 id="最初级的I-O复用"><a href="#最初级的I-O复用" class="headerlink" title="最初级的I/O复用"></a>最初级的I/O复用</h4><p>所谓的I/O复用，就是多个I/O可以复用一个进程。<br>当一个连接过来时，我们不阻塞住，这样一个进程可以同时处理多个连接了。<br>比如一个进程接受了10000个连接，这个进程每次从头到尾的问一遍这10000个连接：“<strong>有I/O事件没？有的话就交给我处理，没有的话我一会再来问一遍。</strong>”<br>然后进程就一直从头到尾问这10000个连接，如果这1000个连接都没有I/O事件，就会造成CPU的空转，并且效率也很低</p><h4 id="升级版的I-O复用"><a href="#升级版的I-O复用" class="headerlink" title="升级版的I/O复用"></a>升级版的I/O复用</h4><p>上面虽然实现了基础版的I/O复用，但是效率太低了。于是伟大的程序猿们日思夜想的去解决这个问题…终于！<br>我们能不能引入一个代理，这个代理可以同时观察许多I/O流事件呢？<br>当没有I/O事件的时候，这个进程处于阻塞状态；当有I/O事件的时候，这个代理就去通知进程醒来？<br>于是，早期的程序猿们发明了两个代理—select、poll。<br>select、poll代理的原理是这样的：</p><blockquote><p>当连接有I/O流事件产生的时候，就会去唤醒进程去处理。</p></blockquote><p>但是进程并不知道是哪个连接产生的I/O流事件，于是进程就挨个去问：“请问是你有事要处理吗？”……问了99999遍，哦，原来是第100000个进程有事要处理。那么，前面这99999次就白问了，白白浪费宝贵的CPU时间片了</p><blockquote><p>注:select与poll原理是一样的，只不过select只能观察1024个连接，poll可以观察无限个连接。</p></blockquote><p>上面看了，select、poll因为不知道哪个连接有I/O流事件要处理，性能也挺不好的。</p><p>那么，如果发明一个代理，每次能够知道哪个连接有了I/O流事件，不就可以避免无意义的空转了吗？</p><p><strong>于是，超级无敌、闪闪发光的epoll被伟大的程序员发明出来了。</strong></p><p>epoll代理的原理是这样的：</p><blockquote><p>当连接有I/O流事件产生的时候，epoll就会去告诉进程哪个连接有I/O流事件产生，然后进程就去处理这个进程。</p></blockquote><p>如此，多高效！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;计算机基础&quot;&gt;&lt;a href=&quot;#计算机基础&quot; class=&quot;headerlink&quot; title=&quot;计算机基础&quot;&gt;&lt;/a&gt;计算机基础&lt;/h2&gt;&lt;p&gt;title: 计算机基础&lt;br&gt;date: 2018-03-18 23:20:16&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2018/09/29/抽象类和接口/</id>
    <published>2018-09-29T11:08:49.331Z</published>
    <updated>2018-09-29T11:08:49.331Z</updated>
    
    <content type="html"><![CDATA[<p>来自这里<a href="https://blog.csdn.net/sunlylorn/article/details/6124319" target="_blank" rel="noopener">https://blog.csdn.net/sunlylorn/article/details/6124319</a></p><p>[TOC]</p><h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li><p>一个类中如果有一个方法是抽象方法，那么这个类必须定义为抽象类</p></li><li><p>抽象类是指在 class 前加了 abstract 关键字且存在抽象方法（在类方法 function 关键字前加了 abstract 关键字）的类。</p></li><li><p>抽象类不能直接实例化，抽象类中只定义（或部分实现）子类需要的方法。子类可以通过继承抽象类并通过实现抽象类中的所有抽象方法，使抽象类具体化。</p></li><li><p>如果子类需要实例化，前提是它实现了抽象类中的所有抽象方法。如果子类没有全部实现抽象类中的所有抽象方法，那么该子类也是一个抽象类，必须在 class 前面加上 abstract 关键字，并且不能被实例化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">     <span class="comment">/** 抽象类中可以定义变量 */</span>  </span><br><span class="line">    <span class="keyword">protected</span> $value1 = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">private</span> $value2 = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">public</span> $value3 = <span class="number">2</span>;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 大多数情况下，抽象类至少含有一个抽象方法。抽象方法用abstract关键字声明，其中不能有具体内容。 </span></span><br><span class="line"><span class="comment">     * 可以像声明普通类方法那样声明抽象方法，但是要以分号而不是方法体结束。也就是说抽象方法在抽象类中不能被实现，也就是没有函数体“&#123;some codes&#125;”。 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">talk</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="comment">/** 也可以定义非抽象方法 */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"run function"</span> .PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Service</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"say function"</span> .PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">jump</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiniA</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">talk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"talk function "</span>.PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">other</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;jump();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$class = <span class="keyword">new</span> MiniA();</span><br><span class="line">$class-&gt;talk();</span><br><span class="line">$class-&gt;other();</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="接口类"><a href="#接口类" class="headerlink" title="接口类"></a>接口类</h3><p>PHP接口类interface就是一个类的领导者，指明方向，<code>子类必须完成它指定方法</code></p><ul><li><p>抽象类提供了具体实现的标准，而接口则是纯粹的模版。接口只定义功能，而不包含实现的内容。接口用关键字 interface 来声明。</p></li><li><p>interface 是完全抽象的，只能声明方法，而且只能声明 public 的方法，不能声明 private 及 protected 的方法，不能定义方法体，也<strong>不能声明实例变量 </strong>。然而， <strong>interface 却可以声明常量变量</strong> 。但将常量变量放在 interface 中违背了其作为接口的作用而存在的宗旨，也混淆了 interface 与类的不同价值。如果的确需要，可以将其放在相应的 abstract class 或 Class 中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">const</span> NAME = <span class="string">'zhimma'</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">talk</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">echo</span> Bar:: NAME;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>任何实现接口的类都要实现接口中所定义的所有方法,否则该类必须声明为 abstract 。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement say() method.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">talk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement talk() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">X</span> <span class="keyword">implements</span> <span class="title">Bar</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>一个类可以在声明中使用 implements 关键字来实现某个接口。这么做之后，实现接口的具体过程和继承一个仅包含抽象方法的抽象类是一样的。一个类可以同时继承一个父类和实现任意多个接口。 extends 子句应该在 implements 子句之前。 PHP 只支持继承自一个父类，因此 extends 关键字后只能跟一个类名。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement say() method.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">talk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement talk() method.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>接口不可以实现另一个接口，但可以继承多个</p><p>​</p><p>​</p></li></ul><h3 id="抽象类对比接口"><a href="#抽象类对比接口" class="headerlink" title="抽象类对比接口"></a>抽象类对比接口</h3><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><ul><li>两者都是抽象类，都不能实例化。</li><li>interface 实现类及 abstract class 的子类都必须要实现已经声明的抽象方法。</li></ul><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ul><li>interface 需要实现，要用 implements ，而 abstract class 需要继承，要用 extends 。</li><li>一个类可以实现多个 interface ，但一个类只能继承一个 abstract class </li><li>interface 强调特定功能的实现，而 abstract class 强调所属关系。</li><li>尽管 interface 实现类及 abstract class 的子类都必须要实现相应的抽象方法，但实现的形式不同。 interface 中的每一个方法都是抽象方法，都只是声明的 (declaration, 没有方法体 ) ，实现类必须要实现。而 abstract class 的子类可以有选择地实现。<ul><li>abstract class 中并非所有的方法都是抽象的，只有那些冠有 abstract 的方法才是抽象的，子类必须实现。那些没有 abstract 的方法，在 abstract class 中必须定义方法体</li><li>abstract class 的子类在继承它时，对非抽象方法既可以直接继承，也可以覆盖；而对抽象方法，可以选择实现，也可以留给其子类来实现，但此类必须也声明为抽象类。既是抽象类，当然也不能实例化。</li></ul></li><li>abstract class 是 interface 与 class 的中介。 abstract class 在 interface 及 class 中起到了承上启下的作用。一方面， abstract class 是抽象的，可以声明抽象方法，以规范子类必须实现的功能；另一方面，它又可以定义缺省的方法体，供子类直接使用或覆盖。另外，它还可以定义自己的实例变量，以供子类通过继承来使用。</li><li>接口中的抽象方法前不用也不能加 abstract 关键字，默认隐式就是抽象方法，也不能加 final关键字来防止抽象方法的继承。而抽象类中抽象方法前则必须加上 abstract 表示显示声明为抽象方法。</li><li>接口中的抽象方法默认是 public 的，也只能是 public 的，不能用 private ， protected 修饰符修饰。而抽象类中的抽象方法则可以用 public ， protected 来修饰，但不能用 private </li></ul><h3 id="应用场合"><a href="#应用场合" class="headerlink" title="应用场合"></a>应用场合</h3><h4 id="interface-的应用场合"><a href="#interface-的应用场合" class="headerlink" title="interface 的应用场合"></a>interface 的应用场合</h4><ul><li>类与类之间需要特定的接口进行协调，而不在乎其如何实现</li><li>作为能够实现特定功能的标识存在，也可以是什么接口方法都没有的纯粹标识。</li><li>需要将一组类视为单一的类，而调用者只通过接口来与这组类发生联系。</li><li>需要实现特定的多项功能，而这些功能之间可能完全没有任何联系。</li></ul><h4 id="abstract-的应用场合"><a href="#abstract-的应用场合" class="headerlink" title="abstract 的应用场合"></a>abstract 的应用场合</h4><p>在既需要统一的接口，又需要实例变量或缺省的方法的情况下，就可以使用它</p><ul><li>定义了一组接口，但又不想强迫每个实现类都必须实现所有的接口。可以用 abstract class 定义一组方法体，甚至可以是空方法体，然后由子类选择自己所感兴趣的方法来覆盖</li><li>某些场合下，只靠纯粹的接口不能满足类与类之间的协调，还必需类中表示状态的变量来区别不同的关系。 abstract 的中介作用可以很好地满足这一点。</li><li>规范了一组相互协调的方法，其中一些方法是共同的，与状态无关的，可以共享的，无需子类分别实现；而另一些方法却需要各个子类根据自己特定的状态来实现特 定的功能 。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;来自这里&lt;a href=&quot;https://blog.csdn.net/sunlylorn/article/details/6124319&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/sunlylorn/arti
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/%E6%90%9E%E6%87%82JWT/"/>
    <id>http://yoursite.com/2018/09/29/搞懂JWT/</id>
    <published>2018-09-29T11:08:49.331Z</published>
    <updated>2018-09-29T11:08:49.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搞懂JWT"><a href="#搞懂JWT" class="headerlink" title="搞懂JWT"></a>搞懂JWT</h1><p>本文基本一字不差的转载至<a href="http://blog.leapoahead.com/2015/09/06/understanding-jwt/" target="_blank" rel="noopener">这里</a></p><p>JSON Web Token（JWT）是一个非常轻巧的<a href="https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32" target="_blank" rel="noopener">规范</a>。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息</p><p>让我们来假想一下一个场景。在A用户关注了B用户的时候，系统发邮件给B用户，并且附有一个链接“点此关注A用户”。链接的地址可以是这样的<br><code>https://your.awesome-app.com/make-friend/?from_user=B&amp;target_user=A</code><br>上面的URL主要通过URL来描述这个当然这样做有一个弊端，那就是要求用户B用户是一定要先登录的。可不可以简化这个流程，让B用户不用登录就可以完成这个操作。JWT就允许我们做到这点。<br><img src="https://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP/jwt.png" alt="jwt"></p><h3 id="JWT的组成"><a href="#JWT的组成" class="headerlink" title="JWT的组成"></a>JWT的组成</h3><p>一个JWT实际上就是一个字符串，它由三部分组成，<strong>头部</strong>、<strong>载荷</strong>与<strong>签名</strong></p><h5 id="载荷（Payload）"><a href="#载荷（Payload）" class="headerlink" title="载荷（Payload）"></a>载荷（Payload）</h5><p>我们先将上面的添加好友的操作描述成一个JSON对象。其中添加了一些其他的信息，帮助今后收到这个JWT的服务器理解这个JWT。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">"iss"</span>: <span class="string">"John Wu JWT"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"iat"</span>: <span class="number">1441593502</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"exp"</span>: <span class="number">1441594722</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"aud"</span>: <span class="string">"www.example.com"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"sub"</span>: <span class="string">"jrocket@example.com"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"from_user"</span>: <span class="string">"B"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"target_user"</span>: <span class="string">"A"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里面的前五个字段都是由JWT的标准所定义的。</p><ul><li><code>iss</code>: 该JWT的签发者</li><li><code>sub</code>: 该JWT所面向的用户</li><li><code>aud</code>: 接收该JWT的一方</li><li><code>exp</code>(expires): 什么时候过期，这里是一个Unix时间戳</li><li><code>iat</code>(issued at): 在什么时候签发的</li></ul><p>这些定义都可以在<a href="https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32" target="_blank" rel="noopener">标准</a>中找到。<br>将上面的JSON对象进行[base64编码]可以得到下面的字符串。这个字符串我们将它称作JWT的<strong>Payload</strong>（载荷）。</p><p><code>eyJpc3MiOiJKb2huIFd1IEpXVCIsImlhdCI6MTQ0MTU5MzUwMiwiZXhwIjoxNDQxNTk0NzIyLCJhdWQiOiJ3d3cuZXhhbXBsZS5jb20iLCJzdWIiOiJqcm9ja2V0QGV4YW1wbGUuY29tIiwiZnJvbV91c2VyIjoiQiIsInRhcmdldF91c2VyIjoiQSJ9</code></p><p>如果你使用Node.js，可以用Node.js的包<a href="https://github.com/brianloveswords/base64url" target="_blank" rel="noopener">base64url</a>来得到这个字符串<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> base64url = <span class="built_in">require</span>(<span class="string">'base64url'</span>)</span><br><span class="line"><span class="keyword">var</span> header = &#123;</span><br><span class="line">    <span class="string">"from_user"</span>: <span class="string">"B"</span>,</span><br><span class="line">    <span class="string">"target_user"</span>: <span class="string">"A"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(base64url(<span class="built_in">JSON</span>.stringify(header)))</span><br><span class="line"><span class="comment">// 输出：eyJpc3MiOiJKb2huIFd1IEpXVCIsImlhdCI6MTQ0MTU5MzUwMiwiZXhwIjoxNDQxNTk0NzIyLCJhdWQiOiJ3d3cuZXhhbXBsZS5jb20iLCJzdWIiOiJqcm9ja2V0QGV4YW1wbGUuY29tIiwiZnJvbV91c2VyIjoiQiIsInRhcmdldF91c2VyIjoiQSJ9</span></span><br></pre></td></tr></table></figure></p><blockquote><p>小知识：Base64是一种编码，也就是说，它是可以被翻译回原来的样子来的。它并不是一种加密过程。</p></blockquote><h5 id="头部（Header）"><a href="#头部（Header）" class="headerlink" title="头部（Header）"></a>头部（Header）</h5><p>JWT还需要一个头部，头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里，我们说明了这是一个JWT，并且我们所用的签名算法（后面会提到）是HS256算法。<br>对它也要进行Base64编码，之后的字符串就成了JWT的<strong>Header</strong>（头部）。<code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</code></p><h5 id="签名（签名）"><a href="#签名（签名）" class="headerlink" title="签名（签名）"></a>签名（签名）</h5><p>将上面的两个编码后的字符串都用句号<code>.</code>连接在一起（头部在前），就形成了<br><code>yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcm9tX3VzZXIiOiJCIiwidGFyZ2V0X3VzZXIiOiJBIn0</code><br>这一部分的过程在<a href="https://github.com/brianloveswords/node-jws/blob/master/lib/sign-stream.js" target="_blank" rel="noopener">node-jws的源码</a>中有体现</p><p>最后，我们将上面拼接完的字符串用HS256算法进行加密。在加密的时候，我们还需要提供一个密钥（secret）。如果我们用<code>mystar</code>作为密钥的话，那么就可以得到我们加密后的内容<br><code>rSWamyAYwuHCo7IFAgd1oRpSP7nzL7BF5t7ItqpKViM</code><br>这一部分又叫做<strong>签名</strong>。</p><p><img src="https://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP/sig1.png" alt="签名"><br>最后将这一部分签名也拼接在被签名的字符串后面，我们就得到了完整的JWT<br><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcm9tX3VzZXIiOiJCIiwidGFyZ2V0X3VzZXIiOiJBIn0.rSWamyAYwuHCo7IFAgd1oRpSP7nzL7BF5t7ItqpKViM</code></p><p>于是，我们就可以将邮件中的URL改成<br><code>https://your.awesome-app.com/make-friend/?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcm9tX3VzZXIiOiJCIiwidGFyZ2V0X3VzZXIiOiJBIn0.rSWamyAYwuHCo7IFAgd1oRpSP7nzL7BF5t7ItqpKViM</code><br>这样就可以安全地完成添加好友的操作了！<br>且慢，我们一定会有一些问题：</p><ol><li>签名的目的是什么？</li><li>Base64是一种编码，是可逆的，那么我的信息不就被暴露了吗？<br>让我逐一为你说明。</li></ol><h3 id="签名的目的"><a href="#签名的目的" class="headerlink" title="签名的目的"></a>签名的目的</h3><p>最后一步签名的过程，实际上是对头部以及载荷内容进行签名。一般而言，加密算法对于不同的输入产生的输出总是不一样的。对于两个不同的输入，产生同样的输出的概率极其地小（有可能比我成世界首富的概率还小）。所以，我们就把“不一样的输入产生不一样的输出”当做必然事件来看待吧。</p><p>所以，如果有人对头部以及载荷的内容解码之后进行修改，再进行编码的话，那么新的头部和载荷的签名和之前的签名就将是不一样的。而且，如果不知道服务器加密的时候用的密钥的话，得出来的签名也一定会是不一样的。</p><p><img src="https://mafuntoo-blog.oss-cn-qingdao.aliyuncs.com/PHP/sig2.png" alt="sig2"><br>服务器应用在接受到JWT后，会首先对头部和载荷的内容用同一算法再次签名。那么服务器应用是怎么知道我们用的是哪一种算法呢？别忘了，我们在JWT的头部中已经用<code>alg</code>字段指明了我们的加密算法了。</p><p>如果服务器应用对头部和载荷再次以同样方法签名之后发现，自己计算出来的签名和接受到的签名不一样，那么就说明这个Token的内容被别人动过的，我们应该拒绝这个Token，返回一个HTTP 401 Unauthorized响应。</p><h3 id="信息会暴露？"><a href="#信息会暴露？" class="headerlink" title="信息会暴露？"></a>信息会暴露？</h3><p>是的。</p><p>所以，在JWT中，不应该在载荷里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID。这个值实际上不是什么敏感内容，一般情况下被知道也是安全的。</p><p>但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第三方通过Base64解码就能很快地知道你的密码了。</p><h3 id="JWT的适用场景"><a href="#JWT的适用场景" class="headerlink" title="JWT的适用场景"></a>JWT的适用场景</h3><p>我们可以看到，JWT适合用于向Web应用传递一些非敏感信息。例如在上面提到的完成加好友的操作，还有诸如下订单的操作等等。</p><p>其实JWT还经常用于设计用户认证和授权系统，甚至实现Web应用的单点登录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搞懂JWT&quot;&gt;&lt;a href=&quot;#搞懂JWT&quot; class=&quot;headerlink&quot; title=&quot;搞懂JWT&quot;&gt;&lt;/a&gt;搞懂JWT&lt;/h1&gt;&lt;p&gt;本文基本一字不差的转载至&lt;a href=&quot;http://blog.leapoahead.com/2015/09/06
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/%E5%9F%BA%E4%BA%8EDocker%E5%AE%B9%E5%99%A8%E7%9A%84MySQL%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/09/29/基于Docker容器的MySQL主从配置/</id>
    <published>2018-09-29T11:08:49.330Z</published>
    <updated>2018-09-29T11:08:49.330Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="基于Docker容器的MySQL主从配置"><a href="#基于Docker容器的MySQL主从配置" class="headerlink" title="基于Docker容器的MySQL主从配置"></a>基于Docker容器的MySQL主从配置</h1><p>我本机的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY                                     TAG                 IMAGE ID           </span><br><span class="line">ssh_network_vim_lnmp_redis_swoole_supervisor   latest              6da5efb40932</span><br></pre></td></tr></table></figure><p>环境搭建及MySQL安装步骤省略，根据已有的镜像创建容器</p><ol><li><p>master数据库</p><p><code>docker run -it -d --privileged=true --name master -p 33060:3306 -p 220:22 -p 8080:80 -p 1024:1024 -p 16379:6379 -p 9001:9001 -v   E:\www\:/home/www ssh_network_vim_lnmp_redis_swoole_supervisor /usr/sbin/init</code></p></li><li><p>slave1数据库</p><p><code>docker run -it -d --privileged=true --name slave1 -p 33061:3306 -p 221:22 -p 8081:80 -p 2024:1024 -p 26379:6379 -p 9002:9001 -v   E:\www\:/home/www ssh_network_vim_lnmp_redis_swoole_supervisor /usr/sbin/init</code></p></li><li><p>slave2数据库</p><p><code>docker run -it -d --privileged=true --name slave2 -p 33062:3306 -p 222:22 -p 8082:80 -p 3024:1024 -p 36379:6379 -p 9003:9001 -v   E:\www\:/home/www ssh_network_vim_lnmp_redis_swoole_supervisor /usr/sbin/init</code></p><p>​</p><p>……  slaveN</p></li></ol><h2 id="binlog方式"><a href="#binlog方式" class="headerlink" title="binlog方式"></a>binlog方式</h2><h3 id="master数据库"><a href="#master数据库" class="headerlink" title="master数据库"></a>master数据库</h3><p>真实机IP：192.168.2.107   容器IP:172.17.0.2</p><h4 id="修改MySQL配置文件-my-cnf"><a href="#修改MySQL配置文件-my-cnf" class="headerlink" title="修改MySQL配置文件(my.cnf)"></a>修改MySQL配置文件(my.cnf)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log-bin=mysql-bin #启动二进制文件 </span><br><span class="line">server_id=1 #服务器ID</span><br></pre></td></tr></table></figure><p>附一份全一点的配置,指定需要同步的数据库和不需要同步的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=1</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">log-bin-index=master-bin.index</span><br><span class="line">binlog_format=mixed  // binlog 日志文件格式</span><br><span class="line">sync-binlog=1//</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">binlog-ignore-db=product</span><br><span class="line">binlog-do-db=test</span><br><span class="line">binlog-do-db=local</span><br></pre></td></tr></table></figure><p>重启MySQL；</p><h4 id="创建复制用户"><a href="#创建复制用户" class="headerlink" title="创建复制用户"></a>创建复制用户</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.<span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'zhimma'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span> <span class="keyword">ON</span> . <span class="keyword">TO</span> <span class="string">'zhimma'</span>@<span class="string">'%'</span>;</span><br><span class="line">或者</span><br><span class="line">2.  <span class="keyword">grant</span> <span class="keyword">replication</span> <span class="keyword">slave</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'zhimma'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'123456'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">MASTER</span> <span class="keyword">STATUS</span>;</span><br></pre></td></tr></table></figure><h4 id="查看MySQL"><a href="#查看MySQL" class="headerlink" title="查看MySQL"></a>查看MySQL</h4><figure class="highlight plain"><figcaption><span>master status```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```mysql</span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000001 |      998 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>如果是项目中途使用主从复制，可以使用下面方法迁移数据</p><ol><li><p>锁定所有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; FLUSH TABLES WITH READ LOCK;</span><br><span class="line">Query OK, 0 rows affected (2.59 sec)</span><br></pre></td></tr></table></figure></li><li><p>备份表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac ~]# mysqldump -uroot -p123456 --all-databases -l -F &gt;/tmp/all_db.sql</span><br></pre></td></tr></table></figure></li><li><p>解锁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UNLOCK TABLES; </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>传输数据到从库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 221/222 /tmp/all_db.sql root@192.168.2.107:/tmp</span><br></pre></td></tr></table></figure></li></ol><h3 id="slave数据库"><a href="#slave数据库" class="headerlink" title="slave数据库"></a>slave数据库</h3><h4 id="修改server-uuid"><a href="#修改server-uuid" class="headerlink" title="修改server-uuid"></a>修改server-uuid</h4><p>将<code>/var/lib/mysql/auto.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[auto]</span><br><span class="line">server-uuid=f781e2b4-28e1-11e8-a1c0-0242ac110001</span><br></pre></td></tr></table></figure><h4 id="修改MySQL配置文件-my-cnf-1"><a href="#修改MySQL配置文件-my-cnf-1" class="headerlink" title="修改MySQL配置文件(my.cnf)"></a>修改MySQL配置文件(my.cnf)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log-bin=mysql-bin #启动二进制文件 </span><br><span class="line">server_id=101 #服务器ID</span><br></pre></td></tr></table></figure><p>重启MySQL；</p><h4 id="导入主备份文件"><a href="#导入主备份文件" class="headerlink" title="导入主备份文件"></a>导入主备份文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@9ae039d46474 tmp]# mysql -uroot -p123456 &lt; /tmp/all_db.sql</span><br></pre></td></tr></table></figure><h4 id="开启slave同步"><a href="#开启slave同步" class="headerlink" title="开启slave同步"></a>开启slave同步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=&apos;192.168.2.107&apos;,MASTER_PORT=33060, MASTER_USER=&apos;zhimma&apos;, MASTER_PASSWORD=&apos;123456&apos;, MASTER_LOG_FILE=&apos;mysql-bin.000001&apos;, MASTER_LOG_POS=998;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">CHANGE MASTER TO MASTER_HOST=&apos;172.17.0.2&apos;, MASTER_USER=&apos;zhimma&apos;, MASTER_PASSWORD=&apos;123456&apos;, MASTER_LOG_FILE=&apos;mysql-bin.000001&apos;, MASTER_LOG_POS=998;</span><br><span class="line"></span><br><span class="line">start slave</span><br></pre></td></tr></table></figure><h4 id="查看是否同步成功slave连接master成功"><a href="#查看是否同步成功slave连接master成功" class="headerlink" title="查看是否同步成功slave连接master成功"></a>查看是否同步成功slave连接master成功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.43 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Queueing master event to the relay log</span><br><span class="line">                  Master_Host: 192.168.2.107</span><br><span class="line">                  Master_User: zhimma</span><br><span class="line">                  Master_Port: 33060</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 4</span><br><span class="line">               Relay_Log_File: 06e5a050e74b-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">              Slave_IO_Running: Yes</span><br><span class="line">              Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 998</span><br><span class="line">              Relay_Log_Space: 1483</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: f781e2b4-28e1-11e8-a1c0-0242ac110002</span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.20 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>同步成功</p><p><a href="http://www.cnblogs.com/clsn/p/8150036.html" target="_blank" rel="noopener">http://www.cnblogs.com/clsn/p/8150036.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;基于Docker容器的MySQL主从配置&quot;&gt;&lt;a href=&quot;#基于Docker容器的MySQL主从配置&quot; class=&quot;headerlink&quot; title=&quot;基于Docker容器的MySQL主从配置&quot;&gt;&lt;/a&gt;基于Docker容器的My
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/php-fpm%E5%A6%82%E4%BD%95%E5%90%88%E7%90%86%E8%AE%BE%E7%BD%AEmax_chindren%E5%92%8Cpm%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%8C%85%E6%8B%AC%E5%BC%80%E5%90%AFstatus%E7%9B%91%E5%90%AC/"/>
    <id>http://yoursite.com/2018/09/29/php-fpm如何合理设置max_chindren和pm模式，包括开启status监听/</id>
    <published>2018-09-29T11:08:49.329Z</published>
    <updated>2018-09-29T11:08:49.329Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="php-fpm如何合理设置max-chindren和pm模式，包括开启status监听"><a href="#php-fpm如何合理设置max-chindren和pm模式，包括开启status监听" class="headerlink" title="php-fpm如何合理设置max_chindren和pm模式，包括开启status监听"></a>php-fpm如何合理设置max_chindren和pm模式，包括开启status监听</h2><h3 id="开启status获得执行状态"><a href="#开启status获得执行状态" class="headerlink" title="开启status获得执行状态"></a>开启status获得执行状态</h3><h4 id="启用php-fpm状态功能"><a href="#启用php-fpm状态功能" class="headerlink" title="启用php-fpm状态功能"></a>启用php-fpm状态功能</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/php-fpm.d/www.conf</span><br><span class="line">修改：</span><br><span class="line">pm.status_path = /status</span><br></pre></td></tr></table></figure><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ ^/status$</span></span><br><span class="line"><span class="regexp"></span>    &#123;</span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重启nginx和php-fpm"><a href="#重启nginx和php-fpm" class="headerlink" title="重启nginx和php-fpm"></a>重启nginx和php-fpm</h4><h4 id="打开status页面"><a href="#打开status页面" class="headerlink" title="打开status页面"></a>打开status页面</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac ~]<span class="comment"># curl http://visit.ma/status</span></span><br><span class="line">pool:                 www</span><br><span class="line">process manager:      dynamic</span><br><span class="line">start time:           <span class="number">23</span>/Jul/<span class="number">2018</span>:<span class="number">15</span>:<span class="number">32</span>:<span class="number">09</span> +<span class="number">0800</span></span><br><span class="line">start since:          <span class="number">1055</span></span><br><span class="line">accepted conn:        <span class="number">9</span></span><br><span class="line">listen queue:         <span class="number">0</span></span><br><span class="line">max listen queue:     <span class="number">0</span></span><br><span class="line">listen queue len:     <span class="number">128</span></span><br><span class="line">idle processes:       <span class="number">5</span></span><br><span class="line">active processes:     <span class="number">1</span></span><br><span class="line">total processes:      <span class="number">6</span></span><br><span class="line">max active processes: <span class="number">1</span></span><br><span class="line">max children reached: <span class="number">0</span></span><br><span class="line">slow requests:        <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h4><p><strong>pool</strong> – fpm池子名称，大多数为www<br><strong>process manager</strong> – 进程管理方式,值：static, dynamic or ondemand. dynamic<br><strong>start time</strong> – 启动日期,如果reload了php-fpm，时间会更新<br><strong>start since</strong> – 运行时长<br><strong>accepted conn</strong> – 当前池子接受的请求数<br><strong>listen queue</strong> – 请求等待队列，如果这个值不为0，那么要增加FPM的进程数量<br><strong>max listen queue</strong> – 请求等待队列最高的数量<br><strong>listen queue len</strong> – socket等待队列长度<br><strong>idle processes</strong> – 空闲进程数量<br><strong>active processes</strong> – 活跃进程数量<br>total processes – 总进程数量<br><strong>max active processes</strong> – 最大的活跃进程数量（FPM启动开始算）<br><strong>max children reached</strong>  - 大道进程最大数量限制的次数，如果这个数量不为0，那说明你的最大进程数量太小了，请改大一点。<br><strong>slow requests</strong> – 启用了php-fpm slow-log，缓慢请求的数量</p><h4 id="php-fpm其他参数"><a href="#php-fpm其他参数" class="headerlink" title="php-fpm其他参数"></a>php-fpm其他参数</h4><p><strong>php-fpm</strong>状态页比较个性化的一个地方是它可以带参数，可以带参数<strong>json</strong>、<strong>xml</strong>、<strong>html</strong>并且前面三个参数可以分别和<strong>full</strong>做一个组合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">curl http://visit.ma/status?json</span><br><span class="line">curl http://visit.ma/status?xml</span><br><span class="line">curl http://visit.ma/status?html</span><br><span class="line">curl http://visit.ma/status?full</span><br><span class="line"></span><br><span class="line">[root@b04f945297ac ~]# curl http://visit.ma/status?full</span><br><span class="line">pool:                 www</span><br><span class="line">process manager:      dynamic</span><br><span class="line">start time:           23/Jul/2018:15:32:09 +0800</span><br><span class="line">start since:          1240</span><br><span class="line">accepted conn:        10</span><br><span class="line">listen queue:         0</span><br><span class="line">max listen queue:     0</span><br><span class="line">listen queue len:     128</span><br><span class="line">idle processes:       5</span><br><span class="line">active processes:     1</span><br><span class="line">total processes:      6</span><br><span class="line">max active processes: 1</span><br><span class="line">max children reached: 0</span><br><span class="line">slow requests:        0</span><br><span class="line"></span><br><span class="line">************************</span><br><span class="line">pid:                  5466</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           23/Jul/2018:15:32:09 +0800</span><br><span class="line">start since:          1240</span><br><span class="line">requests:             2</span><br><span class="line">request duration:     99</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  2097152</span><br><span class="line">************************</span><br><span class="line">pid:                  5467</span><br><span class="line">state:                Idle</span><br><span class="line">start time:           23/Jul/2018:15:32:09 +0800</span><br><span class="line">start since:          1240</span><br><span class="line">requests:             2</span><br><span class="line">request duration:     184</span><br><span class="line">request method:       GET</span><br><span class="line">request URI:          /status?full</span><br><span class="line">content length:       0</span><br><span class="line">user:                 -</span><br><span class="line">script:               -</span><br><span class="line">last request cpu:     0.00</span><br><span class="line">last request memory:  2097152</span><br></pre></td></tr></table></figure><p>这里重点说下<strong>full</strong>参数详解</p><p><strong>pid</strong> – 进程PID，可以单独kill这个进程. You can use this PID to kill a long running process.<br><strong>state</strong> – 当前进程的状态 (Idle, Running, …)<br><strong>start time</strong> – 进程启动的日期<br><strong>start since</strong> – 当前进程运行时长<br><strong>requests</strong> – 当前进程处理了多少个请求<br><strong>request duration</strong> – 请求时长（微妙）<br>request method – 请求方法 (GET, POST, …)<br><strong>request URI</strong> – 请求URI<br><strong>content length</strong> – 请求内容长度 (仅用于 POST)<br><strong>user</strong> – 用户 (PHP_AUTH_USER) (or ‘-’ 如果没设置)<br><strong>script</strong> – PHP脚本 (or ‘-’ if not set)<br><strong>last request cpu</strong> – 最后一个请求CPU使用率<br><strong>last request memorythe</strong> - 上一个请求使用的内存</p><h3 id="合理设置max-chindren和pm模式"><a href="#合理设置max-chindren和pm模式" class="headerlink" title="合理设置max_chindren和pm模式"></a>合理设置max_chindren和pm模式</h3><p><img src="https://learn-plan.oss-cn-beijing.aliyuncs.com/Nginx%2BPHP/htop.png" alt="htop"></p><p>使用htop命令查看单个php-fpm所申请的VIRT大小，我32G服务器是400左右（实际要除以8=M，就是：50M左右），如果按照每个进程消耗50M*1.5倍=75M左右，如果你的服务器内存是32G，我们假设可用于php-fpm的内存为60%=20G，则：20*1024/75=273，所以，一般我们建议max_chindren最大为273，最好还是设置为：8的倍数，所以我设置为256.</p><p>然后我们可以根据域名/status的结果来合理设置其他参数（<strong>pm.start_servers</strong>和<strong>pm.min_spare_servers</strong>和<strong>pm.max_spare_servers</strong>）</p><p>在php.ini中，我们可以看到<strong>memory_limit</strong>有一句这样的原文，<code>Maximum amount of memory a script may consume (128MB)</code>，就是说单个进程使用的最大内存大小，这个参数吧，当然不能低于刚刚计算的75M了，一般我们可以设置为3倍，则75*3=225M左右（建议：128，256，512，1024…）</p><p>这里假如有攻击的话，max_chindren=256，memory_limit=256，256*256=64G，很明显会导致内存爆满，所以如果想又保持性能，又能一定程度上防止内存爆满，可以将max_chindren设置的低一点，memory_limit可以设置为每个进程消耗的值（一般不建议低于128M吧，如果是独立服务器的话）。</p><h4 id="PHP-FPM-子进程数量，是不是越多越好？"><a href="#PHP-FPM-子进程数量，是不是越多越好？" class="headerlink" title="PHP-FPM 子进程数量，是不是越多越好？"></a>PHP-FPM 子进程数量，是不是越多越好？</h4><p>当然不是，pm.max_chindren，进程多了，增加进程管理的开销以及上下文切换的开销。</p><p>更核心的是，<strong>能并发执行的 php-fpm 进程不会超过 cpu 个数</strong>。</p><p>如何设置，取决于你的代码</p><p>如果代码是 CPU 计算密集型的，pm.max_chindren 不能超过 CPU 的内核数。</p><p>如果不是，那么将 pm.max_chindren 的值大于 CPU 的内核数，是非常明智的。<br>国外技术大拿给出这么个公式：</p><p>在 N + 20% 和 M/m 之间。</p><p>N 是 CPU 内核数量。<br>M 是 PHP 能利用的内存数量。<br>m 是每个 PHP 进程平均使用的内存数量。<br>适用于 <strong>dynamic</strong> 方式。</p><p><strong>static方式：M/(m * 1.2)</strong></p><p>当然，还有一种保险的方式，来配置 max_children。适用于 static 方式。</p><p>先把 max_childnren 设置成一个比较大的值。<br>稳定运行一段时间后，观察 php-fpm 的 status 里的 max<br>active processes 是多少<br>然后把 max_children 配置比它大一些就可以了。<br>pm.max_requests：指的是每个子进程在处理了多少个请求数量之后就重启。</p><p>这个参数，理论上可以随便设置，但是为了预防内存泄漏的风险，还是设置一个合理的数比较好</p><p>所以，我的服务器32G内存设置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">memory_limit = 256M</span><br><span class="line">pm = dynamic</span><br><span class="line">pm.max_children = 256</span><br><span class="line">pm.start_servers = 32</span><br><span class="line">pm.min_spare_servers = 16</span><br><span class="line">pm.max_spare_servers = 32</span><br></pre></td></tr></table></figure><blockquote><p> pm.max_children：静态方式下开启的php-fpm进程数量。</p><p>pm.start_servers：动态方式下的起始php-fpm进程数量。</p><p>pm.min_spare_servers：动态方式下的最小php-fpm进程数量。</p><p>pm.max_spare_servers：动态方式下的最大php-fpm进程数量。</p><p><strong>如果dm设置为static，那么其实只有pm.max_children这个参数生效。系统会开启设置数量的php-fpm进程。</strong></p><p><strong>如果dm设置为static，那么其实只有pm.max_children这个参数生效。系统会开启设置数量的php-fpm进程。</strong></p></blockquote><p><a href="http://www.zhanghongliang.com/article/1300" target="_blank" rel="noopener">http://www.zhanghongliang.com/article/1300</a></p><p><a href="http://www.ttlsa.com/php/use-php-fpm-status-page-detail/" target="_blank" rel="noopener">http://www.ttlsa.com/php/use-php-fpm-status-page-detail/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;php-fpm如何合理设置max-chindren和pm模式，包括开启status监听&quot;&gt;&lt;a href=&quot;#php-fpm如何合理设置max-chindren和pm模式，包括开启status监听&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/redis%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/09/29/redis安装与配置/</id>
    <published>2018-09-29T11:08:49.329Z</published>
    <updated>2018-09-29T11:08:49.329Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="redis安装与配置"><a href="#redis安装与配置" class="headerlink" title="redis安装与配置"></a>redis安装与配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p><a href="https://redis.io/download" target="_blank" rel="noopener">redis下载地址</a></p></li><li><p>解压缩<code>tar -zxf redis-4.0.2.tar.gz</code></p></li><li><p><code>cd redis-4.0.2</code></p></li><li><p><code>make</code></p></li><li><p><code>cd src</code></p></li><li><p><code>make install</code></p><p>​</p></li></ul><p>到此就安装完成。但是，由于安装redis的时候，我们没有选择安装路径，故是默认位置安装。在此，我们可以将可执行文件和配置文件移动到习惯的目录。 </p><figure class="highlight plain"><figcaption><span>/usr/local </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/redis/bin </span><br><span class="line">mkdir -p /usr/local/redis/etc </span><br><span class="line">cd /usr/local/redis-4.0.2 </span><br><span class="line">mv ./redis.conf /usr/local/redis/etc </span><br><span class="line">cd src </span><br><span class="line">mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-dump redis-cli redis-server redis-sentinel /usr/local/redis/bin</span><br></pre></td></tr></table></figure><p><strong>比较重要的3个可执行文件</strong>：<br><strong>redis-server</strong>：Redis服务器程序<br><strong>redis-cli</strong>：Redis客户端程序，它是一个命令行操作工具。也可以使用telnet根据其纯文本协议操作。<br><strong>redis-benchmark</strong>：Redis性能测试工具，测试Redis在你的系统及配置下的读写性能</p><p><strong>Redis的启动命令：</strong><br><code>/usr/local/redis/bin/redis-server</code><br>或<br><code>cd /usr/local/redis/bin</code><br><code>./redis-server /usr/local/redis/etc/redis.conf</code>为redis-server指定配置文件</p><h3 id="Redis的配置"><a href="#Redis的配置" class="headerlink" title="Redis的配置"></a>Redis的配置</h3><p>下面列举了Redis中的一些常用配置项：<br>daemonize 如果需要将Redis服务以守护进程在后台运行，则把该项的值改为yes</p><p>pidfile 配置多个pid的地址，默认在/var/run/redis/pid</p><p>bind 绑定ip，设置后只接受来自该ip的请求</p><p>port 监听端口，默认是6379</p><p>timeout 客户端连接超时的设定，单位是秒</p><p>loglevel 分为4级，debug、verbose、notice、warning</p><p>logfile 配置log文件地址</p><p>databases 设置数据库的个数，默认使用的数据库为0</p><p>save 设置redis进行数据库镜像的频率</p><p>rdbcompression 在进行镜像备份时，是否进行压缩</p><p>Dbfilename 镜像备份文件的文件名</p><p>Dir 数据库镜像备份文件的存放路径</p><p>Slaveof 设置数据库为其他数据库的从数据库</p><p>Masterauth 主数据库连接需要的密码验证<br>Requirepass 设置登录时，需要使用的密码<br>Maxclients 设置同时连接的最大客户端数量<br>Maxmemory 设置redis能够使用的最大内存<br>Appendonly 开启append only模式<br>Appendfsync 设置对appendonly.aof文件同步的频率<br>vm-enabled 是否开启虚拟内存支持<br>vm-swap-file 设置虚拟内存的交换文件路径<br>vm-max-memory 设置redis能够使用的最大虚拟内存<br>vm-page-size 设置虚拟内存的页大小<br>vm-pages 设置交换文件的总的page数量<br>vm-max-threads 设置VMIO同时使用的线程数量<br>Glueoutputbuf 把小的输出缓存存放在一起<br>hash-max-zipmap-entries 设置hash的临界值<br>Activerehashing 重新hash</p><p><strong>修改redis的配置参数</strong>：<br>vi /usr/local/redis/etc/redis.conf<br>将daemonize no改为daemonize yes，保存退出。<br>再来启动redis服务器<br>cd /usr/local/redis/bin<br>./redis-server /usr/local/redis/etc/redis.conf 启动redis并指定配置文件</p><p>ps aux | grep redis 查看redis是否启动成功</p><p>netstat -tlun 查看主机的6379端口是否在使用（监听）</p><p>./redis-cli 打开redis的客户端</p><p>quit 退出redis的客户端</p><p>pkill redis-server 关闭redis服务器</p><p>./redis-cli shutdown 也可以通过这条命令关闭redis服务器</p><h3 id="自启动"><a href="#自启动" class="headerlink" title="自启动"></a>自启动</h3><p>只有两个步骤：</p><ol><li><p>设置redis.conf中<code>daemonize</code>为<strong>yes</strong>,确保守护进程开启。</p></li><li><p>编写开机自启动脚本</p><p>基本原理为：<br>系统开机启动时会去加载<code>/etc/init.d/</code>下面的脚本，通常而言每个脚本文件会自定义实现程序的启动；若想将新的程序开机自启动，只需在该目录下添加一个自定义启动程序的脚本，然后设置相应规则即可。<br>如在这里我们在<code>/etc/init.d/</code>下新建一个 redis 的脚本，开机启动时会去加载执行该脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx #!/bin/sh## Simple Redis init.d script conceived to work on Linux systems# as it does use of the /proc filesystem.REDISPORT=6379EXEC=/usr/local/redis/bin/redis-serverCLIEXEC=/usr/local/redis/bin/redis-cliPIDFILE=/var/run/redis_$&#123;REDISPORT&#125;.pidCONF=&quot;/usr/local/redis/etc/$&#123;REDISPORT&#125;.conf&quot;case &quot;$1&quot; in    start)        if [ -f $PIDFILE ]        then                echo &quot;$PIDFILE exists, process is already running or crashed&quot;        else                echo &quot;Starting Redis server...&quot;                $EXEC $CONF        fi        ;;    stop)</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>设置可执行权限：<code>chmod 755 redis</code></p></li><li><p>启动<code>/etc/init.d/redis start</code></p></li><li><p>设置开机自启动:<code>chkconfig redis on</code></p></li></ol><p><a href="https://blog.csdn.net/qq_38158631/article/details/78644274" target="_blank" rel="noopener">https://blog.csdn.net/qq_38158631/article/details/78644274</a></p><p><a href="https://blog.csdn.net/baidu_30000217/article/details/51558408" target="_blank" rel="noopener">https://blog.csdn.net/baidu_30000217/article/details/51558408</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;redis安装与配置&quot;&gt;&lt;a href=&quot;#redis安装与配置&quot; class=&quot;headerlink&quot; title=&quot;redis安装与配置&quot;&gt;&lt;/a&gt;redis安装与配置&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; cl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/SSH%20%E5%AF%86%E9%92%A5%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2018/09/29/SSH 密钥创建及密钥登录/</id>
    <published>2018-09-29T11:08:49.328Z</published>
    <updated>2018-09-29T11:08:49.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH-密钥创建及密钥登录"><a href="#SSH-密钥创建及密钥登录" class="headerlink" title="SSH 密钥创建及密钥登录"></a>SSH 密钥创建及密钥登录</h1><p>本文基本引自这里：<a href="https://blog.csdn.net/nahancy/article/details/79059135" target="_blank" rel="noopener">https://blog.csdn.net/nahancy/article/details/79059135</a></p><p>在我们平时使用Linux系统时候，通常使用的Linux SSH登录方式是用户名加密码的登录方式，今天来探讨另外的一种相对安全的登录方式——密钥登录</p><p>我们知道SSH登录是用的RSA非对称加密的，所以我们在SSH登录的时候就可以使用RSA密钥登录，SSH有专门创建SSH密钥的工具ssh-keygen，下面就来一睹风采。</p><p>首先进入Linux系统的用户目录下的.ssh目录下，root用户是/root/.ssh，普通用户是/home/您的用户名/.ssh，我们以root用户为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# cd /root/.ssh/</span><br><span class="line">[root@b04f945297ac .ssh]# ls</span><br><span class="line">known_hosts</span><br></pre></td></tr></table></figure><blockquote><p>上面是没有创建过ssh秘钥的样子</p></blockquote><p> 执行ssh-keygen命令创建密钥对：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ssh-keygen -t rsa -b 4096</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): /root/.ssh/zhimma_id_rsa</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/zhimma_id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/zhimma_id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:WrIN4U/dk+1KdTxv0t5zFeXCeWWpvaNtFFMxbkDY2Cw root@b04f945297ac</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 4096]----+</span><br><span class="line">|            Bo oo|</span><br><span class="line">|           E +o.*|</span><br><span class="line">|      .     ..o*+|</span><br><span class="line">|     . . . . +=*o|</span><br><span class="line">|      + S . + o+B|</span><br><span class="line">|       X     + *+|</span><br><span class="line">|      o o   . * *|</span><br><span class="line">|           . o Bo|</span><br><span class="line">|            . . =|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><blockquote><p>-b 参数，指定了长度，也可以不加-b参数，直接使用ssh-keygen -t rsa</p><p>这里我重新命名了下秘钥文件名 zhimma_id_rsa</p></blockquote><p>密钥生成后会在当前目录下多出两个文件，zhimma_id_rsa和zhimma_id_rsa.pub，其中zhimma_id_rsa是私钥（敲黑板：这个很重要，不能外泄），zhimma_id_rsa.pub这个是公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ls</span><br><span class="line">known_hosts  zhimma_id_rsa  zhimma_id_rsa.pub</span><br><span class="line">[root@b04f945297ac .ssh]#</span><br></pre></td></tr></table></figure><h2 id="放置公钥"><a href="#放置公钥" class="headerlink" title="放置公钥"></a>放置公钥</h2><h3 id="ssh-copy-id"><a href="#ssh-copy-id" class="headerlink" title="ssh-copy-id"></a>ssh-copy-id</h3><p>把公钥拷贝到需要登录的远程服务器或Linux系统上，这里可以使用<code>ssh-copy-id</code></p><blockquote><p>ssh-copy-id默认端口是22，如果要重新指定端口，则使用<code>-p 端口号</code>命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ssh-copy-id -i /root/.ssh/zhimma_id_rsa.pub -p 203 root@192.168.2.107  </span><br><span class="line">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/zhimma_id_rsa.pub&quot;</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span><br><span class="line">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span><br><span class="line">root@192.168.2.107&apos;s password: </span><br><span class="line"></span><br><span class="line">Number of key(s) added: 1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   &quot;ssh -p &apos;203&apos; &apos;root@192.168.2.107&apos;&quot;</span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br></pre></td></tr></table></figure><p>这样就把公钥加的指定的服务器上了</p><p>尝试登陆下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ssh -i /root/.ssh/zhimma_id_rsa -p 203 root@192.168.2.107</span><br><span class="line">Last login: Wed Jun  6 04:16:09 2018 from 172.17.0.1</span><br><span class="line">[root@e91b4a662023 ~]#</span><br></pre></td></tr></table></figure><p>登陆成功！</p><h3 id="手动放置"><a href="#手动放置" class="headerlink" title="手动放置"></a>手动放置</h3><p>进入远程服务器.ssh目录，创建authorized_keys 文件，赋权限600</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@01bb4850cc8c .ssh]# touch authorized_keys</span><br><span class="line">[root@01bb4850cc8c .ssh]# chmod -R 600 authorized_keys </span><br><span class="line">[root@01bb4850cc8c .ssh]# ls -al</span><br><span class="line">total 16</span><br><span class="line">drwx------ 1 root root 4096 Jun  6 07:02 .</span><br><span class="line">dr-xr-x--- 1 root root 4096 Apr 27 08:15 ..</span><br><span class="line">-rw------- 1 root root    0 Jun  6 07:02 authorized_keys</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jun  6 07:02 dd</span><br><span class="line">-rw-r--r-- 1 root root  824 Mar 16 08:59 known_hosts</span><br></pre></td></tr></table></figure><p>复制<code>zhimma_id_rsa.pub</code>的内容进入这个文件</p><p>尝试登陆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@b04f945297ac .ssh]# ssh -i /root/.ssh/zhimma_id_rsa -p 204 root@192.168.2.107</span><br><span class="line">Last login: Wed Jun  6 04:18:46 2018 from 172.17.0.1</span><br><span class="line">[root@01bb4850cc8c ~]#</span><br></pre></td></tr></table></figure><p>登陆成功！</p><h2 id="ssh-keygen可用的参数"><a href="#ssh-keygen可用的参数" class="headerlink" title="ssh-keygen可用的参数"></a>ssh-keygen可用的参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen可用的参数选项有：</span><br><span class="line">     -a trials  在使用 -T 对 DH-GEX 候选素数进行安全筛选时需要执行的基本测试数量。</span><br><span class="line">     -B      显示指定的公钥/私钥文件的 bubblebabble 摘要。</span><br><span class="line">     -b bits 指定密钥长度。对于RSA密钥，最小要求768位，默认是2048位。DSA密钥必须恰好是1024位(FIPS 186-2 标准的要求)。</span><br><span class="line">     -C comment 提供一个新注释</span><br><span class="line">     -c      要求修改私钥和公钥文件中的注释。本选项只支持 RSA1 密钥。</span><br><span class="line">             程序将提示输入私钥文件名、密语(如果存在)、新注释。</span><br><span class="line">     -D reader下载存储在智能卡 reader 里的 RSA 公钥。</span><br><span class="line"></span><br><span class="line">     -e      </span><br><span class="line">         读取OpenSSH的私钥或公钥文件，并以 RFC 4716 SSH 公钥文件格式在 stdout 上显示出来。</span><br><span class="line">              该选项能够为多种商业版本的 SSH 输出密钥。</span><br><span class="line">     -F hostname</span><br><span class="line">             在 known_hosts 文件中搜索指定的 hostname ，并列出所有的匹配项。</span><br><span class="line">             这个选项主要用于查找散列过的主机名/ip地址，还可以和 -H 选项联用打印找到的公钥的散列值。</span><br><span class="line">     -f filename</span><br><span class="line">             指定密钥文件名。</span><br><span class="line">     -G output_file</span><br><span class="line">             为 DH-GEX 产生候选素数。这些素数必须在使用之前使用 -T 选项进行安全筛选。</span><br><span class="line">     -g      在使用 -r 打印指纹资源记录的时候使用通用的 DNS 格式。</span><br><span class="line">     -H      对 known_hosts 文件进行散列计算。这将把文件中的所有主机名/ip地址替换为相应的散列值。</span><br><span class="line">             原来文件的内容将会添加一个&quot;.old&quot;后缀后保存。这些散列值只能被 ssh 和 sshd 使用。</span><br><span class="line">             这个选项不会修改已经经过散列的主机名/ip地址，因此可以在部分公钥已经散列过的文件上安全使用。</span><br><span class="line">     -i      读取未加密的SSH-2兼容的私钥/公钥文件，然后在 stdout 显示OpenSSH兼容的私钥/公钥。</span><br><span class="line">             该选项主要用于从多种商业版本的SSH中导入密钥。</span><br><span class="line">     -l      显示公钥文件的指纹数据。它也支持 RSA1 的私钥。</span><br><span class="line">             对于RSA和DSA密钥，将会寻找对应的公钥文件，然后显示其指纹数据。</span><br><span class="line">     -M memory</span><br><span class="line">             指定在生成 DH-GEXS 候选素数的时候最大内存用量(MB)。</span><br><span class="line"></span><br><span class="line">     -N new_passphrase</span><br><span class="line">             提供一个新的密语。</span><br><span class="line"></span><br><span class="line">     -P passphrase</span><br><span class="line">             提供(旧)密语。</span><br><span class="line">     -p      要求改变某私钥文件的密语而不重建私钥。程序将提示输入私钥文件名、原来的密语、以及两次输入新密语。</span><br><span class="line">     -q      安静模式。用于在 /etc/rc 中创建新密钥的时候。</span><br><span class="line">     -R hostname</span><br><span class="line">             从 known_hosts 文件中删除所有属于 hostname 的密钥。</span><br><span class="line">             这个选项主要用于删除经过散列的主机(参见 -H 选项)的密钥。</span><br><span class="line">     -r hostname</span><br><span class="line">             打印名为 hostname 的公钥文件的 SSHFP 指纹资源记录。</span><br><span class="line">     -S start</span><br><span class="line">             指定在生成 DH-GEX 候选模数时的起始点(16进制)。</span><br><span class="line">     -T output_file</span><br><span class="line">             测试 Diffie-Hellman group exchange 候选素数(由 -G 选项生成)的安全性。</span><br><span class="line">     -t type</span><br><span class="line">             指定要创建的密钥类型。可以使用：&quot;rsa1&quot;(SSH-1) &quot;rsa&quot;(SSH-2) &quot;dsa&quot;(SSH-2)</span><br><span class="line">     -U reader</span><br><span class="line">             把现存的RSA私钥上传到智能卡 reader</span><br><span class="line">     -v      详细模式。ssh-keygen 将会输出处理过程的详细调试信息。常用于调试模数的产生过程。</span><br><span class="line">             重复使用多个 -v 选项将会增加信息的详细程度(最大3次)。</span><br><span class="line">     -W generator</span><br><span class="line">             指定在为 DH-GEX 测试候选模数时想要使用的 generator</span><br><span class="line">     -y      读取OpenSSH专有格式的公钥文件，并将OpenSSH公钥显示在 stdout 上。</span><br></pre></td></tr></table></figure><p>### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH-密钥创建及密钥登录&quot;&gt;&lt;a href=&quot;#SSH-密钥创建及密钥登录&quot; class=&quot;headerlink&quot; title=&quot;SSH 密钥创建及密钥登录&quot;&gt;&lt;/a&gt;SSH 密钥创建及密钥登录&lt;/h1&gt;&lt;p&gt;本文基本引自这里：&lt;a href=&quot;https://
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/elk%20stack%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2018/09/29/elk stack实践/</id>
    <published>2018-09-29T11:08:49.328Z</published>
    <updated>2018-10-05T15:16:45.081Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a>环境说明：</h2><p>真实机IP：192.168.1.198，其中</p><table><thead><tr><th>服务器</th><th>IP</th><th>说明</th></tr></thead><tbody><tr><td>Redis-server</td><td>172.17.0.3</td><td>nginx服务器1</td></tr><tr><td>Project1(logstash)</td><td>172.17.0.2</td><td>nginx服务器2</td></tr><tr><td>Project2(logstash)</td><td>172.17.0.3</td><td>服务器1</td></tr><tr><td>Elk</td><td>172.17.0.6</td><td>服务器2</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --privileged=true --name redis-master -p 63791:6379 -p 221:22 -v /Users/zhimma/Data/www/:/data/www/ 67793c412ed1 /usr/sbin/init</span><br><span class="line"></span><br><span class="line">docker run -it -d --privileged=true --name project1 -p 50441:5044 -p 8081:80 -p 10241:1024 -p 222:22  -v /Users/zhimma/Data/www/:/data/www/ 67793c412ed1 /usr/sbin/init</span><br><span class="line"></span><br><span class="line">docker run -it -d --privileged=true --name project2 -p 50442:5044 -p 8082:80 -p 10242:1024 -p 223:22  -v /Users/zhimma/Data/www/:/data/www/ 67793c412ed1 /usr/sbin/init</span><br><span class="line"></span><br><span class="line">docker run -it -d --privileged=true --name elk -p 50443:5044 -p 15602:5601 -p 224:22  -p 8083:80 -p 10243:1024 -v /Users/zhimma/Data/www/:/data/www/ 67793c412ed1 /usr/sbin/init</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">CONTAINER ID              PORTS                       NAMES</span><br><span class="line"><span class="number">3</span>f139b00a661              <span class="number">3306</span>/tcp, <span class="number">6379</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">224</span>-&gt;<span class="number">22</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8083</span>-&gt;<span class="number">80</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">10243</span>-&gt;<span class="number">1024</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">50443</span>-&gt;<span class="number">5044</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">15602</span>-&gt;<span class="number">5601</span>/tcp   </span><br><span class="line">elk</span><br><span class="line">e08ca55e124d              <span class="number">3306</span>/tcp, <span class="number">6379</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">223</span>-&gt;<span class="number">22</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8082</span>-&gt;<span class="number">80</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">10242</span>-&gt;<span class="number">1024</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">50442</span>-&gt;<span class="number">5044</span>/tcp                            </span><br><span class="line">project2</span><br><span class="line"><span class="number">3</span>b670e7a9ad1              <span class="number">3306</span>/tcp, <span class="number">6379</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">222</span>-&gt;<span class="number">22</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8081</span>-&gt;<span class="number">80</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">10241</span>-&gt;<span class="number">1024</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">50441</span>-&gt;<span class="number">5044</span>/tcp                            </span><br><span class="line">project1</span><br><span class="line">dbefa01b3393              <span class="number">80</span>/tcp, <span class="number">3306</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">221</span>-&gt;<span class="number">22</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">63791</span>-&gt;<span class="number">6379</span>/tcp</span><br><span class="line">redis-master</span><br></pre></td></tr></table></figure><blockquote><p>所有服务器关闭防火墙</p><p>将软件和配置文件放在宿主机目录，各个容器就可以共享使用了</p></blockquote><p><img src="https://zhimma.oss-cn-beijing.aliyuncs.com/md/elk.png" alt="elk-stach"></p><h2 id="redis-master安装logstash"><a href="#redis-master安装logstash" class="headerlink" title="redis-master安装logstash"></a>redis-master安装logstash</h2><p>服务器安装redis,进行配置,开机启动</p><h2 id="project服务器安装logstash"><a href="#project服务器安装logstash" class="headerlink" title="project服务器安装logstash"></a>project服务器安装logstash</h2><h3 id="安装java环境"><a href="#安装java环境" class="headerlink" title="安装java环境"></a>安装java环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java</span><br></pre></td></tr></table></figure><p>###下载logstash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/downloads</span><br><span class="line">mkdir /opt/soft</span><br><span class="line">cd /opt/downloads</span><br><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-6.4.1.tar.gz</span><br><span class="line">tar -zxvf logstash-6.4.1.tar.gz -C /opt/soft/</span><br></pre></td></tr></table></figure><h3 id="配置logstash"><a href="#配置logstash" class="headerlink" title="配置logstash"></a>配置logstash</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /opt/soft/logstash-6.4.0/config/jvm.options</span><br><span class="line"></span><br><span class="line">-Xms2g</span><br><span class="line">-Xmx2g</span><br></pre></td></tr></table></figure><h3 id="安装配置supervisor"><a href="#安装配置supervisor" class="headerlink" title="安装配置supervisor"></a>安装配置supervisor</h3><blockquote><p>参考：<a href="https://blog.csdn.net/donggege214/article/details/80264811" target="_blank" rel="noopener">https://blog.csdn.net/donggege214/article/details/80264811</a></p></blockquote><ul><li><code>vi /etc/supervisord.conf</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=/<span class="keyword">var</span>/run/supervisor/supervisor.sock </span><br><span class="line">chmod=<span class="number">0700</span></span><br><span class="line">chown=root:root</span><br><span class="line">[<span class="keyword">include</span>]</span><br><span class="line">files = supervisord.d<span class="comment">/*.conf</span></span><br></pre></td></tr></table></figure><ul><li><code>vi /etc/supervisord/l.conf</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[program:elk-l]</span><br><span class="line">command=/opt/soft/logstash-6.4.0/bin/logstash -r -f /data/www/elk/conf/project/*.conf</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=root</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/var/log/elk/l.log</span><br><span class="line">priority=10</span><br></pre></td></tr></table></figure><ul><li><code>vi /data/www/elk/conf/project/project.conf</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; [ &quot;/data/www/project-mdl/trunk/Common/Runtime/Apps/*.log&quot; ]</span><br><span class="line">    start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    ignore_older =&gt; 0</span><br><span class="line">    sincedb_path =&gt; &quot;/dev/null&quot;</span><br><span class="line">    type =&gt; &quot;Api&quot;</span><br><span class="line">    codec =&gt; multiline &#123;</span><br><span class="line">      pattern =&gt; &quot;^\[&quot;</span><br><span class="line">      negate =&gt; true</span><br><span class="line">      what =&gt; &quot;previous&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123; </span><br><span class="line">  if [type] == &quot;Api&quot; &#123;</span><br><span class="line">    redis &#123;</span><br><span class="line">        host =&gt; &apos;192.168.1.198&apos;</span><br><span class="line">        port =&gt; &apos;63791&apos;</span><br><span class="line">        db =&gt; &apos;1&apos;</span><br><span class="line">        data_type =&gt; &quot;list&quot;</span><br><span class="line">        key =&gt; &quot;project&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启supervisor，如果数据写入redis-master服务器，那么就代表项目日志收集成功</p><h2 id="ELK服务器"><a href="#ELK服务器" class="headerlink" title="ELK服务器"></a>ELK服务器</h2><h3 id="安装java环境-1"><a href="#安装java环境-1" class="headerlink" title="安装java环境"></a>安装java环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java</span><br></pre></td></tr></table></figure><h3 id="安装elk"><a href="#安装elk" class="headerlink" title="安装elk"></a>安装elk</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/downloads</span><br><span class="line">mkdir /opt/soft</span><br><span class="line">cd /opt/downloads</span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.1.tar.gz</span><br><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.4.1-linux-x86_64.tar.gz</span><br><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-6.4.1.tar.gz</span><br><span class="line">tar -zxvf logstash-6.4.1.tar.gz -C /opt/soft/</span><br><span class="line">tar -zxvf elasticsearch-6.4.1.tar.gz -C /opt/soft/</span><br><span class="line">tar -zxvf kibana-6.4.1-linux-x86_64.tar.gz -C /opt/soft/</span><br></pre></td></tr></table></figure><h3 id="配置elk"><a href="#配置elk" class="headerlink" title="配置elk"></a>配置elk</h3><h4 id="创建elastic用户"><a href="#创建elastic用户" class="headerlink" title="创建elastic用户"></a>创建elastic用户</h4><p>由于 Elasticsearch <code>不允许也不推荐使用 root 用户来运行</code>，因此需要新建一个用户来启动 Elasticsearch。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser elastic    #创建elastic用户</span><br><span class="line">passwd elastic     #修改elastic密码</span><br></pre></td></tr></table></figure><h4 id="创建ES数据日志文件夹"><a href="#创建ES数据日志文件夹" class="headerlink" title="创建ES数据日志文件夹"></a>创建ES数据日志文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /data/www/elk</span><br><span class="line">mkdir data          #创建数据目录</span><br><span class="line">mkdir log           #创建日志目录</span><br><span class="line">mkdir bak           #创建备份目录</span><br><span class="line">chown -R elatic /data/www/elk/  #修改目录拥有者为 elastic</span><br></pre></td></tr></table></figure><h4 id="优化文件句柄数以及用户可用进程数"><a href="#优化文件句柄数以及用户可用进程数" class="headerlink" title="优化文件句柄数以及用户可用进程数"></a>优化文件句柄数以及用户可用进程数</h4><p>新版 Elasticsearch 要求其可用的文件句柄至少为 65536，同时要求其进程数限制至少为 2048，可用按照下面的指令进行修改。</p><p>分别对应以下两个报错信息：</p><ol><li>max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]；</li><li>max number of threads [1024] for user [es] is too low, increase to at least [2048]。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line">*     soft   nofile  655350</span><br><span class="line">*     hard   nofile  655350</span><br><span class="line">*     soft   nproc   4096</span><br><span class="line">*     hard   nproc   8192</span><br><span class="line">elastic soft memlock unlimited</span><br><span class="line">elastic hard memlock unlimited</span><br></pre></td></tr></table></figure><h4 id="修改内核交换"><a href="#修改内核交换" class="headerlink" title="修改内核交换"></a>修改内核交换</h4><p>为了避免不必要的磁盘和内存交换，影响效率，需要将 <code>vm.swappiness</code> 修改为 1。</p><p>此外需要修改最大虚拟内存 <code>vm.max_map_count</code> 防止启动时报错：<code>max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">vm.swappiness = 1</span><br><span class="line">vm.max_map_count = 655360</span><br><span class="line"></span><br><span class="line">sysctl -p   # 立即生效</span><br></pre></td></tr></table></figure><h4 id="关闭swap并且重启"><a href="#关闭swap并且重启" class="headerlink" title="关闭swap并且重启"></a>关闭swap并且重启</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h4 id="配置-Elasticsearch-内存占用"><a href="#配置-Elasticsearch-内存占用" class="headerlink" title="配置 Elasticsearch 内存占用"></a>配置 Elasticsearch 内存占用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/soft/elasticsearch-6.4.1/config/</span><br><span class="line">vim jvm.options </span><br><span class="line"></span><br><span class="line">-Xms2g</span><br><span class="line">-Xmx2g</span><br></pre></td></tr></table></figure><h4 id="配置-Elasticsearch配置文件"><a href="#配置-Elasticsearch配置文件" class="headerlink" title="配置 Elasticsearch配置文件"></a>配置 Elasticsearch配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@3f139b00a661 ~]# grep -n &apos;^[a-z]&apos; /opt/soft/elasticsearch-6.4.0/config/elasticsearch.yml</span><br><span class="line"></span><br><span class="line">17:cluster.name: elk-demo</span><br><span class="line">33:path.data: /data/www/elk/data</span><br><span class="line">37:path.logs: /data/www/logs</span><br><span class="line">43:bootstrap.memory_lock: false</span><br><span class="line">55:network.host: 0.0.0.0</span><br><span class="line">59:http.port: 9200</span><br></pre></td></tr></table></figure><h3 id="安装配置supervisor-1"><a href="#安装配置supervisor-1" class="headerlink" title="安装配置supervisor"></a>安装配置supervisor</h3><ul><li><code>grep -n &#39;^[a-z]&#39; /etc/supervisord.conf</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">4:file=/var/run/supervisor/supervisor.sock   ; (the path to the socket file)</span><br><span class="line">5:chmod=0700                 ; sockef file mode (default 0700)</span><br><span class="line">6:chown=root:root            ; socket file uid:gid owner</span><br><span class="line">16:logfile=/var/log/supervisor/supervisord.log  ; (main log file;default $CWD/supervisord.log)</span><br><span class="line">17:logfile_maxbytes=50MB       ; (max main logfile bytes b4 rotation;default 50MB)</span><br><span class="line">18:logfile_backups=10          ; (num of main logfile rotation backups;default 10)</span><br><span class="line">19:loglevel=info               ; (log level;default info; others: debug,warn,trace)</span><br><span class="line">20:pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">21:nodaemon=false              ; (start in foreground if true;default false)</span><br><span class="line">22:minfds=1024                 ; (min. avail startup file descriptors;default 1024)</span><br><span class="line">23:minprocs=200                ; (min. avail process descriptors;default 200)</span><br><span class="line">37:supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line">40:serverurl=unix:///var/run/supervisor/supervisor.sock ; use a unix:// URL  for a unix socket</span><br><span class="line">129:files = /etc/supervisord.d/elk.conf</span><br></pre></td></tr></table></figure><ul><li><code>grep &#39;^[a-z]&#39; /etc/supervisord.d/elk.conf</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">command=/opt/soft/elasticsearch-6.4.0/bin/elasticsearch</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=elastic</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/var/log/elk/e.log</span><br><span class="line">priority=1</span><br><span class="line">command=/opt/soft/logstash-6.4.0/bin/logstash -r -f /data/www/elk/conf/elk/*.conf</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=elastic</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/var/log/elk/l.log</span><br><span class="line">priority=10</span><br><span class="line">command=/opt/soft/kibana-6.4.0-linux-x86_64/bin/kibana</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=elastic</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/var/log/elk/k.log</span><br><span class="line">priority=20</span><br></pre></td></tr></table></figure><ul><li><code>cat /data/www/elk/conf/elk/elk.conf</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  redis &#123;</span><br><span class="line">        host =&gt; &apos;192.168.1.198&apos;</span><br><span class="line">        port =&gt;  63791</span><br><span class="line">        db =&gt; 1</span><br><span class="line">        data_type =&gt; &quot;list&quot;</span><br><span class="line">        key =&gt; &quot;project&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  stdin &#123;</span><br><span class="line">    codec =&gt; multiline &#123;</span><br><span class="line">      pattern =&gt; &quot;^\[&quot;</span><br><span class="line">      negate =&gt; true</span><br><span class="line">      what =&gt; &quot;previous&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">output &#123; </span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; [ &quot;127.0.0.1:9200&quot; ] </span><br><span class="line">      index =&gt; &quot;project&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;环境说明：&quot;&gt;&lt;a href=&quot;#环境说明：&quot; class=&quot;headerlink&quot; title=&quot;环境说明：&quot;&gt;&lt;/a&gt;环境说明：&lt;/h2&gt;&lt;p&gt;真实机IP：192.168.1.198，其中&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/Nginx%E9%85%8D%E7%BD%AE%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/09/29/Nginx配置整理/</id>
    <published>2018-09-29T11:08:49.327Z</published>
    <updated>2018-09-29T11:08:49.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx配置整理"><a href="#Nginx配置整理" class="headerlink" title="Nginx配置整理"></a>Nginx配置整理</h1><p><a href="https://www.zybuluo.com/phper/note/89391" target="_blank" rel="noopener">https://www.zybuluo.com/phper/note/89391</a></p><h2 id="nginx-conf配置概览"><a href="#nginx-conf配置概览" class="headerlink" title="nginx.conf配置概览"></a>nginx.conf配置概览</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">main</span><br><span class="line"></span><br><span class="line">events&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">upstram myObject&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server1&#123;</span><br><span class="line">...</span><br><span class="line">location&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">serverN&#123;</span><br><span class="line">...</span><br><span class="line">location&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx配置文件主要分为六个区域：</p><p>main(全局设置)、event(nginx工作模式)、http(http设置)、upstream(负载均衡服务器设置)、server(主机设置)、location(URL匹配)。</p><h3 id="main模块"><a href="#main模块" class="headerlink" title="main模块"></a>main模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 来指定Nginx Worker进程运行的用户及用户组，默认由nobody账号运行。</span><br><span class="line">user  nobody nobody;</span><br><span class="line">// 来指定Nginx要快起的子进程数。每个Nginx进程平均耗费10M~12M内存。根据经验一般指定一个进程就足够了，如果是多核CPU，建议数量和CPU数量保持一样即可。</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">// 用来定义全局错误日志文件。日志输出级别有debug、info、notice、warn、error、crit可供选择，其中，debug输出日志最为最详细，而crit输出日志最少。</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">// 用来指定进程id的存储文件位置</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line">// 用于指定一个nginx进程最多可以打开的最多文件描述符数目</span><br><span class="line">worker_rlimit_nofile 1024;</span><br></pre></td></tr></table></figure><h3 id="events模块"><a href="#events模块" class="headerlink" title="events模块"></a>events模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">use kqueue;  #mac平台</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>use</code>用来指定Nginx的工作模式。Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll。其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中，因为Mac基于BSD,所以Mac也得用这个模式，对于Linux系统，epoll工作模式是首选。</p><p><code>worker_connections</code>用于定义Nginx每个进程的最大连接数，即接收前端的最大请求数，默认是1024。最大客户端连接数由<code>worker_processes</code>和<code>worker_connections</code>决定，即<code>Max_clients=worker_processes*worker_connections</code>，在作为反向代理时，Max_clients变为：<code>Max_clients = worker_processes * worker_connections/4</code>。<br>进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令“ulimit -n 65536”后worker_connections的设置才能生效。</p><h3 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h3><p>Http模块是核心的模块，负责HTTP服务相关属性的配置，包含server和upstream子模块。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">// incluede 用来设定文件的mime类型，类型在配置文件目录下的mime.type文件定义，用来告诉nginx来识别文件类型</span><br><span class="line">    include       mime.types;</span><br><span class="line">// 设置了默认类型为二进制流，也就是说当文件类型未定义时使用这种方式。   </span><br><span class="line">default_type  application/octet-stream;</span><br><span class="line">    client_max_body_size 120m;</span><br><span class="line">// 设置日志格式和记录那修参数 这里设置为main，刚好用于access_log来记录这种类型</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">// 用来纪录每次的访问日志的文件地址，后面的`main`是日志的格式样式，对应于log_format的main。</span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">// 用于开启高效文件传输模式，将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞</span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">// 设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接。</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">upstream myproject &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="server模块"><a href="#server模块" class="headerlink" title="server模块"></a>server模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 标志定义虚拟主机开始</span><br><span class="line">server &#123;</span><br><span class="line">// 用于指定虚拟主机的服务端口</span><br><span class="line">    listen       80;</span><br><span class="line">// 用来指定IP地址或者域名，多个域名直接用空格分个格</span><br><span class="line">    server_name  localhost 192.168.12.10 www.yangyi.com;</span><br><span class="line">    // 表示虚拟主机的root web目录</span><br><span class="line">    root   /home/www;</span><br><span class="line">// 全局定义访问的默认首页地址，需要和locate&#123;&#125;下面定义的区分开来</span><br><span class="line">    index  index.php index.html index.htm; </span><br><span class="line">// 设置网页的默认编码格式</span><br><span class="line">    charset utf-8;</span><br><span class="line">// 用来存放次虚拟主机的日志目录，最后的main用来指定访问日志的输出格式</span><br><span class="line">    access_log  usr/local/var/log/host.access.log  main;</span><br><span class="line">    aerror_log  usr/local/var/log/host.error.log  error;</span><br><span class="line">    location / &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="location-模块"><a href="#location-模块" class="headerlink" title="location 模块"></a>location 模块</h5><p>location模块是nginx中用的最多的，也是最重要的模块了，什么负载均衡啊、反向代理啊、虚拟域名啊都与它相关<br>location 根据它字面意思就知道是来定位的，定位URL，解析URL，所以，它也提供了强大的正则匹配功能，也支持条件判断匹配，用户可以通过location指令实现Nginx对动、静态网页进行过滤处理。像我们的php环境搭建就是用到了它。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 匹配访问根目录</span><br><span class="line">location / &#123;</span><br><span class="line">// root指令用于指定访问根目录时，虚拟主机的web目录，这个目录可以是相对路径（相对路径是相对于nginx的安装目录）。也可以是绝对路径。</span><br><span class="line">    root   /home/www;</span><br><span class="line">// index用于设定我们只输入域名后访问的默认首页地址，有个先后顺序：index.php index.html index.htm，如果没有开启目录浏览权限，又找不到这些默认首页，就会报403错误。</span><br><span class="line">    index  index.php index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面这个例子是运用正则匹配来链接php。我们之前搭建环境也是这样做：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 正则匹配.php结尾的URL</span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root           /home/www;</span><br><span class="line">// fast_pass链接的是php-fpm 的地址</span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    include        fastcgi.conf;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="upstream-模块"><a href="#upstream-模块" class="headerlink" title="upstream 模块"></a>upstream 模块</h4><p>upstream 模块负债负载均衡模块，通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream demo.com&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.12.1:80;</span><br><span class="line">    server 192.168.12.2:80 down;</span><br><span class="line">    server 192.168.12.3:8080  max_fails=3  fail_timeout=20s;</span><br><span class="line">    server 192.168.12.4:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面的例子中，通过<code>upstream</code>指令指定了一个负载均衡器的名称<code>demo.com</code>。这个名称可以任意指定，在后面需要的地方直接调用即可。</p><p>里面是<code>ip_hash</code>这是其中的一种负载均衡调度算法。紧接着就是各种服务器了。用<code>server</code>关键字表识，后面接ip。</p><p>Nginx的<code>负载均衡</code>模块目前支持<code>4种调度算法</code>:</p><ol><li>weight 轮询（默认）。每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。weight。指定轮询权值，weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。</li><li>ip_hash。每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题。</li><li>fair。比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块。</li><li>url_hash。按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包。</li></ol><p>在HTTP Upstream模块中，可以通过server指令指定后端服务器的IP地址和端口，同时还可以设定每个后端服务器在负载均衡调度中的状态。常用的状态有：</p><ul><li>down，表示当前的server暂时不参与负载均衡。</li><li>backup，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。</li><li>max_fails，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。</li><li>fail_timeout，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。</li></ul><p><strong>注意</strong> 当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx配置整理&quot;&gt;&lt;a href=&quot;#Nginx配置整理&quot; class=&quot;headerlink&quot; title=&quot;Nginx配置整理&quot;&gt;&lt;/a&gt;Nginx配置整理&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.zybuluo.com/phper/not
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/09/29/PHP-FPM%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/09/29/PHP-FPM配置详解/</id>
    <published>2018-09-29T11:08:49.327Z</published>
    <updated>2018-09-29T11:08:49.327Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p><a href="http://www.ywnds.com/?p=5329" target="_blank" rel="noopener">PHP-FPM配置文件参数解释</a></p><h3 id="PHP-FPM配置详解"><a href="#PHP-FPM配置详解" class="headerlink" title="PHP-FPM配置详解"></a>PHP-FPM配置详解</h3><p>FPM配置文件为php-fpm.conf，其语法类似 php.ini 。其php手册上也有详细的讲解：<a href="http://php.net/manual/zh/install.fpm.configuration.php" target="_blank" rel="noopener">http://php.net/manual/zh/install.fpm.configuration.php</a></p><h4 id="php-fpm-conf全局配置段"><a href="#php-fpm-conf全局配置段" class="headerlink" title="php-fpm.conf全局配置段"></a>php-fpm.conf全局配置段</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 包含其他POOL定义配置文件</span></span><br><span class="line"><span class="keyword">include</span>=/etc/php-fpm.d<span class="comment">/*.conf</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 全局配置段，定义PID文件的位置和错误日志的位置</span></span><br><span class="line"><span class="comment">[global]</span></span><br><span class="line"><span class="comment">daemonize = yes</span></span><br><span class="line"><span class="comment">pid = /var/run/php-fpm/php-fpm.pid</span></span><br><span class="line"><span class="comment">error_log = /var/log/php-fpm/error.log</span></span><br></pre></td></tr></table></figure><p>一般在主配置文件php-fpm.conf全局配置段中的配置非常少，php-fpm可以配置多个pool，每个pool都是以一个独立的配置文件来运作，默认都会定义在主配置文件的include包含文件目录中。php默认会提供一个www的pool，大概配置如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/php-fpm.d/www.conf</span><br><span class="line">[www]</span><br><span class="line">user = apache</span><br><span class="line">group = apache</span><br><span class="line"> </span><br><span class="line">listen = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9000</span></span><br><span class="line">listen.allowed_clients = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">pm = dynamic</span><br><span class="line">pm.max_children = <span class="number">50</span></span><br><span class="line">pm.start_servers = <span class="number">5</span></span><br><span class="line">pm.min_spare_servers = <span class="number">5</span></span><br><span class="line">pm.max_spare_servers = <span class="number">35</span></span><br></pre></td></tr></table></figure><p>每个pool配置文件参数可以独立，也可以设置在主配置文件的全局配置段中，这样每个pool就共用一个参数。建议最好分开设置。大概常用参数如下：</p><h5 id="daemonize-yes"><a href="#daemonize-yes" class="headerlink" title="daemonize = yes"></a>daemonize = yes</h5><p>#后台执行fpm，默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置。</p><h5 id="listen-127-0-0-1-9000"><a href="#listen-127-0-0-1-9000" class="headerlink" title="listen = 127.0.0.1:9000"></a>listen = 127.0.0.1:9000</h5><p>#fpm监听端口，即nginx中php处理的地址，一般默认值即可。可用格式为: ‘ip:port’, ‘port’, ‘/path/to/unix/socket’，每个进程池都需要设置。如果nginx和php在不同的机器上，分布式处理，就设置ip这里就可以了。</p><h5 id="listen-backlog-1"><a href="#listen-backlog-1" class="headerlink" title="listen.backlog = -1"></a>listen.backlog = -1</h5><p>#backlog数，设置 listen 的半连接队列长度，-1表示无限制，由操作系统决定，此行注释掉就行。backlog含义参考：<a href="http://www.3gyou.cc/?p=41。" target="_blank" rel="noopener">http://www.3gyou.cc/?p=41。</a></p><h5 id="log-level-notice"><a href="#log-level-notice" class="headerlink" title="log_level = notice"></a>log_level = notice</h5><p>#错误级别. 上面的php-fpm.log纪录的登记。可用级别为: alert（必须立即处理）, error（错误情况）, warning（警告情况）, notice（一般重要信息）, debug（调试信息）. 默认: notice。</p><h5 id="emergency-restart-threshold-60"><a href="#emergency-restart-threshold-60" class="headerlink" title="emergency_restart_threshold = 60"></a>emergency_restart_threshold = 60</h5><h5 id="emergency-restart-interval-60s"><a href="#emergency-restart-interval-60s" class="headerlink" title="emergency_restart_interval = 60s"></a>emergency_restart_interval = 60s</h5><p>#表示在emergency_restart_interval所设值内出现SIGSEGV或者SIGBUS错误的php-cgi进程数如果超过 emergency_restart_threshold个，php-fpm就会优雅重启。这两个选项一般保持默认值。0 表示 ‘关闭该功能’. 默认值: 0 (关闭).</p><h5 id="process-control-timeout-0"><a href="#process-control-timeout-0" class="headerlink" title="process_control_timeout = 0"></a>process_control_timeout = 0</h5><p>#设置子进程接受主进程复用信号的超时时间. 可用单位: s(秒), m(分), h(小时), 或者 d(天) 默认单位: s(秒). 默认值: 0.</p><h5 id="listen-allowed-clients-127-0-0-1"><a href="#listen-allowed-clients-127-0-0-1" class="headerlink" title="listen.allowed_clients = 127.0.0.1"></a>listen.allowed_clients = 127.0.0.1</h5><p>#允许访问FastCGI进程的IP白名单，设置any为不限制IP，如果要设置其他主机的nginx也能访问这台FPM进程，listen处要设置成本地可被访问的IP。默认值是any。每个地址是用逗号分隔. 如果没有设置或者为空，则允许任何服务器请求连接。</p><h5 id="listen-owner-www"><a href="#listen-owner-www" class="headerlink" title="listen.owner = www"></a>listen.owner = www</h5><h5 id="listen-group-www"><a href="#listen-group-www" class="headerlink" title="listen.group = www"></a>listen.group = www</h5><h5 id="listen-mode-0666"><a href="#listen-mode-0666" class="headerlink" title="listen.mode = 0666"></a>listen.mode = 0666</h5><p>#unix socket设置选项，如果使用tcp方式访问，这里注释即可。</p><h5 id="user-www"><a href="#user-www" class="headerlink" title="user = www"></a>user = www</h5><h5 id="group-www"><a href="#group-www" class="headerlink" title="group = www"></a>group = www</h5><p>#启动进程的用户和用户组，FPM 进程运行的Unix用户, 必须要设置。用户组，如果没有设置，则默认用户的组被使用。</p><h5 id="pm-dynamic"><a href="#pm-dynamic" class="headerlink" title="pm = dynamic"></a>pm = dynamic</h5><p>#php-fpm进程启动模式，pm可以设置为static和dynamic和ondemand。如果选择static，则进程数就是固定的，由pm.max_children指定固定的子进程数。如果选择dynamic，则进程数是动态变化的，由以下参数决定：</p><h5 id="pm-max-children-50"><a href="#pm-max-children-50" class="headerlink" title="pm.max_children = 50"></a>pm.max_children = 50</h5><p>#子进程能开启的最大数。</p><h5 id="pm-start-servers-2"><a href="#pm-start-servers-2" class="headerlink" title="pm.start_servers = 2"></a>pm.start_servers = 2</h5><p>#启动时的进程数，默认值为: min_spare_servers + (max_spare_servers – min_spare_servers) / 2。</p><h5 id="pm-min-spare-servers-1"><a href="#pm-min-spare-servers-1" class="headerlink" title="pm.min_spare_servers = 1"></a>pm.min_spare_servers = 1</h5><p>#保证空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程。</p><h5 id="pm-max-spare-servers-3"><a href="#pm-max-spare-servers-3" class="headerlink" title="pm.max_spare_servers = 3"></a>pm.max_spare_servers = 3</h5><p>#保证空闲进程数最大值，如果空闲进程大于此值，此进行清理。</p><h5 id="pm-max-requests-500"><a href="#pm-max-requests-500" class="headerlink" title="pm.max_requests = 500"></a>pm.max_requests = 500</h5><p>#设置每个子进程重生之前服务的请求数. 对于可能存在内存泄漏的第三方模块来说是非常有用的. 如果设置为 ‘0’ 则一直接受请求. 等同于 PHP_FCGI_MAX_REQUESTS 环境变量. 默认值: 0。</p><h5 id="pm-status-path-status"><a href="#pm-status-path-status" class="headerlink" title="pm.status_path = /status"></a>pm.status_path = /status</h5><p>#FPM状态页面的网址. 如果没有设置, 则无法访问状态页面. 默认值: none. munin监控会使用到</p><h5 id="ping-path-ping"><a href="#ping-path-ping" class="headerlink" title="ping.path = /ping"></a>ping.path = /ping</h5><p>#FPM监控页面的ping网址. 如果没有设置, 则无法访问ping页面. 该页面用于外部检测FPM是否存活并且可以响应请求. 请注意必须以斜线开头 (/)。</p><h5 id="ping-response-pong"><a href="#ping-response-pong" class="headerlink" title="ping.response = pong"></a>ping.response = pong</h5><p>#用于定义ping请求的返回相应. 返回为 HTTP 200 的 text/plain 格式文本. 默认值: pong.</p><h5 id="access-log-log-pool-access-log"><a href="#access-log-log-pool-access-log" class="headerlink" title="access.log = log/$pool.access.log"></a>access.log = log/$pool.access.log</h5><p>#每一个请求的访问日志，默认是关闭的。</p><h5 id="access-format-“-R-–-u-t-”-m-r-Q-q-”-s-f-mili-d-kilo-M-C-”"><a href="#access-format-“-R-–-u-t-”-m-r-Q-q-”-s-f-mili-d-kilo-M-C-”" class="headerlink" title="access.format = “%R – %u %t \”%m %r%Q%q\” %s %f %{mili}d %{kilo}M %C%%”"></a>access.format = “%R – %u %t \”%m %r%Q%q\” %s %f %{mili}d %{kilo}M %C%%”</h5><p>#设定访问日志的格式。</p><h5 id="slowlog-log-pool-log-slow"><a href="#slowlog-log-pool-log-slow" class="headerlink" title="slowlog = log/$pool.log.slow"></a>slowlog = log/$pool.log.slow</h5><p>#慢请求的记录日志,配合request_slowlog_timeout使用，默认关闭</p><h5 id="request-slowlog-timeout-10s"><a href="#request-slowlog-timeout-10s" class="headerlink" title="request_slowlog_timeout = 10s"></a>request_slowlog_timeout = 10s</h5><p>#当一个请求该设置的超时时间后，就会将对应的PHP调用堆栈信息完整写入到慢日志中. 设置为 ‘0’ 表示 ‘Off’</p><h5 id="request-terminate-timeout-0"><a href="#request-terminate-timeout-0" class="headerlink" title="request_terminate_timeout = 0"></a>request_terminate_timeout = 0</h5><p>#设置单个请求的超时中止时间. 该选项可能会对php.ini设置中的’max_execution_time’因为某些特殊原因没有中止运行的脚本有用. 设置为 ‘0’ 表示 ‘Off’.当经常出现502错误时可以尝试更改此选项。</p><h5 id="rlimit-files-1024"><a href="#rlimit-files-1024" class="headerlink" title="rlimit_files = 1024"></a>rlimit_files = 1024</h5><p>#设置文件打开描述符的rlimit限制. 默认值: 系统定义值默认可打开句柄是1024，可使用 ulimit -n查看，ulimit -n 2048修改。</p><h5 id="rlimit-core-0"><a href="#rlimit-core-0" class="headerlink" title="rlimit_core = 0"></a>rlimit_core = 0</h5><p>#设置核心rlimit最大限制值. 可用值: ‘unlimited’ 、0或者正整数. 默认值: 系统定义值。</p><h5 id="chroot-data-app"><a href="#chroot-data-app" class="headerlink" title="chroot = /data/app"></a>chroot = /data/app</h5><p>#启动时的Chroot目录. 所定义的目录需要是绝对路径. 如果没有设置, 则chroot不被使用。</p><h5 id="chdir-data-app"><a href="#chdir-data-app" class="headerlink" title="chdir = /data/app"></a>chdir = /data/app</h5><p>#设置启动目录，启动时会自动Chdir到该目录. 所定义的目录需要是绝对路径. 默认值: 当前目录，或者/目录（chroot时）。</p><h5 id="catch-workers-output-yes"><a href="#catch-workers-output-yes" class="headerlink" title="catch_workers_output = yes"></a>catch_workers_output = yes</h5><p>#重定向运行过程中的stdout和stderr到主要的错误日志文件中. 如果没有设置, stdout 和 stderr 将会根据FastCGI的规则被重定向到 /dev/null . 默认值: 空。</p><p>当然还有一些无关紧要的设置，用到了再说吧。</p><h3 id="PHP-FPM重要的设置"><a href="#PHP-FPM重要的设置" class="headerlink" title="PHP-FPM重要的设置"></a>PHP-FPM重要的设置</h3><h4 id="PHP-FPM重要的设置-1"><a href="#PHP-FPM重要的设置-1" class="headerlink" title="PHP-FPM重要的设置"></a>PHP-FPM重要的设置</h4><p>在之前的文章中就说过了。在fasgcgi模式下，php会启动多个php-fpm进程，来接收nginx发来的请求，那是不是进程越多，速度就越快呢？这可不一定！得根据我们的机器配置和业务量来决定。</p><p>我们先来看下，设定进程的配置在哪里？</p><h5 id="pm-static-dynamic-ondemand"><a href="#pm-static-dynamic-ondemand" class="headerlink" title="pm = static | dynamic | ondemand"></a>pm = static | dynamic | ondemand</h5><p>pm可以设置成这样3种，我们用的最多的就上前面2种。</p><p>pm = static模式</p><p>pm = static 表示我们创建的php-fpm子进程数量是固定的，那么就只有pm.max_children = 50这个参数生效。你启动php-fpm的时候就会一起全部启动51(1个主＋50个子)个进程，颇为壮观。</p><p>pm = dynamic模式</p><p>pm = dynamic模式，表示启动进程是动态分配的，随着请求量动态变化的。他由pm.max_children，pm.start_servers，pm.min_spare_servers，pm.max_spare_servers 这几个参数共同决定。</p><p>上面已经讲过，这里再重申一下吧：</p><p>pm.max_children ＝ 50是最大可创建的子进程的数量。必须设置。这里表示最多只能50个子进程。</p><p>pm.start_servers = 20随着php-fpm一起启动时创建的子进程数目。默认值：min_spare_servers + (max_spare_servers – min_spare_servers) / 2。这里表示，一起启动会有20个子进程。</p><p>pm.min_spare_servers = 10</p><p>设置服务器空闲时最小php-fpm进程数量。必须设置。如果空闲的时候，会检查如果少于10个，就会启动几个来补上。</p><p>pm.max_spare_servers = 30</p><p>设置服务器空闲时最大php-fpm进程数量。必须设置。如果空闲时，会检查进程数，多于30个了，就会关闭几个，达到30个的状态。<br>到底选择static还数dynamic?</p><p>很多人恐惧症来袭，不知道选什么好？</p><p>一般原则是：动态适合小内存机器，灵活分配进程，省内存。静态适用于大内存机器，动态创建回收进程对服务器资源也是一种消耗。</p><p>如果你的内存很大，有8-20G，按照一个php-fpm进程20M算，100个就2G内存了，那就可以开启static模式。如果你的内存很小，比如才256M，那就要小心设置了，因为你的机器里面的其他的进程也算需要占用内存的，所以设置成dynamic是最好的，比如：pm.max_chindren = 8, 占用内存160M左右，而且可以随时变化，对于一半访问量的网站足够了。</p><h4 id="慢日志查询"><a href="#慢日志查询" class="headerlink" title="慢日志查询"></a>慢日志查询</h4><p>我们有时候会经常饱受500,504问题困扰。当nginx收到如上错误码时，可以确定后端php-fpm解析php出了某种问题，比如，执行错误，执行超时。</p><p>这个时候，我们是可以开启慢日志功能的。</p><h5 id="slowlog-usr-local-var-log-php-fpm-log-slow"><a href="#slowlog-usr-local-var-log-php-fpm-log-slow" class="headerlink" title="slowlog = /usr/local/var/log/php-fpm.log.slow"></a>slowlog = /usr/local/var/log/php-fpm.log.slow</h5><h5 id="request-slowlog-timeout-15s"><a href="#request-slowlog-timeout-15s" class="headerlink" title="request_slowlog_timeout = 15s"></a>request_slowlog_timeout = 15s</h5><p>当一个请求该设置的超时时间15秒后，就会将对应的PHP调用堆栈信息完整写入到慢日志中。</p><p>php-fpm慢日志会记录下进程号，脚本名称，具体哪个文件哪行代码的哪个函数执行时间过长：</p><p>[21-Nov-2013 14:30:38] [pool www] pid 11877<br>script_filename = /usr/local/lnmp/nginx/html/<a href="http://www.quancha.cn/www/fyzb.php" target="_blank" rel="noopener">www.quancha.cn/www/fyzb.php</a><br>[0xb70fb88c] file_get_contents() /usr/local/lnmp/nginx/html/<a href="http://www.quancha.cn/www/fyzb.php:2" target="_blank" rel="noopener">www.quancha.cn/www/fyzb.php:2</a></p><p>通过日志，我们就可以知道第2行的file_get_contents 函数有点问题，这样我们就能追踪问题了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ywnds.com/?p=5329&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PHP-FPM配置文件参数解释&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;PHP-FPM配置详解&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
  </entry>
  
</feed>
